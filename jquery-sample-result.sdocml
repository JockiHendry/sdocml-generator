<?xml version='1.0'?>
<!-- Generated by sdocml-generator (http://github.com/JockiHendry) --><javascript>
  <aliases>
    <alias name='$' type='jQuery' />
  </aliases>
  <class type='jQuery'>
    <constructors>
      <constructor scope='instance'>
        <description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='Selector'>
            <description>A string containing a selector expression</description>
          </parameter>
          <parameter name='context' usage='optional' type=''>
            <description>A DOM Element, Document, or jQuery to use as context</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find all p elements that are children of a div element and apply a border to them.
$( "div &gt; p" ).css( "border", "1px solid gray" );

&lt;p&gt;one&lt;/p&gt;
&lt;div&gt;&lt;p&gt;two&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;three&lt;/p&gt;
Find all inputs of type radio within the first form in the document.
$( "input:radio", document.forms[ 0 ] );
Find all div elements within an XML document from an Ajax response.
$( "div", xml.responseXML );
Set the background color of the page to black.
$( document.body ).css( "background", "black" );
Hide all the input elements within a form.
$( myForm.elements ).hide();
</example>
        </examples>
      </constructor>
      <constructor scope='instance'>
        <description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='element' usage='required' type='Element'>
            <description>A DOM element to wrap in a jQuery object.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find all p elements that are children of a div element and apply a border to them.
$( "div &gt; p" ).css( "border", "1px solid gray" );

&lt;p&gt;one&lt;/p&gt;
&lt;div&gt;&lt;p&gt;two&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;three&lt;/p&gt;
Find all inputs of type radio within the first form in the document.
$( "input:radio", document.forms[ 0 ] );
Find all div elements within an XML document from an Ajax response.
$( "div", xml.responseXML );
Set the background color of the page to black.
$( document.body ).css( "background", "black" );
Hide all the input elements within a form.
$( myForm.elements ).hide();
</example>
        </examples>
      </constructor>
      <constructor scope='instance'>
        <description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='elementArray' usage='required' type='Array'>
            <description>An array containing a set of DOM elements to wrap in a jQuery object.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find all p elements that are children of a div element and apply a border to them.
$( "div &gt; p" ).css( "border", "1px solid gray" );

&lt;p&gt;one&lt;/p&gt;
&lt;div&gt;&lt;p&gt;two&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;three&lt;/p&gt;
Find all inputs of type radio within the first form in the document.
$( "input:radio", document.forms[ 0 ] );
Find all div elements within an XML document from an Ajax response.
$( "div", xml.responseXML );
Set the background color of the page to black.
$( document.body ).css( "background", "black" );
Hide all the input elements within a form.
$( myForm.elements ).hide();
</example>
        </examples>
      </constructor>
      <constructor scope='instance'>
        <description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='object' usage='required' type='PlainObject'>
            <description>A plain object to wrap in a jQuery object.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find all p elements that are children of a div element and apply a border to them.
$( "div &gt; p" ).css( "border", "1px solid gray" );

&lt;p&gt;one&lt;/p&gt;
&lt;div&gt;&lt;p&gt;two&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;three&lt;/p&gt;
Find all inputs of type radio within the first form in the document.
$( "input:radio", document.forms[ 0 ] );
Find all div elements within an XML document from an Ajax response.
$( "div", xml.responseXML );
Set the background color of the page to black.
$( document.body ).css( "background", "black" );
Hide all the input elements within a form.
$( myForm.elements ).hide();
</example>
        </examples>
      </constructor>
      <constructor scope='instance'>
        <description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='jQuery object' usage='required' type='PlainObject'>
            <description>An existing jQuery object to clone.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find all p elements that are children of a div element and apply a border to them.
$( "div &gt; p" ).css( "border", "1px solid gray" );

&lt;p&gt;one&lt;/p&gt;
&lt;div&gt;&lt;p&gt;two&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;three&lt;/p&gt;
Find all inputs of type radio within the first form in the document.
$( "input:radio", document.forms[ 0 ] );
Find all div elements within an XML document from an Ajax response.
$( "div", xml.responseXML );
Set the background color of the page to black.
$( document.body ).css( "background", "black" );
Hide all the input elements within a form.
$( myForm.elements ).hide();
</example>
        </examples>
      </constructor>
      <constructor scope='instance'>
        <description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Find all p elements that are children of a div element and apply a border to them.
$( "div &gt; p" ).css( "border", "1px solid gray" );

&lt;p&gt;one&lt;/p&gt;
&lt;div&gt;&lt;p&gt;two&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;three&lt;/p&gt;
Find all inputs of type radio within the first form in the document.
$( "input:radio", document.forms[ 0 ] );
Find all div elements within an XML document from an Ajax response.
$( "div", xml.responseXML );
Set the background color of the page to black.
$( document.body ).css( "background", "black" );
Hide all the input elements within a form.
$( myForm.elements ).hide();
</example>
        </examples>
      </constructor>
      <constructor scope='instance'>
        <description>Creates DOM elements on the fly from the provided string of raw HTML.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='html' usage='required' type='htmlString'>
            <description>A string of HTML to create on the fly. Note that this parses HTML, not XML.</description>
          </parameter>
          <parameter name='ownerDocument' usage='optional' type='document'>
            <description>A document in which the new elements will be created.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Create a div element (and all of its contents) dynamically and append it to the body element. Internally, an element is created and its innerHTML property set to the given markup.
$( "&lt;div&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;" ).appendTo( "body" )
Create some DOM elements.
$( "&lt;div/&gt;", {
  "class": "test",
  text: "Click me!",
  click: function() {
    $( this ).toggleClass( "test" );
  }
})
  .appendTo( "body" );
</example>
        </examples>
      </constructor>
      <constructor scope='instance'>
        <description>Creates DOM elements on the fly from the provided string of raw HTML.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='html' usage='required' type='htmlString'>
            <description>A string defining a single, standalone, HTML element (e.g. &lt;div/&gt; or &lt;div&gt;&lt;/div&gt;).</description>
          </parameter>
          <parameter name='attributes' usage='required' type='PlainObject'>
            <description>An object of attributes, events, and methods to call on the newly-created element.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Create a div element (and all of its contents) dynamically and append it to the body element. Internally, an element is created and its innerHTML property set to the given markup.
$( "&lt;div&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;" ).appendTo( "body" )
Create some DOM elements.
$( "&lt;div/&gt;", {
  "class": "test",
  text: "Click me!",
  click: function() {
    $( this ).toggleClass( "test" );
  }
})
  .appendTo( "body" );
</example>
        </examples>
      </constructor>
      <constructor scope='instance'>
        <description>Binds a function to be executed when the DOM has finished loading.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='callback' usage='required' type='Function'>
            <description>The function to execute when the DOM is ready.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Execute the function when the DOM is ready to be used.
$(function() {
  // Document is ready
});
Use both the shortcut for $(document).ready() and the argument to write failsafe jQuery code using the $ alias, without relying on the global alias.
jQuery(function( $ ) {
  // Your code using failsafe $ alias here...
});
</example>
        </examples>
      </constructor>
    </constructors>
    <properties>
      <property name='context' type='Element' scope='instance'>
        <description>The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document.</description>
        <examples>
          <example>Determine the exact context used.
$( "ul" )
  .append( "&lt;li&gt;" + $( "ul" ).context + "&lt;/li&gt;" )
  .append( "&lt;li&gt;" + $( "ul", document.body ).context.nodeName + "&lt;/li&gt;" );

Context: &lt;ul&gt;&lt;/ul&gt;
</example>
        </examples>
      </property>
      <property name='jquery' type='String' scope='instance'>
        <description>A string containing the jQuery version number.</description>
        <examples>
          <example>Determine if an object is a jQuery object
var a = { what: "A regular JS object" },
  b = $( "body" );

if ( a.jquery ) { // Falsy, since it's undefined
  alert( "a is a jQuery object!" );
}

if ( b.jquery ) { // Truthy, since it's a string
    alert( "b is a jQuery object!" );
}
Get the current version of jQuery running on the page
alert( "You are running jQuery version: " + $.fn.jquery );
</example>
        </examples>
      </property>
      <property name='length' type='Integer' scope='instance'>
        <description>The number of elements in the jQuery object.</description>
        <examples>
          <example>Count the divs.  Click to add more.
$( document.body )
  .click(function() {
    $( document.body ).append( $( "&lt;div&gt;" ) );
    var n = $( "div" ).length;
    $( "span" ).text( "There are " + n + " divs." +
      "Click to add more.");
  })
  // Trigger the click to start
  .trigger( "click" );

  body {
    cursor: pointer;
  }
  div {
    width: 50px;
    height: 30px;
    margin: 5px;
    float: left;
    background: green;
  }
  span {
    color: red;
  }
&lt;span&gt;&lt;/span&gt;
  &lt;div&gt;&lt;/div&gt;</example>
        </examples>
      </property>
      <property name='selector' type='String' scope='instance'>
        <description>A selector representing selector passed to jQuery(), if any, when creating the original set.</description>
        <examples>
          <example></example>
        </examples>
      </property>
      <property name='boxModel' type='Boolean' scope='instance'>
        <description>States if the current page, in the user's browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead.</description>
        <examples>
          <example></example>
        </examples>
      </property>
      <property name='browser' type='PlainObject' scope='instance'>
        <description>Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead.</description>
        <examples>
          <example>Show the browser info.
jQuery.each( jQuery.browser, function( i, val ) {
  $( "&lt;div&gt;" + i + " : &lt;span&gt;" + val + "&lt;/span&gt;" )
  .appendTo( document.body );
});
Return true if the current useragent is some version of Microsoft's Internet Explorer. Will not work in jQuery 1.9 or later unless the jQuery Migrate plugin is included.
$.browser.msie;
Alert "this is WebKit!" only for WebKit browsers. Will not work in jQuery 1.9 or later unless the jQuery Migrate plugin is included.
  if ( $.browser.webkit ) {
    alert( "This is WebKit!" );
  }
</example>
        </examples>
      </property>
      <property name='cssHooks' type='Object' scope='instance'>
        <description>Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.</description>
        <examples>
          <example></example>
        </examples>
      </property>
      <property name='support' type='Object' scope='instance'>
        <description>A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery's internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project's feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support.</description>
        <examples>
          <example></example>
        </examples>
      </property>
      <property name='browser' type='jQuery.browser' scope='instance'>
        <description>browser</description>
      </property>
      <property name='fx' type='jQuery.fx' scope='instance'>
        <description>fx</description>
      </property>
      <property name='fn' type='jQuery.fn' scope='instance'>
        <description>fn</description>
      </property>
    </properties>
    <methods>
      <method name='add' scope='instance'>
        <description>Add elements to the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='Selector'>
            <description>A string representing a selector expression to find additional elements to add to the set of matched elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Finds all divs and makes a border.  Then adds all paragraphs to the jQuery object to set their backgrounds yellow.
$( "div" ).css( "border", "2px solid red" )
  .add( "p" )
  .css( "background", "yellow" );

  div {
    width: 60px;
    height: 60px;
    margin: 10px;
    float: left;
  }
  p {
    clear: left;
    font-weight: bold;
    font-size: 16px;
    color: blue;
    margin: 0 10px;
    padding: 2px;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;

&lt;p&gt;Added this... (notice no border)&lt;/p&gt;
Adds more elements, matched by the given expression, to the set of matched elements.
$( "p" ).add( "span" ).css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span&gt;Hello Again&lt;/span&gt;
Adds more elements, created on the fly, to the set of matched elements.
$( "p" ).clone().add( "&lt;span&gt;Again&lt;/span&gt;" ).appendTo( document.body );

&lt;p&gt;Hello&lt;/p&gt;
Adds one or more Elements to the set of matched elements.
$( "p" ).add( document.getElementById( "a" ) ).css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span id="a"&gt;Hello Again&lt;/span&gt;
Demonstrates how to add (or push) elements to an existing collection
var collection = $( "p" );
// Capture the new collection
collection = collection.add( document.getElementById( "a" ) );
collection.css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span id="a"&gt;Hello Again&lt;/span&gt;
</example>
        </examples>
      </method>
      <method name='add' scope='instance'>
        <description>Add elements to the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='elements' usage='required' type='Elements'>
            <description>One or more elements to add to the set of matched elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Finds all divs and makes a border.  Then adds all paragraphs to the jQuery object to set their backgrounds yellow.
$( "div" ).css( "border", "2px solid red" )
  .add( "p" )
  .css( "background", "yellow" );

  div {
    width: 60px;
    height: 60px;
    margin: 10px;
    float: left;
  }
  p {
    clear: left;
    font-weight: bold;
    font-size: 16px;
    color: blue;
    margin: 0 10px;
    padding: 2px;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;

&lt;p&gt;Added this... (notice no border)&lt;/p&gt;
Adds more elements, matched by the given expression, to the set of matched elements.
$( "p" ).add( "span" ).css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span&gt;Hello Again&lt;/span&gt;
Adds more elements, created on the fly, to the set of matched elements.
$( "p" ).clone().add( "&lt;span&gt;Again&lt;/span&gt;" ).appendTo( document.body );

&lt;p&gt;Hello&lt;/p&gt;
Adds one or more Elements to the set of matched elements.
$( "p" ).add( document.getElementById( "a" ) ).css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span id="a"&gt;Hello Again&lt;/span&gt;
Demonstrates how to add (or push) elements to an existing collection
var collection = $( "p" );
// Capture the new collection
collection = collection.add( document.getElementById( "a" ) );
collection.css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span id="a"&gt;Hello Again&lt;/span&gt;
</example>
        </examples>
      </method>
      <method name='add' scope='instance'>
        <description>Add elements to the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='html' usage='required' type='htmlString'>
            <description>An HTML fragment to add to the set of matched elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Finds all divs and makes a border.  Then adds all paragraphs to the jQuery object to set their backgrounds yellow.
$( "div" ).css( "border", "2px solid red" )
  .add( "p" )
  .css( "background", "yellow" );

  div {
    width: 60px;
    height: 60px;
    margin: 10px;
    float: left;
  }
  p {
    clear: left;
    font-weight: bold;
    font-size: 16px;
    color: blue;
    margin: 0 10px;
    padding: 2px;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;

&lt;p&gt;Added this... (notice no border)&lt;/p&gt;
Adds more elements, matched by the given expression, to the set of matched elements.
$( "p" ).add( "span" ).css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span&gt;Hello Again&lt;/span&gt;
Adds more elements, created on the fly, to the set of matched elements.
$( "p" ).clone().add( "&lt;span&gt;Again&lt;/span&gt;" ).appendTo( document.body );

&lt;p&gt;Hello&lt;/p&gt;
Adds one or more Elements to the set of matched elements.
$( "p" ).add( document.getElementById( "a" ) ).css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span id="a"&gt;Hello Again&lt;/span&gt;
Demonstrates how to add (or push) elements to an existing collection
var collection = $( "p" );
// Capture the new collection
collection = collection.add( document.getElementById( "a" ) );
collection.css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span id="a"&gt;Hello Again&lt;/span&gt;
</example>
        </examples>
      </method>
      <method name='add' scope='instance'>
        <description>Add elements to the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='jQuery object' usage='required' type='jQuery'>
            <description>An existing jQuery object to add to the set of matched elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Finds all divs and makes a border.  Then adds all paragraphs to the jQuery object to set their backgrounds yellow.
$( "div" ).css( "border", "2px solid red" )
  .add( "p" )
  .css( "background", "yellow" );

  div {
    width: 60px;
    height: 60px;
    margin: 10px;
    float: left;
  }
  p {
    clear: left;
    font-weight: bold;
    font-size: 16px;
    color: blue;
    margin: 0 10px;
    padding: 2px;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;

&lt;p&gt;Added this... (notice no border)&lt;/p&gt;
Adds more elements, matched by the given expression, to the set of matched elements.
$( "p" ).add( "span" ).css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span&gt;Hello Again&lt;/span&gt;
Adds more elements, created on the fly, to the set of matched elements.
$( "p" ).clone().add( "&lt;span&gt;Again&lt;/span&gt;" ).appendTo( document.body );

&lt;p&gt;Hello&lt;/p&gt;
Adds one or more Elements to the set of matched elements.
$( "p" ).add( document.getElementById( "a" ) ).css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span id="a"&gt;Hello Again&lt;/span&gt;
Demonstrates how to add (or push) elements to an existing collection
var collection = $( "p" );
// Capture the new collection
collection = collection.add( document.getElementById( "a" ) );
collection.css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span id="a"&gt;Hello Again&lt;/span&gt;
</example>
        </examples>
      </method>
      <method name='add' scope='instance'>
        <description>Add elements to the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='Selector'>
            <description>A string representing a selector expression to find additional elements to add to the set of matched elements.</description>
          </parameter>
          <parameter name='context' usage='required' type='Element'>
            <description>The point in the document at which the selector should begin matching; similar to the context argument of the $(selector, context) method.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Finds all divs and makes a border.  Then adds all paragraphs to the jQuery object to set their backgrounds yellow.
$( "div" ).css( "border", "2px solid red" )
  .add( "p" )
  .css( "background", "yellow" );

  div {
    width: 60px;
    height: 60px;
    margin: 10px;
    float: left;
  }
  p {
    clear: left;
    font-weight: bold;
    font-size: 16px;
    color: blue;
    margin: 0 10px;
    padding: 2px;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;

&lt;p&gt;Added this... (notice no border)&lt;/p&gt;
Adds more elements, matched by the given expression, to the set of matched elements.
$( "p" ).add( "span" ).css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span&gt;Hello Again&lt;/span&gt;
Adds more elements, created on the fly, to the set of matched elements.
$( "p" ).clone().add( "&lt;span&gt;Again&lt;/span&gt;" ).appendTo( document.body );

&lt;p&gt;Hello&lt;/p&gt;
Adds one or more Elements to the set of matched elements.
$( "p" ).add( document.getElementById( "a" ) ).css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span id="a"&gt;Hello Again&lt;/span&gt;
Demonstrates how to add (or push) elements to an existing collection
var collection = $( "p" );
// Capture the new collection
collection = collection.add( document.getElementById( "a" ) );
collection.css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;span id="a"&gt;Hello Again&lt;/span&gt;
</example>
        </examples>
      </method>
      <method name='addClass' scope='instance'>
        <description>Adds the specified class(es) to each of the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='className' usage='required' type='String'>
            <description>One or more space-separated classes to be added to the class attribute of each matched element.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Add the class "selected" to the matched elements.
$( "p" ).last().addClass( "selected" );

  p {
    margin: 8px;
    font-size: 16px;
  }
  .selected {
    color: blue;
  }
  .highlight {
    background: yellow;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;Goodbye&lt;/p&gt;
Add the classes "selected" and "highlight" to the matched elements.
$( "p:last" ).addClass( "selected highlight" );

  p {
    margin: 8px;
    font-size: 16px;
  }
  .selected {
    color: red;
  }
  .highlight {
    background: yellow;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;Goodbye&lt;/p&gt;
Pass in a function to .addClass() to add the "green" class to a div that already has a "red" class.
$( "div" ).addClass(function( index, currentClass ) {
  var addedClass;

  if ( currentClass === "red" ) {
    addedClass = "green";
    $( "p" ).text( "There is one green div" );
  }

  return addedClass;
});

  div {
    background: white;
  }
  .red {
    background: red;
  }
  .red.green {
    background: green;
  }

 &lt;div&gt;This div should be white&lt;/div&gt;
 &lt;div class="red"&gt;This div will be green because it now has the "green" and "red" classes.
   It would be red if the addClass function failed.&lt;/div&gt;
 &lt;div&gt;This div should be white&lt;/div&gt;
 &lt;p&gt;There are zero green divs&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='addClass' scope='instance'>
        <description>Adds the specified class(es) to each of the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index, currentClass)' usage='required' type='Function'>
            <description>A function returning one or more space-separated class names to be added to the existing class name(s). Receives the index position of the element in the set and the existing class name(s) as arguments. Within the function, this refers to the current element in the set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Add the class "selected" to the matched elements.
$( "p" ).last().addClass( "selected" );

  p {
    margin: 8px;
    font-size: 16px;
  }
  .selected {
    color: blue;
  }
  .highlight {
    background: yellow;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;Goodbye&lt;/p&gt;
Add the classes "selected" and "highlight" to the matched elements.
$( "p:last" ).addClass( "selected highlight" );

  p {
    margin: 8px;
    font-size: 16px;
  }
  .selected {
    color: red;
  }
  .highlight {
    background: yellow;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;p&gt;Goodbye&lt;/p&gt;
Pass in a function to .addClass() to add the "green" class to a div that already has a "red" class.
$( "div" ).addClass(function( index, currentClass ) {
  var addedClass;

  if ( currentClass === "red" ) {
    addedClass = "green";
    $( "p" ).text( "There is one green div" );
  }

  return addedClass;
});

  div {
    background: white;
  }
  .red {
    background: red;
  }
  .red.green {
    background: green;
  }

 &lt;div&gt;This div should be white&lt;/div&gt;
 &lt;div class="red"&gt;This div will be green because it now has the "green" and "red" classes.
   It would be red if the addClass function failed.&lt;/div&gt;
 &lt;div&gt;This div should be white&lt;/div&gt;
 &lt;p&gt;There are zero green divs&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='after' scope='instance'>
        <description>Insert content, specified by the parameter, after each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='content' usage='required' type=''>
            <description>HTML string, DOM element, array of elements, or jQuery object to insert after each element in the set of matched elements.</description>
          </parameter>
          <parameter name='content' usage='optional' type=''>
            <description>One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert after each element in the set of matched elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Inserts some HTML after all paragraphs.
$( "p" ).after( "&lt;b&gt;Hello&lt;/b&gt;" );

  p {
    background: yellow;
  }

&lt;p&gt;I would like to say: &lt;/p&gt;
Inserts a DOM element after all paragraphs.
$( "p" ).after( document.createTextNode( "Hello" ) );

  p {
    background: yellow;
  }

&lt;p&gt;I would like to say: &lt;/p&gt;
Inserts a jQuery object (similar to an Array of DOM Elements) after all paragraphs.
$( "p" ).after( $( "b" ) );

  p {
    background: yellow;
  }

&lt;b&gt;Hello&lt;/b&gt;
&lt;p&gt;I would like to say: &lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='after' scope='instance'>
        <description>Insert content, specified by the parameter, after each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index)' usage='required' type='Function'>
            <description>A function that returns an HTML string, DOM element(s), or jQuery object to insert after each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Inserts some HTML after all paragraphs.
$( "p" ).after( "&lt;b&gt;Hello&lt;/b&gt;" );

  p {
    background: yellow;
  }

&lt;p&gt;I would like to say: &lt;/p&gt;
Inserts a DOM element after all paragraphs.
$( "p" ).after( document.createTextNode( "Hello" ) );

  p {
    background: yellow;
  }

&lt;p&gt;I would like to say: &lt;/p&gt;
Inserts a jQuery object (similar to an Array of DOM Elements) after all paragraphs.
$( "p" ).after( $( "b" ) );

  p {
    background: yellow;
  }

&lt;b&gt;Hello&lt;/b&gt;
&lt;p&gt;I would like to say: &lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='ajaxComplete' scope='instance'>
        <description>Register a handler to be called when Ajax requests complete. This is an AjaxEvent.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(event, XMLHttpRequest, ajaxOptions)' usage='required' type='Function'>
            <description>The function to be invoked.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show a message when an Ajax request completes.
$( document ).ajaxComplete(function( event,request, settings ) {
  $( "#msg" ).append( "&lt;li&gt;Request Complete.&lt;/li&gt;" );
});
</example>
        </examples>
      </method>
      <method name='ajaxError' scope='instance'>
        <description>Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(event, jqXHR, ajaxSettings, thrownError)' usage='required' type='Function'>
            <description>The function to be invoked.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show a message when an Ajax request fails.
$( document ).ajaxError(function( event, request, settings ) {
  $( "#msg" ).append( "&lt;li&gt;Error requesting page " + settings.url + "&lt;/li&gt;" );
});
</example>
        </examples>
      </method>
      <method name='ajaxSend' scope='instance'>
        <description>Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(event, jqXHR, ajaxOptions)' usage='required' type='Function'>
            <description>The function to be invoked.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show a message before an Ajax request is sent.
$( document ).ajaxSend(function( event, request, settings ) {
  $( "#msg" ).append( "&lt;li&gt;Starting request at " + settings.url + "&lt;/li&gt;" );
});
</example>
        </examples>
      </method>
      <method name='ajaxStart' scope='instance'>
        <description>Register a handler to be called when the first Ajax request begins. This is an Ajax Event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler()' usage='required' type='Function'>
            <description>The function to be invoked.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show a loading message whenever an Ajax request starts (and none is already active).
$( document ).ajaxStart(function() {
  $( "#loading" ).show();
});
</example>
        </examples>
      </method>
      <method name='ajaxStop' scope='instance'>
        <description>Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler()' usage='required' type='Function'>
            <description>The function to be invoked.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Hide a loading message after all the Ajax requests have stopped.
$( document ).ajaxStop(function() {
  $( "#loading" ).hide();
});
</example>
        </examples>
      </method>
      <method name='ajaxSuccess' scope='instance'>
        <description>Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(event, XMLHttpRequest, ajaxOptions)' usage='required' type='Function'>
            <description>The function to be invoked.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show a message when an Ajax request completes successfully.
$( document ).ajaxSuccess(function( event, request, settings ) {
  $( "#msg" ).append( "&lt;li&gt;Successful Request!&lt;/li&gt;" );
});
</example>
        </examples>
      </method>
      <method name='andSelf' scope='instance'>
        <description>Add the previous set of elements on the stack to the current set.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>The .andSelf() method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from .find("p"). In the second example, .andSelf() adds the previous set of elements on the stack — in this case $( "div.after-andself" ) — to the current set, selecting both the div and its enclosed paragraphs.
$( "div.left, div.right" ).find( "div, div &gt; p" ).addClass( "border" );

// First Example
$( "div.before-andself" ).find( "p" ).addClass( "background" );

// Second Example
$( "div.after-andself" ).find( "p" ).andSelf().addClass( "background" );

  p, div {
    margin: 5px;
    padding: 5px;
  }
  .border {
    border: 2px solid red;
  }
  .background {
    background: yellow;
  }
  .left, .right {
    width: 45%;
    float: left;
  }
  .right {
    margin-left: 3%;
  }

&lt;div class="left"&gt;
  &lt;p&gt;&lt;strong&gt;Before &lt;code&gt;andSelf()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;div class="before-andself"&gt;
    &lt;p&gt;First Paragraph&lt;/p&gt;
    &lt;p&gt;Second Paragraph&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="right"&gt;
  &lt;p&gt;&lt;strong&gt;After &lt;code&gt;andSelf()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;div class="after-andself"&gt;
    &lt;p&gt;First Paragraph&lt;/p&gt;
    &lt;p&gt;Second Paragraph&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='animate' scope='instance'>
        <description>Perform a custom animation of a set of CSS properties.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='properties' usage='required' type='PlainObject'>
            <description>An object of CSS properties and values that the animation will move toward.</description>
          </parameter>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='easing' usage='optional' type='String'>
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Click the button to animate the div with a number of different properties.
// Using multiple unit types within one animation.

$( "#go" ).click(function() {
  $( "#block" ).animate({
    width: "70%",
    opacity: 0.4,
    marginLeft: "0.6in",
    fontSize: "3em",
    borderWidth: "10px"
  }, 1500 );
});

&lt;button id="go"&gt;&amp;raquo; Run&lt;/button&gt;
&lt;div id="block"&gt;Hello!&lt;/div&gt;

  div {
    background-color: #bca;
    width: 100px;
    border: 1px solid green;
  }
Animates a div's left property with a relative value. Click several times on the buttons to see the relative animations queued up.
$( "#right" ).click(function() {
  $( ".block" ).animate({ "left": "+=50px" }, "slow" );
});

$( "#left" ).click(function(){
  $( ".block" ).animate({ "left": "-=50px" }, "slow" );
});

&lt;button id="left"&gt;&amp;laquo;&lt;/button&gt;
&lt;button id="right"&gt;&amp;raquo;&lt;/button&gt;
&lt;div class="block"&gt;&lt;/div&gt;

  div {
    position: absolute;
    background-color: #abc;
    left: 50px;
    width: 90px;
    height: 90px;
    margin: 5px;
  }
The first button shows how an unqueued animation works.  It expands the div out to 90% width while the font-size is increasing. Once the font-size change is complete, the border animation will begin.

The second button starts a traditional chained animation, where each animation will start once the previous animation on the element has completed.
$( "#go1" ).click(function() {
  $( "#block1" )
    .animate({
      width: "90%"
    }, {
      queue: false,
      duration: 3000
    })
    .animate({ fontSize: "24px" }, 1500 )
    .animate({ borderRightWidth: "15px" }, 1500 );
});

$( "#go2" ).click(function() {
  $( "#block2" )
    .animate({ width: "90%" }, 1000 )
    .animate({ fontSize: "24px" }, 1000 )
    .animate({ borderLeftWidth: "15px" }, 1000 );
});

$( "#go3" ).click(function() {
  $( "#go1" ).add( "#go2" ).click();
});

$( "#go4" ).click(function() {
  $( "div" ).css({
    width: "",
    fontSize: "",
    borderWidth: ""
  });
});

&lt;button id="go1"&gt;&amp;raquo; Animate Block1&lt;/button&gt;
&lt;button id="go2"&gt;&amp;raquo; Animate Block2&lt;/button&gt;
&lt;button id="go3"&gt;&amp;raquo; Animate Both&lt;/button&gt;
&lt;button id="go4"&gt;&amp;raquo; Reset&lt;/button&gt;
&lt;div id="block1"&gt;Block1&lt;/div&gt;
&lt;div id="block2"&gt;Block2&lt;/div&gt;

  div {
    background-color: #bca;
    width: 200px;
    height: 1.1em;
    text-align: center;
    border: 2px solid green;
    margin: 3px;
    font-size: 14px;
  }
  button {
    font-size: 14px;
  }
Animates the first div's left property and synchronizes the remaining divs, using the step function to set their left properties at each stage of the animation. 
$( "#go" ).click(function() {
  $( ".block:first" ).animate({
    left: 100
  }, {
    duration: 1000,
    step: function( now, fx ){
      $( ".block:gt(0)" ).css( "left", now );
    }
  });
});

  div {
    position: relative;
    background-color: #abc;
    width: 40px;
    height: 40px;
    float: left;
    margin: 5px;
  }

&lt;p&gt;&lt;button id="go"&gt;Run »&lt;/button&gt;&lt;/p&gt;
&lt;div class="block"&gt;&lt;/div&gt;
&lt;div class="block"&gt;&lt;/div&gt;
&lt;div class="block"&gt;&lt;/div&gt;
&lt;div class="block"&gt;&lt;/div&gt;
&lt;div class="block"&gt;&lt;/div&gt;
&lt;div class="block"&gt;&lt;/div&gt;
Animate all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.
$( "p" ).animate({
  height: "toggle",
  opacity: "toggle"
}, "slow" );
Animate all paragraphs to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.
$( "p" ).animate({
  left: 50,
  opacity: 1
}, 500 );
Animate the left and opacity style properties of all paragraphs; run the animation outside the queue, so that it will automatically start without waiting for its turn.
$( "p" ).animate({
  left: "50px",
  opacity: 1
}, {
  duration: 500,
  queue: false
});
An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.  Note, this code will do nothing unless the paragraph element is hidden.
$( "p" ).animate({
  opacity: "show"
}, "slow", "easein" );
Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.
$( "p" ).animate({
  height: "toggle",
  opacity: "toggle"
}, {
  duration: "slow"
});
Use an easing function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.
$( "p" ).animate({
  opacity: "show"
}, {
  duration: "slow",
  easing: "easein"
});
Animate all paragraphs and execute a callback function when the animation is complete.  The first argument is an object of CSS properties, the second specifies that the animation should take 1000 milliseconds to complete, the third states the easing type, and the fourth argument is an anonymous callback function. 
$( "p" ).animate({
  height: 200,
  width: 400,
  opacity: 0.5
}, 1000, "linear", function() {
  alert( "all done" );
});
</example>
        </examples>
      </method>
      <method name='animate' scope='instance'>
        <description>Perform a custom animation of a set of CSS properties.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='properties' usage='required' type='PlainObject'>
            <description>An object of CSS properties and values that the animation will move toward.</description>
          </parameter>
          <parameter name='options' usage='required' type='PlainObject'>
            <description>A map of additional options to pass to the method.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Click the button to animate the div with a number of different properties.
// Using multiple unit types within one animation.

$( "#go" ).click(function() {
  $( "#block" ).animate({
    width: "70%",
    opacity: 0.4,
    marginLeft: "0.6in",
    fontSize: "3em",
    borderWidth: "10px"
  }, 1500 );
});

&lt;button id="go"&gt;&amp;raquo; Run&lt;/button&gt;
&lt;div id="block"&gt;Hello!&lt;/div&gt;

  div {
    background-color: #bca;
    width: 100px;
    border: 1px solid green;
  }
Animates a div's left property with a relative value. Click several times on the buttons to see the relative animations queued up.
$( "#right" ).click(function() {
  $( ".block" ).animate({ "left": "+=50px" }, "slow" );
});

$( "#left" ).click(function(){
  $( ".block" ).animate({ "left": "-=50px" }, "slow" );
});

&lt;button id="left"&gt;&amp;laquo;&lt;/button&gt;
&lt;button id="right"&gt;&amp;raquo;&lt;/button&gt;
&lt;div class="block"&gt;&lt;/div&gt;

  div {
    position: absolute;
    background-color: #abc;
    left: 50px;
    width: 90px;
    height: 90px;
    margin: 5px;
  }
The first button shows how an unqueued animation works.  It expands the div out to 90% width while the font-size is increasing. Once the font-size change is complete, the border animation will begin.

The second button starts a traditional chained animation, where each animation will start once the previous animation on the element has completed.
$( "#go1" ).click(function() {
  $( "#block1" )
    .animate({
      width: "90%"
    }, {
      queue: false,
      duration: 3000
    })
    .animate({ fontSize: "24px" }, 1500 )
    .animate({ borderRightWidth: "15px" }, 1500 );
});

$( "#go2" ).click(function() {
  $( "#block2" )
    .animate({ width: "90%" }, 1000 )
    .animate({ fontSize: "24px" }, 1000 )
    .animate({ borderLeftWidth: "15px" }, 1000 );
});

$( "#go3" ).click(function() {
  $( "#go1" ).add( "#go2" ).click();
});

$( "#go4" ).click(function() {
  $( "div" ).css({
    width: "",
    fontSize: "",
    borderWidth: ""
  });
});

&lt;button id="go1"&gt;&amp;raquo; Animate Block1&lt;/button&gt;
&lt;button id="go2"&gt;&amp;raquo; Animate Block2&lt;/button&gt;
&lt;button id="go3"&gt;&amp;raquo; Animate Both&lt;/button&gt;
&lt;button id="go4"&gt;&amp;raquo; Reset&lt;/button&gt;
&lt;div id="block1"&gt;Block1&lt;/div&gt;
&lt;div id="block2"&gt;Block2&lt;/div&gt;

  div {
    background-color: #bca;
    width: 200px;
    height: 1.1em;
    text-align: center;
    border: 2px solid green;
    margin: 3px;
    font-size: 14px;
  }
  button {
    font-size: 14px;
  }
Animates the first div's left property and synchronizes the remaining divs, using the step function to set their left properties at each stage of the animation. 
$( "#go" ).click(function() {
  $( ".block:first" ).animate({
    left: 100
  }, {
    duration: 1000,
    step: function( now, fx ){
      $( ".block:gt(0)" ).css( "left", now );
    }
  });
});

  div {
    position: relative;
    background-color: #abc;
    width: 40px;
    height: 40px;
    float: left;
    margin: 5px;
  }

&lt;p&gt;&lt;button id="go"&gt;Run »&lt;/button&gt;&lt;/p&gt;
&lt;div class="block"&gt;&lt;/div&gt;
&lt;div class="block"&gt;&lt;/div&gt;
&lt;div class="block"&gt;&lt;/div&gt;
&lt;div class="block"&gt;&lt;/div&gt;
&lt;div class="block"&gt;&lt;/div&gt;
&lt;div class="block"&gt;&lt;/div&gt;
Animate all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.
$( "p" ).animate({
  height: "toggle",
  opacity: "toggle"
}, "slow" );
Animate all paragraphs to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.
$( "p" ).animate({
  left: 50,
  opacity: 1
}, 500 );
Animate the left and opacity style properties of all paragraphs; run the animation outside the queue, so that it will automatically start without waiting for its turn.
$( "p" ).animate({
  left: "50px",
  opacity: 1
}, {
  duration: 500,
  queue: false
});
An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.  Note, this code will do nothing unless the paragraph element is hidden.
$( "p" ).animate({
  opacity: "show"
}, "slow", "easein" );
Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.
$( "p" ).animate({
  height: "toggle",
  opacity: "toggle"
}, {
  duration: "slow"
});
Use an easing function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.
$( "p" ).animate({
  opacity: "show"
}, {
  duration: "slow",
  easing: "easein"
});
Animate all paragraphs and execute a callback function when the animation is complete.  The first argument is an object of CSS properties, the second specifies that the animation should take 1000 milliseconds to complete, the third states the easing type, and the fourth argument is an anonymous callback function. 
$( "p" ).animate({
  height: 200,
  width: 400,
  opacity: 0.5
}, 1000, "linear", function() {
  alert( "all done" );
});
</example>
        </examples>
      </method>
      <method name='append' scope='instance'>
        <description>Insert content, specified by the parameter, to the end of each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='content' usage='required' type=''>
            <description>DOM element, array of elements, HTML string, or jQuery object to insert at the end of each element in the set of matched elements.</description>
          </parameter>
          <parameter name='content' usage='optional' type=''>
            <description>One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the end of each element in the set of matched elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Appends some HTML to all paragraphs.
$( "p" ).append( "&lt;strong&gt;Hello&lt;/strong&gt;" );

  p {
    background: yellow;
  }

&lt;p&gt;I would like to say: &lt;/p&gt;
Appends an Element to all paragraphs.
$( "p" ).append( document.createTextNode( "Hello" ) );

  p {
    background: yellow;
  }

&lt;p&gt;I would like to say: &lt;/p&gt;
Appends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.
$( "p" ).append( $( "strong" ) );

  p {
    background: yellow;
  }

&lt;strong&gt;Hello world!!!&lt;/strong&gt;
&lt;p&gt;I would like to say: &lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='append' scope='instance'>
        <description>Insert content, specified by the parameter, to the end of each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index, html)' usage='required' type='Function'>
            <description>A function that returns an HTML string, DOM element(s), or jQuery object to insert at the end of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Appends some HTML to all paragraphs.
$( "p" ).append( "&lt;strong&gt;Hello&lt;/strong&gt;" );

  p {
    background: yellow;
  }

&lt;p&gt;I would like to say: &lt;/p&gt;
Appends an Element to all paragraphs.
$( "p" ).append( document.createTextNode( "Hello" ) );

  p {
    background: yellow;
  }

&lt;p&gt;I would like to say: &lt;/p&gt;
Appends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.
$( "p" ).append( $( "strong" ) );

  p {
    background: yellow;
  }

&lt;strong&gt;Hello world!!!&lt;/strong&gt;
&lt;p&gt;I would like to say: &lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='appendTo' scope='instance'>
        <description>Insert every element in the set of matched elements to the end of the target.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='target' usage='required' type=''>
            <description>A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Append all spans to the element with the ID "foo" (Check append() documentation for more examples)
$( "span" ).appendTo( "#foo" );

  #foo {
    background: yellow;
  }

&lt;span&gt;I have nothing more to say... &lt;/span&gt;

&lt;div id="foo"&gt;FOO! &lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='attr' scope='instance'>
        <description>Get the value of an attribute for the first element in the set of matched elements.</description>
        <return-types>
          <return-type type='String' />
        </return-types>
        <parameters>
          <parameter name='attributeName' usage='required' type='String'>
            <description>The name of the attribute to get.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Display the checked attribute and property of a checkbox as it changes.
$( "input" )
  .change(function() {
    var $input = $( this );
    $( "p" ).html( ".attr( 'checked' ): &lt;b&gt;" + $input.attr( "checked" ) + "&lt;/b&gt;&lt;br&gt;" +
      ".prop( 'checked' ): &lt;b&gt;" + $input.prop( "checked" ) + "&lt;/b&gt;&lt;br&gt;" +
      ".is( ':checked' ): &lt;b&gt;" + $input.is( ":checked" ) + "&lt;/b&gt;" );
  })
  .change();

  p {
    margin: 20px 0 0;
  }
  b {
    color: blue;
  }

&lt;input id="check1" type="checkbox" checked="checked"&gt;
&lt;label for="check1"&gt;Check me&lt;/label&gt;
&lt;p&gt;&lt;/p&gt;
Find the title attribute of the first &lt;em&gt; in the page.
var title = $( "em" ).attr( "title" );
$( "div" ).text( title );

  em {
    color: blue;
    font-weight: bold;
  }
  div {
    color: red;
  }

&lt;p&gt;Once there was a &lt;em title="huge, gigantic"&gt;large&lt;/em&gt; dinosaur...&lt;/p&gt;

The title of the emphasis is:&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='attr' scope='instance'>
        <description>Set one or more attributes for the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='attributeName' usage='required' type='String'>
            <description>The name of the attribute to set.</description>
          </parameter>
          <parameter name='value' usage='required' type=''>
            <description>A value to set for the attribute.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Set some attributes for all &lt;img&gt;s in the page.
$( "img" ).attr({
  src: "/resources/hat.gif",
  title: "jQuery",
  alt: "jQuery Logo"
});
$( "div" ).text( $( "img" ).attr( "alt" ) );

  img {
    padding: 10px;
  }
  div {
    color: red;
    font-size: 24px;
  }

&lt;img&gt;
&lt;img&gt;
&lt;img&gt;

&lt;div&gt;&lt;b&gt;Attribute of Ajax&lt;/b&gt;&lt;/div&gt;
Set the id for divs based on the position in the page.
$( "div" )
  .attr( "id", function( arr ) {
    return "div-id" + arr;
  })
  .each(function() {
    $( "span", this ).html( "(id = '&lt;b&gt;" + this.id + "&lt;/b&gt;')" );
});

  div {
    color: blue;
  }
  span {
    color: red;
  }
  b {
    font-weight: bolder;
  }

&lt;div&gt;Zero-th &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;First &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;Second &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
Set the src attribute from title attribute on the image.
$( "img" ).attr( "src", function() {
  return "/resources/" + this.title;
});

&lt;img title="hat.gif"&gt;
</example>
        </examples>
      </method>
      <method name='attr' scope='instance'>
        <description>Set one or more attributes for the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='attributes' usage='required' type='PlainObject'>
            <description>An object of attribute-value pairs to set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Set some attributes for all &lt;img&gt;s in the page.
$( "img" ).attr({
  src: "/resources/hat.gif",
  title: "jQuery",
  alt: "jQuery Logo"
});
$( "div" ).text( $( "img" ).attr( "alt" ) );

  img {
    padding: 10px;
  }
  div {
    color: red;
    font-size: 24px;
  }

&lt;img&gt;
&lt;img&gt;
&lt;img&gt;

&lt;div&gt;&lt;b&gt;Attribute of Ajax&lt;/b&gt;&lt;/div&gt;
Set the id for divs based on the position in the page.
$( "div" )
  .attr( "id", function( arr ) {
    return "div-id" + arr;
  })
  .each(function() {
    $( "span", this ).html( "(id = '&lt;b&gt;" + this.id + "&lt;/b&gt;')" );
});

  div {
    color: blue;
  }
  span {
    color: red;
  }
  b {
    font-weight: bolder;
  }

&lt;div&gt;Zero-th &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;First &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;Second &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
Set the src attribute from title attribute on the image.
$( "img" ).attr( "src", function() {
  return "/resources/" + this.title;
});

&lt;img title="hat.gif"&gt;
</example>
        </examples>
      </method>
      <method name='attr' scope='instance'>
        <description>Set one or more attributes for the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='attributeName' usage='required' type='String'>
            <description>The name of the attribute to set.</description>
          </parameter>
          <parameter name='function(index, attr)' usage='required' type='Function'>
            <description>A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old attribute value as arguments.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Set some attributes for all &lt;img&gt;s in the page.
$( "img" ).attr({
  src: "/resources/hat.gif",
  title: "jQuery",
  alt: "jQuery Logo"
});
$( "div" ).text( $( "img" ).attr( "alt" ) );

  img {
    padding: 10px;
  }
  div {
    color: red;
    font-size: 24px;
  }

&lt;img&gt;
&lt;img&gt;
&lt;img&gt;

&lt;div&gt;&lt;b&gt;Attribute of Ajax&lt;/b&gt;&lt;/div&gt;
Set the id for divs based on the position in the page.
$( "div" )
  .attr( "id", function( arr ) {
    return "div-id" + arr;
  })
  .each(function() {
    $( "span", this ).html( "(id = '&lt;b&gt;" + this.id + "&lt;/b&gt;')" );
});

  div {
    color: blue;
  }
  span {
    color: red;
  }
  b {
    font-weight: bolder;
  }

&lt;div&gt;Zero-th &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;First &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;Second &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
Set the src attribute from title attribute on the image.
$( "img" ).attr( "src", function() {
  return "/resources/" + this.title;
});

&lt;img title="hat.gif"&gt;
</example>
        </examples>
      </method>
      <method name='before' scope='instance'>
        <description>Insert content, specified by the parameter, before each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='content' usage='required' type=''>
            <description>HTML string, DOM element, array of elements, or jQuery object to insert before each element in the set of matched elements.</description>
          </parameter>
          <parameter name='content' usage='optional' type=''>
            <description>One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert before each element in the set of matched elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Inserts some HTML before all paragraphs.
$( "p" ).before( "&lt;b&gt;Hello&lt;/b&gt;" );

  p {
    background: yellow;
  }

&lt;p&gt; is what I said...&lt;/p&gt;
Inserts a DOM element before all paragraphs.
$( "p" ).before( document.createTextNode( "Hello" ) );

  p {
    background: yellow;
  }

&lt;p&gt; is what I said...&lt;/p&gt;
Inserts a jQuery object (similar to an Array of DOM Elements) before all paragraphs.
$( "p" ).before( $( "b" ) );

  p {
    background: yellow;
  }

&lt;p&gt; is what I said...&lt;/p&gt;&lt;b&gt;Hello&lt;/b&gt;
</example>
        </examples>
      </method>
      <method name='before' scope='instance'>
        <description>Insert content, specified by the parameter, before each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function' usage='required' type='Function'>
            <description>A function that returns an HTML string, DOM element(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example>Inserts some HTML before all paragraphs.
$( "p" ).before( "&lt;b&gt;Hello&lt;/b&gt;" );

  p {
    background: yellow;
  }

&lt;p&gt; is what I said...&lt;/p&gt;
Inserts a DOM element before all paragraphs.
$( "p" ).before( document.createTextNode( "Hello" ) );

  p {
    background: yellow;
  }

&lt;p&gt; is what I said...&lt;/p&gt;
Inserts a jQuery object (similar to an Array of DOM Elements) before all paragraphs.
$( "p" ).before( $( "b" ) );

  p {
    background: yellow;
  }

&lt;p&gt; is what I said...&lt;/p&gt;&lt;b&gt;Hello&lt;/b&gt;
</example>
        </examples>
      </method>
      <method name='bind' scope='instance'>
        <description>Attach a handler to an event for the elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventType' usage='required' type='String'>
            <description>A string containing one or more DOM event types, such as "click" or "submit," or custom event names.</description>
          </parameter>
          <parameter name='eventData' usage='optional' type='Object'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Handle click and double-click for the paragraph.  Note: the coordinates are window relative, so in this case relative to the demo iframe.
$( "p" ).bind( "click", function( event ) {
  var str = "( " + event.pageX + ", " + event.pageY + " )";
  $( "span" ).text( "Click happened! " + str );
});
$( "p" ).bind( "dblclick", function() {
  $( "span" ).text( "Double-click happened in " + this.nodeName );
});
$( "p" ).bind( "mouseenter mouseleave", function( event ) {
  $( this ).toggleClass( "over" );
});

  p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
  }
  p.over {
     background: #ccc;
  }
  span {
    color: red;
  }

&lt;p&gt;Click or double click here.&lt;/p&gt;
&lt;span&gt;&lt;/span&gt;
To display each paragraph's text in an alert box whenever it is clicked:
$( "p" ).bind( "click", function() {
  alert( $( this ).text() );
});
You can pass some extra data before the event handler:
function handler( event ) {
  alert( event.data.foo );
}
$( "p" ).bind( "click", {
  foo: "bar"
}, handler );
Cancel a default action and prevent it from bubbling up by returning false:
$( "form" ).bind( "submit", function() {
  return false;
})
Cancel only the default action by using the .preventDefault() method.
$( "form" ).bind( "submit", function( event ) {
  event.preventDefault();
});
Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.
$( "form" ).bind( "submit", function( event ) {
  event.stopPropagation();
});
Bind custom events.
$( "p" ).bind( "myCustomEvent", function( e, myName, myValue ) {
  $( this ).text( myName + ", hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
  });
$( "button" ).click(function() {
  $( "p" ).trigger( "myCustomEvent", [ "John" ] );
});

  p {
    color: red;
  }
  span {
    color: blue;
  }

&lt;p&gt;Has an attached custom event.&lt;/p&gt;
&lt;button&gt;Trigger custom event&lt;/button&gt;
&lt;span style="display: none;"&gt;&lt;/span&gt;
Bind multiple events simultaneously.
$( "div.test" ).bind({
  click: function() {
    $( this ).addClass( "active" );
  },
  mouseenter: function() {
    $( this ).addClass( "inside" );
  },
  mouseleave: function() {
    $( this ).removeClass( "inside" );
  }
});
</example>
        </examples>
      </method>
      <method name='bind' scope='instance'>
        <description>Attach a handler to an event for the elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventType' usage='required' type='String'>
            <description>A string containing one or more DOM event types, such as "click" or "submit," or custom event names.</description>
          </parameter>
          <parameter name='eventData' usage='optional' type='Object'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='preventBubble' usage='optional' type='Boolean'>
            <description>Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Handle click and double-click for the paragraph.  Note: the coordinates are window relative, so in this case relative to the demo iframe.
$( "p" ).bind( "click", function( event ) {
  var str = "( " + event.pageX + ", " + event.pageY + " )";
  $( "span" ).text( "Click happened! " + str );
});
$( "p" ).bind( "dblclick", function() {
  $( "span" ).text( "Double-click happened in " + this.nodeName );
});
$( "p" ).bind( "mouseenter mouseleave", function( event ) {
  $( this ).toggleClass( "over" );
});

  p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
  }
  p.over {
     background: #ccc;
  }
  span {
    color: red;
  }

&lt;p&gt;Click or double click here.&lt;/p&gt;
&lt;span&gt;&lt;/span&gt;
To display each paragraph's text in an alert box whenever it is clicked:
$( "p" ).bind( "click", function() {
  alert( $( this ).text() );
});
You can pass some extra data before the event handler:
function handler( event ) {
  alert( event.data.foo );
}
$( "p" ).bind( "click", {
  foo: "bar"
}, handler );
Cancel a default action and prevent it from bubbling up by returning false:
$( "form" ).bind( "submit", function() {
  return false;
})
Cancel only the default action by using the .preventDefault() method.
$( "form" ).bind( "submit", function( event ) {
  event.preventDefault();
});
Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.
$( "form" ).bind( "submit", function( event ) {
  event.stopPropagation();
});
Bind custom events.
$( "p" ).bind( "myCustomEvent", function( e, myName, myValue ) {
  $( this ).text( myName + ", hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
  });
$( "button" ).click(function() {
  $( "p" ).trigger( "myCustomEvent", [ "John" ] );
});

  p {
    color: red;
  }
  span {
    color: blue;
  }

&lt;p&gt;Has an attached custom event.&lt;/p&gt;
&lt;button&gt;Trigger custom event&lt;/button&gt;
&lt;span style="display: none;"&gt;&lt;/span&gt;
Bind multiple events simultaneously.
$( "div.test" ).bind({
  click: function() {
    $( this ).addClass( "active" );
  },
  mouseenter: function() {
    $( this ).addClass( "inside" );
  },
  mouseleave: function() {
    $( this ).removeClass( "inside" );
  }
});
</example>
        </examples>
      </method>
      <method name='bind' scope='instance'>
        <description>Attach a handler to an event for the elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='events' usage='required' type='Object'>
            <description>An object containing one or more DOM event types and functions to execute for them.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Handle click and double-click for the paragraph.  Note: the coordinates are window relative, so in this case relative to the demo iframe.
$( "p" ).bind( "click", function( event ) {
  var str = "( " + event.pageX + ", " + event.pageY + " )";
  $( "span" ).text( "Click happened! " + str );
});
$( "p" ).bind( "dblclick", function() {
  $( "span" ).text( "Double-click happened in " + this.nodeName );
});
$( "p" ).bind( "mouseenter mouseleave", function( event ) {
  $( this ).toggleClass( "over" );
});

  p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
  }
  p.over {
     background: #ccc;
  }
  span {
    color: red;
  }

&lt;p&gt;Click or double click here.&lt;/p&gt;
&lt;span&gt;&lt;/span&gt;
To display each paragraph's text in an alert box whenever it is clicked:
$( "p" ).bind( "click", function() {
  alert( $( this ).text() );
});
You can pass some extra data before the event handler:
function handler( event ) {
  alert( event.data.foo );
}
$( "p" ).bind( "click", {
  foo: "bar"
}, handler );
Cancel a default action and prevent it from bubbling up by returning false:
$( "form" ).bind( "submit", function() {
  return false;
})
Cancel only the default action by using the .preventDefault() method.
$( "form" ).bind( "submit", function( event ) {
  event.preventDefault();
});
Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.
$( "form" ).bind( "submit", function( event ) {
  event.stopPropagation();
});
Bind custom events.
$( "p" ).bind( "myCustomEvent", function( e, myName, myValue ) {
  $( this ).text( myName + ", hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
  });
$( "button" ).click(function() {
  $( "p" ).trigger( "myCustomEvent", [ "John" ] );
});

  p {
    color: red;
  }
  span {
    color: blue;
  }

&lt;p&gt;Has an attached custom event.&lt;/p&gt;
&lt;button&gt;Trigger custom event&lt;/button&gt;
&lt;span style="display: none;"&gt;&lt;/span&gt;
Bind multiple events simultaneously.
$( "div.test" ).bind({
  click: function() {
    $( this ).addClass( "active" );
  },
  mouseenter: function() {
    $( this ).addClass( "inside" );
  },
  mouseleave: function() {
    $( this ).removeClass( "inside" );
  }
});
</example>
        </examples>
      </method>
      <method name='blur' scope='instance'>
        <description>Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To trigger the blur event on all paragraphs:
$( "p" ).blur();
</example>
        </examples>
      </method>
      <method name='blur' scope='instance'>
        <description>Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='Object'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To trigger the blur event on all paragraphs:
$( "p" ).blur();
</example>
        </examples>
      </method>
      <method name='blur' scope='instance'>
        <description>Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>To trigger the blur event on all paragraphs:
$( "p" ).blur();
</example>
        </examples>
      </method>
      <method name='change' scope='instance'>
        <description>Bind an event handler to the "change" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.
$( "select" )
  .change(function () {
    var str = "";
    $( "select option:selected" ).each(function() {
      str += $( this ).text() + " ";
    });
    $( "div" ).text( str );
  })
  .change();

  div {
    color: red;
  }

&lt;select name="sweets" multiple="multiple"&gt;
  &lt;option&gt;Chocolate&lt;/option&gt;
  &lt;option selected="selected"&gt;Candy&lt;/option&gt;
  &lt;option&gt;Taffy&lt;/option&gt;
  &lt;option selected="selected"&gt;Caramel&lt;/option&gt;
  &lt;option&gt;Fudge&lt;/option&gt;
  &lt;option&gt;Cookie&lt;/option&gt;
&lt;/select&gt;
&lt;div&gt;&lt;/div&gt;
To add a validity test to all text input elements:
$( "input[type='text']" ).change(function() {
  // Check input( $( this ).val() ) for validity here
});
</example>
        </examples>
      </method>
      <method name='change' scope='instance'>
        <description>Bind an event handler to the "change" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='Object'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.
$( "select" )
  .change(function () {
    var str = "";
    $( "select option:selected" ).each(function() {
      str += $( this ).text() + " ";
    });
    $( "div" ).text( str );
  })
  .change();

  div {
    color: red;
  }

&lt;select name="sweets" multiple="multiple"&gt;
  &lt;option&gt;Chocolate&lt;/option&gt;
  &lt;option selected="selected"&gt;Candy&lt;/option&gt;
  &lt;option&gt;Taffy&lt;/option&gt;
  &lt;option selected="selected"&gt;Caramel&lt;/option&gt;
  &lt;option&gt;Fudge&lt;/option&gt;
  &lt;option&gt;Cookie&lt;/option&gt;
&lt;/select&gt;
&lt;div&gt;&lt;/div&gt;
To add a validity test to all text input elements:
$( "input[type='text']" ).change(function() {
  // Check input( $( this ).val() ) for validity here
});
</example>
        </examples>
      </method>
      <method name='change' scope='instance'>
        <description>Bind an event handler to the "change" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.
$( "select" )
  .change(function () {
    var str = "";
    $( "select option:selected" ).each(function() {
      str += $( this ).text() + " ";
    });
    $( "div" ).text( str );
  })
  .change();

  div {
    color: red;
  }

&lt;select name="sweets" multiple="multiple"&gt;
  &lt;option&gt;Chocolate&lt;/option&gt;
  &lt;option selected="selected"&gt;Candy&lt;/option&gt;
  &lt;option&gt;Taffy&lt;/option&gt;
  &lt;option selected="selected"&gt;Caramel&lt;/option&gt;
  &lt;option&gt;Fudge&lt;/option&gt;
  &lt;option&gt;Cookie&lt;/option&gt;
&lt;/select&gt;
&lt;div&gt;&lt;/div&gt;
To add a validity test to all text input elements:
$( "input[type='text']" ).change(function() {
  // Check input( $( this ).val() ) for validity here
});
</example>
        </examples>
      </method>
      <method name='children' scope='instance'>
        <description>Get the children of each element in the set of matched elements, optionally filtered by a selector.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='optional' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find all children of the clicked element.
$( "#container" ).click(function ( event ) {
  $( "*" ).removeClass( "hilite" );
  var kids = $( event.target ).children();
  var len = kids.addClass( "hilite" ).length;

  $( "#results span:first" ).text( len );
  $( "#results span:last" ).text( event.target.tagName );

  event.preventDefault();
});

  body {
    font-size: 16px;
    font-weight: bolder;
  }
  div {
    width: 130px;
    height: 82px;
    margin: 10px;
    float: left;
    border: 1px solid blue;
    padding: 4px;
  }
  #container {
    width: auto;
    height: 105px;
    margin: 0;
    float: none;
    border: none;
  }
  .hilite {
    border-color: red;
  }
  #results {
    display: block;
    color: red;
  }
  p, span, em, a, b, button {
    border: 1px solid transparent;
  }
  p {
    margin: 10px;
  }
  span {
    color: blue;
  }
  input {
    width: 100px;
  }

&lt;div id="container"&gt;
  &lt;div&gt;
    &lt;p&gt;This &lt;span&gt;is the &lt;em&gt;way&lt;/em&gt; we&lt;/span&gt;
      write &lt;em&gt;the&lt;/em&gt; demo,&lt;/p&gt;
  &lt;/div&gt;

  &lt;div&gt;
    &lt;a href="#"&gt;&lt;b&gt;w&lt;/b&gt;rit&lt;b&gt;e&lt;/b&gt;&lt;/a&gt; the &lt;span&gt;demo,&lt;/span&gt; &lt;button&gt;write
    the&lt;/button&gt; demo,
  &lt;/div&gt;

  &lt;div&gt;
    This &lt;span&gt;the way we &lt;em&gt;write&lt;/em&gt; the &lt;em&gt;demo&lt;/em&gt; so&lt;/span&gt;
    &lt;input type="text" value="early"&gt; in
  &lt;/div&gt;

  &lt;p&gt;
    &lt;span&gt;t&lt;/span&gt;he &lt;span&gt;m&lt;/span&gt;orning.
    &lt;span id="results"&gt;Found &lt;span&gt;0&lt;/span&gt; children in &lt;span&gt;TAG&lt;/span&gt;.&lt;/span&gt;
  &lt;/p&gt;
&lt;/div&gt;
Find all children of each div.
$( "div" ).children().css( "border-bottom", "3px double red" );

  body {
    font-size: 16px;
    font-weight: bolder;
  }
  span {
    color: blue;
  }
  p {
    margin: 5px 0;
  }

&lt;p&gt;Hello (this is a paragraph)&lt;/p&gt;

&lt;div&gt;&lt;span&gt;Hello Again (this span is a child of the a div)&lt;/span&gt;&lt;/div&gt;
&lt;p&gt;And &lt;span&gt;Again&lt;/span&gt; (in another paragraph)&lt;/p&gt;

&lt;div&gt;And One Last &lt;span&gt;Time&lt;/span&gt; (most text directly in a div)&lt;/div&gt;
Find all children with a class "selected" of each div.
$( "div" ).children( ".selected" ).css( "color", "blue" );

  body {
    font-size: 16px;
    font-weight: bolder;
  }
  p {
    margin: 5px 0;
  }

&lt;div&gt;
  &lt;span&gt;Hello&lt;/span&gt;
  &lt;p class="selected"&gt;Hello Again&lt;/p&gt;
  &lt;div class="selected"&gt;And Again&lt;/div&gt;
  &lt;p&gt;And One Last Time&lt;/p&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='clearQueue' scope='instance'>
        <description>Remove from the queue all items that have not yet been run.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='queueName' usage='optional' type='String'>
            <description>A string containing the name of the queue. Defaults to fx, the standard effects queue.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Empty the queue.
$( "#start" ).click(function() {
  var myDiv = $( "div" );
  myDiv.show( "slow" );
  myDiv.animate({
    left:"+=200"
  }, 5000 );

  myDiv.queue(function() {
    var that = $( this );
    that.addClass( "newcolor" );
    that.dequeue();
  });

  myDiv.animate({
    left:"-=200"
  }, 1500 );
  myDiv.queue(function() {
    var that = $( this );
    that.removeClass( "newcolor" );
    that.dequeue();
  });
  myDiv.slideUp();
});

$( "#stop" ).click(function() {
  var myDiv = $( "div" );
  myDiv.clearQueue();
  myDiv.stop();
});

  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }

&lt;button id="start"&gt;Start&lt;/button&gt;
&lt;button id="stop"&gt;Stop&lt;/button&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='click' scope='instance'>
        <description>Bind an event handler to the "click" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Hide paragraphs on a page when they are clicked:
$( "p" ).click(function() {
  $( this ).slideUp();
});

  p {
    color: red;
    margin: 5px;
    cursor: pointer;
  }
  p:hover {
    background: yellow;
  }

&lt;p&gt;First Paragraph&lt;/p&gt;
&lt;p&gt;Second Paragraph&lt;/p&gt;
&lt;p&gt;Yet one more Paragraph&lt;/p&gt;
Trigger the click event on all of the paragraphs on the page:
$( "p" ).click();
</example>
        </examples>
      </method>
      <method name='click' scope='instance'>
        <description>Bind an event handler to the "click" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='Object'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Hide paragraphs on a page when they are clicked:
$( "p" ).click(function() {
  $( this ).slideUp();
});

  p {
    color: red;
    margin: 5px;
    cursor: pointer;
  }
  p:hover {
    background: yellow;
  }

&lt;p&gt;First Paragraph&lt;/p&gt;
&lt;p&gt;Second Paragraph&lt;/p&gt;
&lt;p&gt;Yet one more Paragraph&lt;/p&gt;
Trigger the click event on all of the paragraphs on the page:
$( "p" ).click();
</example>
        </examples>
      </method>
      <method name='click' scope='instance'>
        <description>Bind an event handler to the "click" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Hide paragraphs on a page when they are clicked:
$( "p" ).click(function() {
  $( this ).slideUp();
});

  p {
    color: red;
    margin: 5px;
    cursor: pointer;
  }
  p:hover {
    background: yellow;
  }

&lt;p&gt;First Paragraph&lt;/p&gt;
&lt;p&gt;Second Paragraph&lt;/p&gt;
&lt;p&gt;Yet one more Paragraph&lt;/p&gt;
Trigger the click event on all of the paragraphs on the page:
$( "p" ).click();
</example>
        </examples>
      </method>
      <method name='clone' scope='instance'>
        <description>Create a deep copy of the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='withDataAndEvents' usage='optional' type='Boolean'>
            <description>A Boolean indicating whether event handlers should be copied along with the elements. As of jQuery 1.4, element data will be copied as well.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Clones all b elements (and selects the clones) and prepends them to all paragraphs.
$( "b" ).clone().prependTo( "p" );

&lt;b&gt;Hello&lt;/b&gt;&lt;p&gt;, how are you?&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='clone' scope='instance'>
        <description>Create a deep copy of the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='withDataAndEvents' usage='optional' type='Boolean'>
            <description>A Boolean indicating whether event handlers and data should be copied along with the elements. The default value is false. *In jQuery 1.5.0 the default value was incorrectly true; it was changed back to false in 1.5.1 and up.</description>
          </parameter>
          <parameter name='deepWithDataAndEvents' usage='optional' type='Boolean'>
            <description>A Boolean indicating whether event handlers and data for all children of the cloned element should be copied. By default its value matches the first argument's value (which defaults to false).</description>
          </parameter>
        </parameters>
        <examples>
          <example>Clones all b elements (and selects the clones) and prepends them to all paragraphs.
$( "b" ).clone().prependTo( "p" );

&lt;b&gt;Hello&lt;/b&gt;&lt;p&gt;, how are you?&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='closest' scope='instance'>
        <description>For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.
$( document ).on( "click", function( event ) {
  $( event.target ).closest( "li" ).toggleClass( "hilight" );
});

  li {
    margin: 3px;
    padding: 3px;
    background: #EEEEEE;
  }
  li.hilight {
    background: yellow;
  }

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;You can also &lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
Pass a jQuery object to closest. The closest list element toggles a yellow background when it or its descendent is clicked.
var listElements = $( "li" ).css( "color", "blue" );
$( document ).on( "click", function( event ) {
  $( event.target ).closest( listElements ).toggleClass( "hilight" );
});

  li {
    margin: 3px;
    padding: 3px;
    background: #EEEEEE;
  }
  li.hilight {
    background: yellow;
  }

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;You can also &lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
</example>
        </examples>
      </method>
      <method name='closest' scope='instance'>
        <description>For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
          <parameter name='context' usage='optional' type='Element'>
            <description>A DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.
$( document ).on( "click", function( event ) {
  $( event.target ).closest( "li" ).toggleClass( "hilight" );
});

  li {
    margin: 3px;
    padding: 3px;
    background: #EEEEEE;
  }
  li.hilight {
    background: yellow;
  }

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;You can also &lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
Pass a jQuery object to closest. The closest list element toggles a yellow background when it or its descendent is clicked.
var listElements = $( "li" ).css( "color", "blue" );
$( document ).on( "click", function( event ) {
  $( event.target ).closest( listElements ).toggleClass( "hilight" );
});

  li {
    margin: 3px;
    padding: 3px;
    background: #EEEEEE;
  }
  li.hilight {
    background: yellow;
  }

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;You can also &lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
</example>
        </examples>
      </method>
      <method name='closest' scope='instance'>
        <description>For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='jQuery object' usage='required' type='jQuery'>
            <description>A jQuery object to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.
$( document ).on( "click", function( event ) {
  $( event.target ).closest( "li" ).toggleClass( "hilight" );
});

  li {
    margin: 3px;
    padding: 3px;
    background: #EEEEEE;
  }
  li.hilight {
    background: yellow;
  }

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;You can also &lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
Pass a jQuery object to closest. The closest list element toggles a yellow background when it or its descendent is clicked.
var listElements = $( "li" ).css( "color", "blue" );
$( document ).on( "click", function( event ) {
  $( event.target ).closest( listElements ).toggleClass( "hilight" );
});

  li {
    margin: 3px;
    padding: 3px;
    background: #EEEEEE;
  }
  li.hilight {
    background: yellow;
  }

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;You can also &lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
</example>
        </examples>
      </method>
      <method name='closest' scope='instance'>
        <description>For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='element' usage='required' type='Element'>
            <description>An element to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.
$( document ).on( "click", function( event ) {
  $( event.target ).closest( "li" ).toggleClass( "hilight" );
});

  li {
    margin: 3px;
    padding: 3px;
    background: #EEEEEE;
  }
  li.hilight {
    background: yellow;
  }

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;You can also &lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
Pass a jQuery object to closest. The closest list element toggles a yellow background when it or its descendent is clicked.
var listElements = $( "li" ).css( "color", "blue" );
$( document ).on( "click", function( event ) {
  $( event.target ).closest( listElements ).toggleClass( "hilight" );
});

  li {
    margin: 3px;
    padding: 3px;
    background: #EEEEEE;
  }
  li.hilight {
    background: yellow;
  }

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;You can also &lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
</example>
        </examples>
      </method>
      <method name='closest' scope='instance'>
        <description>Get an array of all the elements and selectors matched against the current element up through the DOM tree.</description>
        <return-types>
          <return-type type='Array' />
        </return-types>
        <parameters>
          <parameter name='selectors' usage='required' type='Array'>
            <description>An array or string containing a selector expression to match elements against (can also be a jQuery object).</description>
          </parameter>
          <parameter name='context' usage='optional' type='Element'>
            <description>A DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.</description>
          </parameter>
        </parameters>
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='contents' scope='instance'>
        <description>Get the children of each element in the set of matched elements, including text and comment nodes.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Find all the text nodes inside a paragraph and wrap them with a bold tag.
$( "p" )
  .contents()
  .filter(function(){
    return this.nodeType !== 1;
  })
  .wrap( "&lt;b&gt;&lt;/b&gt;" );

&lt;p&gt;Hello &lt;a href="http://ejohn.org/"&gt;John&lt;/a&gt;, how are you doing?&lt;/p&gt;
Change the background colour of links inside of an iframe.
$( "#frameDemo" ).contents().find( "a" ).css( "background-color", "#BADA55" );

&lt;iframe src="//api.jquery.com/" width="80%" height="600" id="frameDemo"&gt;&lt;/iframe&gt;
</example>
        </examples>
      </method>
      <method name='css' scope='instance'>
        <description>Get the computed style properties for the first element in the set of matched elements.</description>
        <return-types>
          <return-type type='String' />
        </return-types>
        <parameters>
          <parameter name='propertyName' usage='required' type='String'>
            <description>A CSS property.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Get the background color of a clicked div.
$( "div" ).click(function() {
  var color = $( this ).css( "background-color" );
  $( "#result" ).html( "That div is &lt;span style='color:" +
    color + ";'&gt;" + color + "&lt;/span&gt;." );
});

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
  }

&lt;span id="result"&gt;&amp;nbsp;&lt;/span&gt;
&lt;div style="background-color:blue;"&gt;&lt;/div&gt;
&lt;div style="background-color:rgb(15,99,30);"&gt;&lt;/div&gt;
&lt;div style="background-color:#123456;"&gt;&lt;/div&gt;
&lt;div style="background-color:#f11;"&gt;&lt;/div&gt;
Get the width, height, text color, and background color of a clicked div.
$( "div" ).click(function() {
  var html = [ "The clicked div has the following styles:" ];

  var styleProps = $( this ).css([
    "width", "height", "color", "background-color"
  ]);
  $.each( styleProps, function( prop, value ) {
    html.push( prop + ": " + value );
  });

  $( "#result" ).html( html.join( "&lt;br&gt;" ) );
});

  div {
    height: 50px;
    margin: 5px;
    padding: 5px;
    float: left;
  }
  #box1 {
    width: 50px;
    color: yellow;
    background-color: blue;
  }
  #box2 {
    width: 80px;
    color: rgb(255, 255, 255);
    background-color: rgb(15, 99, 30);
  }
  #box3 {
    width: 40px;
    color: #fcc;
    background-color: #123456;
  }
  #box4 {
    width: 70px;
    background-color: #f11;
  }

&lt;p id="result"&gt;&amp;nbsp;&lt;/p&gt;
&lt;div id="box1"&gt;1&lt;/div&gt;
&lt;div id="box2"&gt;2&lt;/div&gt;
&lt;div id="box3"&gt;3&lt;/div&gt;
&lt;div id="box4"&gt;4&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='css' scope='instance'>
        <description>Get the computed style properties for the first element in the set of matched elements.</description>
        <return-types>
          <return-type type='String' />
        </return-types>
        <parameters>
          <parameter name='propertyNames' usage='required' type='Array'>
            <description>An array of one or more CSS properties.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Get the background color of a clicked div.
$( "div" ).click(function() {
  var color = $( this ).css( "background-color" );
  $( "#result" ).html( "That div is &lt;span style='color:" +
    color + ";'&gt;" + color + "&lt;/span&gt;." );
});

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
  }

&lt;span id="result"&gt;&amp;nbsp;&lt;/span&gt;
&lt;div style="background-color:blue;"&gt;&lt;/div&gt;
&lt;div style="background-color:rgb(15,99,30);"&gt;&lt;/div&gt;
&lt;div style="background-color:#123456;"&gt;&lt;/div&gt;
&lt;div style="background-color:#f11;"&gt;&lt;/div&gt;
Get the width, height, text color, and background color of a clicked div.
$( "div" ).click(function() {
  var html = [ "The clicked div has the following styles:" ];

  var styleProps = $( this ).css([
    "width", "height", "color", "background-color"
  ]);
  $.each( styleProps, function( prop, value ) {
    html.push( prop + ": " + value );
  });

  $( "#result" ).html( html.join( "&lt;br&gt;" ) );
});

  div {
    height: 50px;
    margin: 5px;
    padding: 5px;
    float: left;
  }
  #box1 {
    width: 50px;
    color: yellow;
    background-color: blue;
  }
  #box2 {
    width: 80px;
    color: rgb(255, 255, 255);
    background-color: rgb(15, 99, 30);
  }
  #box3 {
    width: 40px;
    color: #fcc;
    background-color: #123456;
  }
  #box4 {
    width: 70px;
    background-color: #f11;
  }

&lt;p id="result"&gt;&amp;nbsp;&lt;/p&gt;
&lt;div id="box1"&gt;1&lt;/div&gt;
&lt;div id="box2"&gt;2&lt;/div&gt;
&lt;div id="box3"&gt;3&lt;/div&gt;
&lt;div id="box4"&gt;4&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='css' scope='instance'>
        <description>Set one or more CSS properties for the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='propertyName' usage='required' type='String'>
            <description>A CSS property name.</description>
          </parameter>
          <parameter name='value' usage='required' type=''>
            <description>A value to set for the property.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the color of any paragraph to red on mouseover event.
$( "p" ).on( "mouseover", function() {
  $( this ).css( "color", "red" );
});

  p {
    color: blue;
    width: 200px;
    font-size: 14px;
  }

  &lt;p&gt;Just roll the mouse over me.&lt;/p&gt;

  &lt;p&gt;Or me to see a color change.&lt;/p&gt;
Increase the width of #box by 200 pixels the first time it is clicked.
$( "#box" ).one( "click", function() {
  $( this ).css( "width", "+=200" );
});

  #box {
    background: black;
    color: snow;
    width: 100px;
    padding: 10px;
  }

&lt;div id="box"&gt;Click me to grow&lt;/div&gt;
Highlight a clicked word in the paragraph.
var words = $( "p" ).first().text().split( /\s+/ );
var text = words.join( "&lt;/span&gt; &lt;span&gt;" );
$( "p" ).first().html( "&lt;span&gt;" + text + "&lt;/span&gt;" );
$( "span" ).on( "click", function() {
  $( this ).css( "background-color", "yellow" );
});

  p {
    color: blue;
    font-weight: bold;
    cursor: pointer;
  }

&lt;p&gt;
  Once upon a time there was a man
  who lived in a pizza parlor. This
  man just loved pizza and ate it all
  the time.  He went on to be the
  happiest man in the world.  The end.
&lt;/p&gt;
Change the font weight and background color on mouseenter and mouseleave.
$( "p" )
  .on( "mouseenter", function() {
    $( this ).css({
      "background-color": "yellow",
      "font-weight": "bolder"
    });
  })
  .on( "mouseleave", function() {
    var styles = {
      backgroundColor : "#ddd",
      fontWeight: ""
    };
    $( this ).css( styles );
  });

  p {
    color: green;
  }

&lt;p&gt;Move the mouse over a paragraph.&lt;/p&gt;
&lt;p&gt;Like this one or the one above.&lt;/p&gt;
Increase the size of a div when you click it.
$( "div" ).on( "click", function() {
  $( this ).css({
    width: function( index, value ) {
      return parseFloat( value ) * 1.2;
    },
    height: function( index, value ) {
      return parseFloat( value ) * 1.2;
    }
  });
});

  div {
    width: 20px;
    height: 15px;
    background-color: #f33;
  }

&lt;div&gt;click&lt;/div&gt;
&lt;div&gt;click&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='css' scope='instance'>
        <description>Set one or more CSS properties for the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='propertyName' usage='required' type='String'>
            <description>A CSS property name.</description>
          </parameter>
          <parameter name='function(index, value)' usage='required' type='Function'>
            <description>A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old value as arguments.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the color of any paragraph to red on mouseover event.
$( "p" ).on( "mouseover", function() {
  $( this ).css( "color", "red" );
});

  p {
    color: blue;
    width: 200px;
    font-size: 14px;
  }

  &lt;p&gt;Just roll the mouse over me.&lt;/p&gt;

  &lt;p&gt;Or me to see a color change.&lt;/p&gt;
Increase the width of #box by 200 pixels the first time it is clicked.
$( "#box" ).one( "click", function() {
  $( this ).css( "width", "+=200" );
});

  #box {
    background: black;
    color: snow;
    width: 100px;
    padding: 10px;
  }

&lt;div id="box"&gt;Click me to grow&lt;/div&gt;
Highlight a clicked word in the paragraph.
var words = $( "p" ).first().text().split( /\s+/ );
var text = words.join( "&lt;/span&gt; &lt;span&gt;" );
$( "p" ).first().html( "&lt;span&gt;" + text + "&lt;/span&gt;" );
$( "span" ).on( "click", function() {
  $( this ).css( "background-color", "yellow" );
});

  p {
    color: blue;
    font-weight: bold;
    cursor: pointer;
  }

&lt;p&gt;
  Once upon a time there was a man
  who lived in a pizza parlor. This
  man just loved pizza and ate it all
  the time.  He went on to be the
  happiest man in the world.  The end.
&lt;/p&gt;
Change the font weight and background color on mouseenter and mouseleave.
$( "p" )
  .on( "mouseenter", function() {
    $( this ).css({
      "background-color": "yellow",
      "font-weight": "bolder"
    });
  })
  .on( "mouseleave", function() {
    var styles = {
      backgroundColor : "#ddd",
      fontWeight: ""
    };
    $( this ).css( styles );
  });

  p {
    color: green;
  }

&lt;p&gt;Move the mouse over a paragraph.&lt;/p&gt;
&lt;p&gt;Like this one or the one above.&lt;/p&gt;
Increase the size of a div when you click it.
$( "div" ).on( "click", function() {
  $( this ).css({
    width: function( index, value ) {
      return parseFloat( value ) * 1.2;
    },
    height: function( index, value ) {
      return parseFloat( value ) * 1.2;
    }
  });
});

  div {
    width: 20px;
    height: 15px;
    background-color: #f33;
  }

&lt;div&gt;click&lt;/div&gt;
&lt;div&gt;click&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='css' scope='instance'>
        <description>Set one or more CSS properties for the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='properties' usage='required' type='PlainObject'>
            <description>An object of property-value pairs to set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the color of any paragraph to red on mouseover event.
$( "p" ).on( "mouseover", function() {
  $( this ).css( "color", "red" );
});

  p {
    color: blue;
    width: 200px;
    font-size: 14px;
  }

  &lt;p&gt;Just roll the mouse over me.&lt;/p&gt;

  &lt;p&gt;Or me to see a color change.&lt;/p&gt;
Increase the width of #box by 200 pixels the first time it is clicked.
$( "#box" ).one( "click", function() {
  $( this ).css( "width", "+=200" );
});

  #box {
    background: black;
    color: snow;
    width: 100px;
    padding: 10px;
  }

&lt;div id="box"&gt;Click me to grow&lt;/div&gt;
Highlight a clicked word in the paragraph.
var words = $( "p" ).first().text().split( /\s+/ );
var text = words.join( "&lt;/span&gt; &lt;span&gt;" );
$( "p" ).first().html( "&lt;span&gt;" + text + "&lt;/span&gt;" );
$( "span" ).on( "click", function() {
  $( this ).css( "background-color", "yellow" );
});

  p {
    color: blue;
    font-weight: bold;
    cursor: pointer;
  }

&lt;p&gt;
  Once upon a time there was a man
  who lived in a pizza parlor. This
  man just loved pizza and ate it all
  the time.  He went on to be the
  happiest man in the world.  The end.
&lt;/p&gt;
Change the font weight and background color on mouseenter and mouseleave.
$( "p" )
  .on( "mouseenter", function() {
    $( this ).css({
      "background-color": "yellow",
      "font-weight": "bolder"
    });
  })
  .on( "mouseleave", function() {
    var styles = {
      backgroundColor : "#ddd",
      fontWeight: ""
    };
    $( this ).css( styles );
  });

  p {
    color: green;
  }

&lt;p&gt;Move the mouse over a paragraph.&lt;/p&gt;
&lt;p&gt;Like this one or the one above.&lt;/p&gt;
Increase the size of a div when you click it.
$( "div" ).on( "click", function() {
  $( this ).css({
    width: function( index, value ) {
      return parseFloat( value ) * 1.2;
    },
    height: function( index, value ) {
      return parseFloat( value ) * 1.2;
    }
  });
});

  div {
    width: 20px;
    height: 15px;
    background-color: #f33;
  }

&lt;div&gt;click&lt;/div&gt;
&lt;div&gt;click&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='data' scope='instance'>
        <description>Store arbitrary data associated with the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='key' usage='required' type='String'>
            <description>A string naming the piece of data to set.</description>
          </parameter>
          <parameter name='value' usage='required' type='Object'>
            <description>The new data value; it can be any Javascript type including Array or Object.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Store then retrieve a value from the div element.
$( "div" ).data( "test", { first: 16, last: "pizza!" } );
$( "span:first" ).text( $( "div" ).data( "test" ).first );
$( "span:last" ).text( $( "div" ).data( "test" ).last );

  div {
    color: blue;
  }
  span {
    color: red;
  }

&lt;div&gt;
  The values stored were
  &lt;span&gt;&lt;/span&gt;
  and
  &lt;span&gt;&lt;/span&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='data' scope='instance'>
        <description>Store arbitrary data associated with the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='obj' usage='required' type='Object'>
            <description>An object of key-value pairs of data to update.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Store then retrieve a value from the div element.
$( "div" ).data( "test", { first: 16, last: "pizza!" } );
$( "span:first" ).text( $( "div" ).data( "test" ).first );
$( "span:last" ).text( $( "div" ).data( "test" ).last );

  div {
    color: blue;
  }
  span {
    color: red;
  }

&lt;div&gt;
  The values stored were
  &lt;span&gt;&lt;/span&gt;
  and
  &lt;span&gt;&lt;/span&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='data' scope='instance'>
        <description>Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.</description>
        <return-types>
          <return-type type='Object' />
        </return-types>
        <parameters>
          <parameter name='key' usage='required' type='String'>
            <description>Name of the data stored.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Get the data named "blah" stored at for an element.
$( "button" ).click(function() {
  var value;

  switch ( $( "button" ).index( this ) ) {
    case 0 :
      value = $( "div" ).data( "blah" );
      break;
    case 1 :
      $( "div" ).data( "blah", "hello" );
      value = "Stored!";
      break;
    case 2 :
      $( "div" ).data( "blah", 86 );
      value = "Stored!";
      break;
    case 3 :
      $( "div" ).removeData( "blah" );
      value = "Removed!";
      break;
  }

  $( "span" ).text( "" + value );
});

  div {
    margin: 5px;
    background: yellow;
  }
  button {
    margin: 5px;
    font-size: 14px;
  }
  p {
    margin: 5px;
    color: blue;
  }
  span {
    color: red;
  }

&lt;div&gt;A div&lt;/div&gt;
&lt;button&gt;Get "blah" from the div&lt;/button&gt;
&lt;button&gt;Set "blah" to "hello"&lt;/button&gt;
&lt;button&gt;Set "blah" to 86&lt;/button&gt;
&lt;button&gt;Remove "blah" from the div&lt;/button&gt;
&lt;p&gt;The "blah" value of this div is &lt;span&gt;?&lt;/span&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='data' scope='instance'>
        <description>Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.</description>
        <return-types>
          <return-type type='Object' />
        </return-types>
        <parameters />
        <examples>
          <example>Get the data named "blah" stored at for an element.
$( "button" ).click(function() {
  var value;

  switch ( $( "button" ).index( this ) ) {
    case 0 :
      value = $( "div" ).data( "blah" );
      break;
    case 1 :
      $( "div" ).data( "blah", "hello" );
      value = "Stored!";
      break;
    case 2 :
      $( "div" ).data( "blah", 86 );
      value = "Stored!";
      break;
    case 3 :
      $( "div" ).removeData( "blah" );
      value = "Removed!";
      break;
  }

  $( "span" ).text( "" + value );
});

  div {
    margin: 5px;
    background: yellow;
  }
  button {
    margin: 5px;
    font-size: 14px;
  }
  p {
    margin: 5px;
    color: blue;
  }
  span {
    color: red;
  }

&lt;div&gt;A div&lt;/div&gt;
&lt;button&gt;Get "blah" from the div&lt;/button&gt;
&lt;button&gt;Set "blah" to "hello"&lt;/button&gt;
&lt;button&gt;Set "blah" to 86&lt;/button&gt;
&lt;button&gt;Remove "blah" from the div&lt;/button&gt;
&lt;p&gt;The "blah" value of this div is &lt;span&gt;?&lt;/span&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='dblclick' scope='instance'>
        <description>Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To bind a "Hello World!" alert box the dblclick event on every paragraph on the page:
$( "p" ).dblclick(function() {
  alert( "Hello World!" );
});
Double click to toggle background color.
var divdbl = $( "div:first" );
divdbl.dblclick(function() {
  divdbl.toggleClass( "dbl" );
});

  div {
    background: blue;
    color: white;
    height: 100px;
    width: 150px;
 }
  div.dbl {
    background: yellow;
    color: black;
  }

&lt;div&gt;&lt;/div&gt;
&lt;span&gt;Double click the block&lt;/span&gt;
</example>
        </examples>
      </method>
      <method name='dblclick' scope='instance'>
        <description>Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='Object'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To bind a "Hello World!" alert box the dblclick event on every paragraph on the page:
$( "p" ).dblclick(function() {
  alert( "Hello World!" );
});
Double click to toggle background color.
var divdbl = $( "div:first" );
divdbl.dblclick(function() {
  divdbl.toggleClass( "dbl" );
});

  div {
    background: blue;
    color: white;
    height: 100px;
    width: 150px;
 }
  div.dbl {
    background: yellow;
    color: black;
  }

&lt;div&gt;&lt;/div&gt;
&lt;span&gt;Double click the block&lt;/span&gt;
</example>
        </examples>
      </method>
      <method name='dblclick' scope='instance'>
        <description>Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>To bind a "Hello World!" alert box the dblclick event on every paragraph on the page:
$( "p" ).dblclick(function() {
  alert( "Hello World!" );
});
Double click to toggle background color.
var divdbl = $( "div:first" );
divdbl.dblclick(function() {
  divdbl.toggleClass( "dbl" );
});

  div {
    background: blue;
    color: white;
    height: 100px;
    width: 150px;
 }
  div.dbl {
    background: yellow;
    color: black;
  }

&lt;div&gt;&lt;/div&gt;
&lt;span&gt;Double click the block&lt;/span&gt;
</example>
        </examples>
      </method>
      <method name='delay' scope='instance'>
        <description>Set a timer to delay execution of subsequent items in the queue.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='required' type='Integer'>
            <description>An integer indicating the number of milliseconds to delay execution of the next item in the queue.</description>
          </parameter>
          <parameter name='queueName' usage='optional' type='String'>
            <description>A string containing the name of the queue. Defaults to fx, the standard effects queue.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animate the hiding and showing of two divs, delaying the first before showing it.
  div {
    position: absolute;
    width: 60px;
    height: 60px;
    float: left;
  }
  .first {
    background-color: #3f3;
    left: 0;
  }
  .second {
    background-color: #33f;
    left: 80px;
  }

$( "button" ).click(function() {
  $( "div.first" ).slideUp( 300 ).delay( 800 ).fadeIn( 400 );
  $( "div.second" ).slideUp( 300 ).fadeIn( 400 );
});

&lt;p&gt;&lt;button&gt;Run&lt;/button&gt;&lt;/p&gt;
&lt;div class="first"&gt;&lt;/div&gt;
&lt;div class="second"&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='delegate' scope='instance'>
        <description>Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='String'>
            <description>A selector to filter the elements that trigger the event.</description>
          </parameter>
          <parameter name='eventType' usage='required' type='String'>
            <description>A string containing one or more space-separated JavaScript event types, such as "click" or "keydown," or custom event names.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute at the time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Click a paragraph to add another. Note that .delegate() attaches a click event handler to all paragraphs - even new ones.
$( "body" ).delegate( "p", "click", function() {
  $( this ).after( "&lt;p&gt;Another paragraph!&lt;/p&gt;" );
});

  p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
  }
  p.over {
    background: #ccc;
  }
  span {
    color: red;
  }

&lt;p&gt;Click me!&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;
To display each paragraph's text in an alert box whenever it is clicked:
$( "body" ).delegate( "p", "click", function() {
  alert( $( this ).text() );
});
To cancel a default action and prevent it from bubbling up, return false:
$( "body" ).delegate( "a", "click", function() {
  return false;
});
To cancel only the default action by using the preventDefault method.
$( "body" ).delegate( "a", "click", function( event ) {
  event.preventDefault();
});
Can bind custom events too.
$( "body" ).delegate( "p", "myCustomEvent", function( e, myName, myValue ) {
  $( this ).text( "Hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
});
$( "button" ).click(function() {
  $( "p" ).trigger( "myCustomEvent" );
});

  p {
    color: red;
  }
  span {
    color: blue;
  }

&lt;p&gt;Has an attached custom event.&lt;/p&gt;
&lt;button&gt;Trigger custom event&lt;/button&gt;
&lt;span style="display:none;"&gt;&lt;/span&gt;
</example>
        </examples>
      </method>
      <method name='delegate' scope='instance'>
        <description>Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='String'>
            <description>A selector to filter the elements that trigger the event.</description>
          </parameter>
          <parameter name='eventType' usage='required' type='String'>
            <description>A string containing one or more space-separated JavaScript event types, such as "click" or "keydown," or custom event names.</description>
          </parameter>
          <parameter name='eventData' usage='required' type='Object'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute at the time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Click a paragraph to add another. Note that .delegate() attaches a click event handler to all paragraphs - even new ones.
$( "body" ).delegate( "p", "click", function() {
  $( this ).after( "&lt;p&gt;Another paragraph!&lt;/p&gt;" );
});

  p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
  }
  p.over {
    background: #ccc;
  }
  span {
    color: red;
  }

&lt;p&gt;Click me!&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;
To display each paragraph's text in an alert box whenever it is clicked:
$( "body" ).delegate( "p", "click", function() {
  alert( $( this ).text() );
});
To cancel a default action and prevent it from bubbling up, return false:
$( "body" ).delegate( "a", "click", function() {
  return false;
});
To cancel only the default action by using the preventDefault method.
$( "body" ).delegate( "a", "click", function( event ) {
  event.preventDefault();
});
Can bind custom events too.
$( "body" ).delegate( "p", "myCustomEvent", function( e, myName, myValue ) {
  $( this ).text( "Hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
});
$( "button" ).click(function() {
  $( "p" ).trigger( "myCustomEvent" );
});

  p {
    color: red;
  }
  span {
    color: blue;
  }

&lt;p&gt;Has an attached custom event.&lt;/p&gt;
&lt;button&gt;Trigger custom event&lt;/button&gt;
&lt;span style="display:none;"&gt;&lt;/span&gt;
</example>
        </examples>
      </method>
      <method name='delegate' scope='instance'>
        <description>Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='String'>
            <description>A selector to filter the elements that trigger the event.</description>
          </parameter>
          <parameter name='events' usage='required' type='PlainObject'>
            <description>A plain object of one or more event types and functions to execute for them.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Click a paragraph to add another. Note that .delegate() attaches a click event handler to all paragraphs - even new ones.
$( "body" ).delegate( "p", "click", function() {
  $( this ).after( "&lt;p&gt;Another paragraph!&lt;/p&gt;" );
});

  p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
  }
  p.over {
    background: #ccc;
  }
  span {
    color: red;
  }

&lt;p&gt;Click me!&lt;/p&gt;

&lt;span&gt;&lt;/span&gt;
To display each paragraph's text in an alert box whenever it is clicked:
$( "body" ).delegate( "p", "click", function() {
  alert( $( this ).text() );
});
To cancel a default action and prevent it from bubbling up, return false:
$( "body" ).delegate( "a", "click", function() {
  return false;
});
To cancel only the default action by using the preventDefault method.
$( "body" ).delegate( "a", "click", function( event ) {
  event.preventDefault();
});
Can bind custom events too.
$( "body" ).delegate( "p", "myCustomEvent", function( e, myName, myValue ) {
  $( this ).text( "Hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
});
$( "button" ).click(function() {
  $( "p" ).trigger( "myCustomEvent" );
});

  p {
    color: red;
  }
  span {
    color: blue;
  }

&lt;p&gt;Has an attached custom event.&lt;/p&gt;
&lt;button&gt;Trigger custom event&lt;/button&gt;
&lt;span style="display:none;"&gt;&lt;/span&gt;
</example>
        </examples>
      </method>
      <method name='dequeue' scope='instance'>
        <description>Execute the next function on the queue for the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='queueName' usage='optional' type='String'>
            <description>A string containing the name of the queue. Defaults to fx, the standard effects queue.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Use dequeue to end a custom queue function which allows the queue to keep going.
$( "button" ).click(function() {
  $( "div" )
    .animate({ left:"+=200px" }, 2000 )
    .animate({ top:"0px" }, 600 )
    .queue(function() {
      $( this ).toggleClass( "red" ).dequeue();
    })
    .animate({ left:"10px", top:"30px" }, 700 );
});

  div {
    margin: 3px;
    width: 50px;
    position: absolute;
    height: 50px;
    left: 10px;
    top: 30px;
    background-color: yellow;
  }
  div.red {
    background-color: red;
  }

&lt;button&gt;Start&lt;/button&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='detach' scope='instance'>
        <description>Remove the set of matched elements from the DOM.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='optional' type='Selector'>
            <description>A selector expression that filters the set of matched elements to be removed.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Detach all paragraphs from the DOM
$( "p" ).click(function() {
  $( this ).toggleClass( "off" );
});
var p;
$( "button" ).click(function() {
  if ( p ) {
    p.appendTo( "body" );
    p = null;
  } else {
    p = $( "p" ).detach();
  }
});

  p {
    background: yellow;
    margin: 6px 0;
  }
  p.off {
    background: black;
  }

&lt;p&gt;Hello&lt;/p&gt;
how are
&lt;p&gt;you?&lt;/p&gt;
&lt;button&gt;Attach/detach paragraphs&lt;/button&gt;
</example>
        </examples>
      </method>
      <method name='die' scope='instance'>
        <description>Remove event handlers previously attached using .live() from the elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>To unbind all live events from all paragraphs, write:
$( "p" ).die();
To unbind all live click events from all paragraphs, write:
$( "p" ).die( "click" );
To unbind just one previously bound handler, pass the function in as the second argument:
var foo = function() {
  // Code to handle some kind of event
};

// Now foo will be called when paragraphs are clicked
$( "p" ).live( "click", foo );

// Now foo will no longer be called
$( "p" ).die( "click", foo );
</example>
        </examples>
      </method>
      <method name='die' scope='instance'>
        <description>Remove event handlers previously attached using .live() from the elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventType' usage='required' type='String'>
            <description>A string containing a JavaScript event type, such as click or keydown.</description>
          </parameter>
          <parameter name='handler' usage='optional' type='String'>
            <description>The function that is no longer to be executed.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To unbind all live events from all paragraphs, write:
$( "p" ).die();
To unbind all live click events from all paragraphs, write:
$( "p" ).die( "click" );
To unbind just one previously bound handler, pass the function in as the second argument:
var foo = function() {
  // Code to handle some kind of event
};

// Now foo will be called when paragraphs are clicked
$( "p" ).live( "click", foo );

// Now foo will no longer be called
$( "p" ).die( "click", foo );
</example>
        </examples>
      </method>
      <method name='die' scope='instance'>
        <description>Remove event handlers previously attached using .live() from the elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='events' usage='required' type='PlainObject'>
            <description>A plain object of one or more event types, such as click or keydown and their corresponding functions that are no longer to be executed.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To unbind all live events from all paragraphs, write:
$( "p" ).die();
To unbind all live click events from all paragraphs, write:
$( "p" ).die( "click" );
To unbind just one previously bound handler, pass the function in as the second argument:
var foo = function() {
  // Code to handle some kind of event
};

// Now foo will be called when paragraphs are clicked
$( "p" ).live( "click", foo );

// Now foo will no longer be called
$( "p" ).die( "click", foo );
</example>
        </examples>
      </method>
      <method name='each' scope='instance'>
        <description>Iterate over a jQuery object, executing a function for each matched element. </description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index, Element)' usage='required' type='Function'>
            <description>A function to execute for each matched element.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Iterate over three divs and sets their color property.
$( document.body ).click(function() {
  $( "div" ).each(function( i ) {
    if ( this.style.color !== "blue" ) {
      this.style.color = "blue";
    } else {
      this.style.color = "";
    }
  });
});

  div {
    color: red;
    text-align: center;
    cursor: pointer;
    font-weight: bolder;
    width: 300px;
  }

&lt;div&gt;Click here&lt;/div&gt;
&lt;div&gt;to iterate through&lt;/div&gt;
&lt;div&gt;these divs.&lt;/div&gt;
To access a jQuery object instead of the regular DOM element, use $( this ). For example:
$( "span" ).click(function() {
  $( "li" ).each(function() {
    $( this ).toggleClass( "example" );
  });
});

  ul {
    font-size: 18px;
    margin: 0;
  }
  span {
    color: blue;
    text-decoration: underline;
    cursor: pointer;
  }
  .example {
    font-style: italic;
  }

To do list: &lt;span&gt;(click here to change)&lt;/span&gt;
&lt;ul&gt;
  &lt;li&gt;Eat&lt;/li&gt;
  &lt;li&gt;Sleep&lt;/li&gt;
  &lt;li&gt;Be merry&lt;/li&gt;
&lt;/ul&gt;
Use return false to break out of each() loops early.
$( "button" ).click(function() {
  $( "div" ).each(function( index, element ) {
    // element == this
    $( element ).css( "backgroundColor", "yellow" );
    if ( $( this ).is( "#stop" ) ) {
      $( "span" ).text( "Stopped at div index #" + index );
      return false;
    }
  });
});

  div {
    width: 40px;
    height: 40px;
    margin: 5px;
    float: left;
    border: 2px blue solid;
    text-align: center;
  }
  span {
    color: red;
  }

&lt;button&gt;Change colors&lt;/button&gt;
&lt;span&gt;&lt;/span&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div id="stop"&gt;Stop here&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='empty' scope='instance'>
        <description>Remove all child nodes of the set of matched elements from the DOM.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Removes all child nodes (including text nodes) from all paragraphs
$( "button" ).click(function() {
  $( "p" ).empty();
});

  p {
    background: yellow;
  }

&lt;p&gt;
  Hello, &lt;span&gt;Person&lt;/span&gt; &lt;em&gt;and person&lt;/em&gt;.
&lt;/p&gt;

&lt;button&gt;Call empty() on above paragraph&lt;/button&gt;
</example>
        </examples>
      </method>
      <method name='end' scope='instance'>
        <description>End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.
jQuery.fn.showTags = function( n ) {
  var tags = this.map(function() {
    return this.tagName;
  })
  .get()
  .join( ", " );
  $( "b:eq( " + n + " )" ).text( tags );
  return this;
};

$( "p" )
  .showTags( 0 )
  .find( "span" )
    .showTags( 1 )
    .css( "background", "yellow" )
  .end()
  .showTags( 2 )
  .css( "font-style", "italic" );

  p, div {
    margin: 1px;
    padding: 1px;
    font-weight: bold;
    font-size: 16px;
  }
  div {
    color: blue;
  }
  b {
    color: red;
  }

&lt;p&gt;
  Hi there &lt;span&gt;how&lt;/span&gt; are you &lt;span&gt;doing&lt;/span&gt;?
&lt;/p&gt;

&lt;p&gt;
  This &lt;span&gt;span&lt;/span&gt; is one of
  several &lt;span&gt;spans&lt;/span&gt; in this
  &lt;span&gt;sentence&lt;/span&gt;.
&lt;/p&gt;

&lt;div&gt;
  Tags in jQuery object initially: &lt;b&gt;&lt;/b&gt;
&lt;/div&gt;

&lt;div&gt;
  Tags in jQuery object after find: &lt;b&gt;&lt;/b&gt;
&lt;/div&gt;

&lt;div&gt;
  Tags in jQuery object after end: &lt;b&gt;&lt;/b&gt;
&lt;/div&gt;
Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.
$( "p" )
  .find( "span" )
  .end()
  .css( "border", "2px red solid" );

  p {
    margin: 10px;
    padding: 10px;
  }

&lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;, how are you?&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='eq' scope='instance'>
        <description>Reduce the set of matched elements to the one at the specified index.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='index' usage='required' type='Integer'>
            <description>An integer indicating the 0-based position of the element. </description>
          </parameter>
        </parameters>
        <examples>
          <example>Turn the div with index 2 blue by adding an appropriate class.
$( "body" ).find( "div" ).eq( 2 ).addClass( "blue" );

  div {
    width: 60px;
    height: 60px;
    margin: 10px;
    float: left;
    border: 2px solid blue;
  }
  .blue {
    background: blue;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='eq' scope='instance'>
        <description>Reduce the set of matched elements to the one at the specified index.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='-index' usage='required' type='Integer'>
            <description>An integer indicating the position of the element, counting backwards from the last element in the set. </description>
          </parameter>
        </parameters>
        <examples>
          <example>Turn the div with index 2 blue by adding an appropriate class.
$( "body" ).find( "div" ).eq( 2 ).addClass( "blue" );

  div {
    width: 60px;
    height: 60px;
    margin: 10px;
    float: left;
    border: 2px solid blue;
  }
  .blue {
    background: blue;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='error' scope='instance'>
        <description>Bind an event handler to the "error" JavaScript event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute when the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To hide the "broken image" icons for IE users, you can try:
$( "img" )
  .error(function() {
    $( this ).hide();
  })
  .attr( "src", "missing.png" );
</example>
        </examples>
      </method>
      <method name='error' scope='instance'>
        <description>Bind an event handler to the "error" JavaScript event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='Object'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To hide the "broken image" icons for IE users, you can try:
$( "img" )
  .error(function() {
    $( this ).hide();
  })
  .attr( "src", "missing.png" );
</example>
        </examples>
      </method>
      <method name='fadeIn' scope='instance'>
        <description>Display the matched elements by fading them to opaque.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates hidden divs to fade in one by one, completing each animation within 600 milliseconds.
$( document.body ).click(function() {
  $( "div:hidden:first" ).fadeIn( "slow" );
});

  span {
    color: red;
    cursor: pointer;
  }
  div {
    margin: 3px;
    width: 80px;
    display: none;
    height: 80px;
    float: left;
  }
  #one {
    background: #f00;
  }
  #two {
    background: #0f0;
  }
  #three {
    background: #00f;
  }

&lt;span&gt;Click here...&lt;/span&gt;
&lt;div id="one"&gt;&lt;/div&gt;
&lt;div id="two"&gt;&lt;/div&gt;
&lt;div id="three"&gt;&lt;/div&gt;
Fades a red block in over the text. Once the animation is done, it quickly fades in more text on top.
$( "a" ).click(function() {
  $( "div" ).fadeIn( 3000, function() {
    $( "span" ).fadeIn( 100 );
  });
  return false;
});

  p {
    position: relative;
    width: 400px;
    height: 90px;
  }
  div {
    position: absolute;
    width: 400px;
    height: 65px;
    font-size: 36px;
    text-align: center;
    color: yellow;
    background: red;
    padding-top: 25px;
    top: 0;
    left: 0;
    display: none;
  }
  span {
    display: none;
  }

&lt;p&gt;
  Let it be known that the party of the first part
  and the party of the second part are henceforth
  and hereto directed to assess the allegations
  for factual correctness... (&lt;a href="#"&gt;click!&lt;/a&gt;)
  &lt;div&gt;&lt;span&gt;CENSORED!&lt;/span&gt;&lt;/div&gt;
&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='fadeIn' scope='instance'>
        <description>Display the matched elements by fading them to opaque.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='options' usage='required' type='PlainObject'>
            <description>A map of additional options to pass to the method.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates hidden divs to fade in one by one, completing each animation within 600 milliseconds.
$( document.body ).click(function() {
  $( "div:hidden:first" ).fadeIn( "slow" );
});

  span {
    color: red;
    cursor: pointer;
  }
  div {
    margin: 3px;
    width: 80px;
    display: none;
    height: 80px;
    float: left;
  }
  #one {
    background: #f00;
  }
  #two {
    background: #0f0;
  }
  #three {
    background: #00f;
  }

&lt;span&gt;Click here...&lt;/span&gt;
&lt;div id="one"&gt;&lt;/div&gt;
&lt;div id="two"&gt;&lt;/div&gt;
&lt;div id="three"&gt;&lt;/div&gt;
Fades a red block in over the text. Once the animation is done, it quickly fades in more text on top.
$( "a" ).click(function() {
  $( "div" ).fadeIn( 3000, function() {
    $( "span" ).fadeIn( 100 );
  });
  return false;
});

  p {
    position: relative;
    width: 400px;
    height: 90px;
  }
  div {
    position: absolute;
    width: 400px;
    height: 65px;
    font-size: 36px;
    text-align: center;
    color: yellow;
    background: red;
    padding-top: 25px;
    top: 0;
    left: 0;
    display: none;
  }
  span {
    display: none;
  }

&lt;p&gt;
  Let it be known that the party of the first part
  and the party of the second part are henceforth
  and hereto directed to assess the allegations
  for factual correctness... (&lt;a href="#"&gt;click!&lt;/a&gt;)
  &lt;div&gt;&lt;span&gt;CENSORED!&lt;/span&gt;&lt;/div&gt;
&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='fadeIn' scope='instance'>
        <description>Display the matched elements by fading them to opaque.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='easing' usage='optional' type='String'>
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates hidden divs to fade in one by one, completing each animation within 600 milliseconds.
$( document.body ).click(function() {
  $( "div:hidden:first" ).fadeIn( "slow" );
});

  span {
    color: red;
    cursor: pointer;
  }
  div {
    margin: 3px;
    width: 80px;
    display: none;
    height: 80px;
    float: left;
  }
  #one {
    background: #f00;
  }
  #two {
    background: #0f0;
  }
  #three {
    background: #00f;
  }

&lt;span&gt;Click here...&lt;/span&gt;
&lt;div id="one"&gt;&lt;/div&gt;
&lt;div id="two"&gt;&lt;/div&gt;
&lt;div id="three"&gt;&lt;/div&gt;
Fades a red block in over the text. Once the animation is done, it quickly fades in more text on top.
$( "a" ).click(function() {
  $( "div" ).fadeIn( 3000, function() {
    $( "span" ).fadeIn( 100 );
  });
  return false;
});

  p {
    position: relative;
    width: 400px;
    height: 90px;
  }
  div {
    position: absolute;
    width: 400px;
    height: 65px;
    font-size: 36px;
    text-align: center;
    color: yellow;
    background: red;
    padding-top: 25px;
    top: 0;
    left: 0;
    display: none;
  }
  span {
    display: none;
  }

&lt;p&gt;
  Let it be known that the party of the first part
  and the party of the second part are henceforth
  and hereto directed to assess the allegations
  for factual correctness... (&lt;a href="#"&gt;click!&lt;/a&gt;)
  &lt;div&gt;&lt;span&gt;CENSORED!&lt;/span&gt;&lt;/div&gt;
&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='fadeOut' scope='instance'>
        <description>Hide the matched elements by fading them to transparent.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all paragraphs to fade out, completing the animation within 600 milliseconds.
$( "p" ).click(function() {
  $( "p" ).fadeOut( "slow" );
});

  p {
    font-size: 150%;
    cursor: pointer;
  }

&lt;p&gt;
  If you click on this paragraph
  you'll see it just fade away.
&lt;/p&gt;
Fades out spans in one section that you click on.
$( "span" ).click(function() {
  $( this ).fadeOut( 1000, function() {
    $( "div" ).text( "'" + $( this ).text() + "' has faded!" );
    $( this ).remove();
  });
});
$( "span" ).hover(function() {
  $( this ).addClass( "hilite" );
}, function() {
  $( this ).removeClass( "hilite" );
});

  span {
    cursor: pointer;
  }
  span.hilite {
    background: yellow;
  }
  div {
    display: inline;
    color: red;
  }

&lt;h3&gt;Find the modifiers - &lt;div&gt;&lt;/div&gt;&lt;/h3&gt;
&lt;p&gt;
  If you &lt;span&gt;really&lt;/span&gt; want to go outside
  &lt;span&gt;in the cold&lt;/span&gt; then make sure to wear
  your &lt;span&gt;warm&lt;/span&gt; jacket given to you by
  your &lt;span&gt;favorite&lt;/span&gt; teacher.
&lt;/p&gt;
Fades out two divs, one with a "linear" easing and one with the default, "swing," easing.
$( "#btn1" ).click(function() {
  function complete() {
    $( "&lt;div&gt;" ).text( this.id ).appendTo( "#log" );
  }
  $( "#box1" ).fadeOut( 1600, "linear", complete );
  $( "#box2" ).fadeOut( 1600, complete );
});

$( "#btn2" ).click(function() {
  $( "div" ).show();
  $( "#log" ).empty();
});

  .box,
  button {
    float: left;
    margin: 5px 10px 5px 0;
  }
  .box {
    height: 80px;
    width: 80px;
    background: #090;
  }
  #log {
    clear: left;
  }

&lt;button id="btn1"&gt;fade out&lt;/button&gt;
&lt;button id="btn2"&gt;show&lt;/button&gt;

&lt;div id="log"&gt;&lt;/div&gt;

&lt;div id="box1" class="box"&gt;linear&lt;/div&gt;
&lt;div id="box2" class="box"&gt;swing&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='fadeOut' scope='instance'>
        <description>Hide the matched elements by fading them to transparent.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='options' usage='required' type='PlainObject'>
            <description>A map of additional options to pass to the method.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all paragraphs to fade out, completing the animation within 600 milliseconds.
$( "p" ).click(function() {
  $( "p" ).fadeOut( "slow" );
});

  p {
    font-size: 150%;
    cursor: pointer;
  }

&lt;p&gt;
  If you click on this paragraph
  you'll see it just fade away.
&lt;/p&gt;
Fades out spans in one section that you click on.
$( "span" ).click(function() {
  $( this ).fadeOut( 1000, function() {
    $( "div" ).text( "'" + $( this ).text() + "' has faded!" );
    $( this ).remove();
  });
});
$( "span" ).hover(function() {
  $( this ).addClass( "hilite" );
}, function() {
  $( this ).removeClass( "hilite" );
});

  span {
    cursor: pointer;
  }
  span.hilite {
    background: yellow;
  }
  div {
    display: inline;
    color: red;
  }

&lt;h3&gt;Find the modifiers - &lt;div&gt;&lt;/div&gt;&lt;/h3&gt;
&lt;p&gt;
  If you &lt;span&gt;really&lt;/span&gt; want to go outside
  &lt;span&gt;in the cold&lt;/span&gt; then make sure to wear
  your &lt;span&gt;warm&lt;/span&gt; jacket given to you by
  your &lt;span&gt;favorite&lt;/span&gt; teacher.
&lt;/p&gt;
Fades out two divs, one with a "linear" easing and one with the default, "swing," easing.
$( "#btn1" ).click(function() {
  function complete() {
    $( "&lt;div&gt;" ).text( this.id ).appendTo( "#log" );
  }
  $( "#box1" ).fadeOut( 1600, "linear", complete );
  $( "#box2" ).fadeOut( 1600, complete );
});

$( "#btn2" ).click(function() {
  $( "div" ).show();
  $( "#log" ).empty();
});

  .box,
  button {
    float: left;
    margin: 5px 10px 5px 0;
  }
  .box {
    height: 80px;
    width: 80px;
    background: #090;
  }
  #log {
    clear: left;
  }

&lt;button id="btn1"&gt;fade out&lt;/button&gt;
&lt;button id="btn2"&gt;show&lt;/button&gt;

&lt;div id="log"&gt;&lt;/div&gt;

&lt;div id="box1" class="box"&gt;linear&lt;/div&gt;
&lt;div id="box2" class="box"&gt;swing&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='fadeOut' scope='instance'>
        <description>Hide the matched elements by fading them to transparent.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='easing' usage='optional' type='String'>
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all paragraphs to fade out, completing the animation within 600 milliseconds.
$( "p" ).click(function() {
  $( "p" ).fadeOut( "slow" );
});

  p {
    font-size: 150%;
    cursor: pointer;
  }

&lt;p&gt;
  If you click on this paragraph
  you'll see it just fade away.
&lt;/p&gt;
Fades out spans in one section that you click on.
$( "span" ).click(function() {
  $( this ).fadeOut( 1000, function() {
    $( "div" ).text( "'" + $( this ).text() + "' has faded!" );
    $( this ).remove();
  });
});
$( "span" ).hover(function() {
  $( this ).addClass( "hilite" );
}, function() {
  $( this ).removeClass( "hilite" );
});

  span {
    cursor: pointer;
  }
  span.hilite {
    background: yellow;
  }
  div {
    display: inline;
    color: red;
  }

&lt;h3&gt;Find the modifiers - &lt;div&gt;&lt;/div&gt;&lt;/h3&gt;
&lt;p&gt;
  If you &lt;span&gt;really&lt;/span&gt; want to go outside
  &lt;span&gt;in the cold&lt;/span&gt; then make sure to wear
  your &lt;span&gt;warm&lt;/span&gt; jacket given to you by
  your &lt;span&gt;favorite&lt;/span&gt; teacher.
&lt;/p&gt;
Fades out two divs, one with a "linear" easing and one with the default, "swing," easing.
$( "#btn1" ).click(function() {
  function complete() {
    $( "&lt;div&gt;" ).text( this.id ).appendTo( "#log" );
  }
  $( "#box1" ).fadeOut( 1600, "linear", complete );
  $( "#box2" ).fadeOut( 1600, complete );
});

$( "#btn2" ).click(function() {
  $( "div" ).show();
  $( "#log" ).empty();
});

  .box,
  button {
    float: left;
    margin: 5px 10px 5px 0;
  }
  .box {
    height: 80px;
    width: 80px;
    background: #090;
  }
  #log {
    clear: left;
  }

&lt;button id="btn1"&gt;fade out&lt;/button&gt;
&lt;button id="btn2"&gt;show&lt;/button&gt;

&lt;div id="log"&gt;&lt;/div&gt;

&lt;div id="box1" class="box"&gt;linear&lt;/div&gt;
&lt;div id="box2" class="box"&gt;swing&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='fadeTo' scope='instance'>
        <description>Adjust the opacity of the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='required' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='opacity' usage='required' type='Number'>
            <description>A number between 0 and 1 denoting the target opacity.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates first paragraph to fade to an opacity of 0.33 (33%, about one third visible), completing the animation within 600 milliseconds.
$( "p:first" ).click(function() {
  $( this ).fadeTo( "slow", 0.33 );
});

&lt;p&gt;
Click this paragraph to see it fade.
&lt;/p&gt;

&lt;p&gt;
Compare to this one that won't fade.
&lt;/p&gt;
Fade div to a random opacity on each click, completing the animation within 200 milliseconds.
$( "div" ).click(function() {
  $( this ).fadeTo( "fast", Math.random() );
});

  p {
    width: 80px;
    margin: 0;
    padding: 5px;
  }
  div {
    width: 40px;
    height: 40px;
    position: absolute;
  }
  #one {
    top: 0;
    left: 0;
    background: #f00;
  }
  #two {
    top: 20px;
    left: 20px;
    background: #0f0;
  }
  #three {
    top: 40px;
    left:40px;
    background:#00f;
  }

&lt;p&gt;And this is the library that John built...&lt;/p&gt;

&lt;div id="one"&gt;&lt;/div&gt;
&lt;div id="two"&gt;&lt;/div&gt;
&lt;div id="three"&gt;&lt;/div&gt;
Find the right answer! The fade will take 250 milliseconds and change various styles when it completes.
var getPos = function( n ) {
  return (Math.floor( n ) * 90) + "px";
};
$( "p" ).each(function( n ) {
  var r = Math.floor( Math.random() * 3 );
  var tmp = $( this ).text();
  $( this ).text( $( "p:eq(" + r + ")" ).text() );
  $( "p:eq(" + r + ")" ).text( tmp );
  $( this ).css( "left", getPos( n ) );
});
$( "div" )
  .each(function( n ) {
    $( this ).css( "left", getPos( n ) );
  })
  .css( "cursor", "pointer" )
  .click( function() {
    $( this ).fadeTo( 250, 0.25, function() {
      $( this )
        .css( "cursor", "" )
        .prev()
          .css({
            "font-weight": "bolder",
            "font-style": "italic"
          });
    });
  });

  div, p {
    width: 80px;
    height: 40px;
    top: 0;
    margin: 0;
    position: absolute;
    padding-top: 8px;
  }
  p {
    background: #fcc;
    text-align: center;
  }
  div {
    background: blue;
  }

&lt;p&gt;Wrong&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;Wrong&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;Right!&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='fadeTo' scope='instance'>
        <description>Adjust the opacity of the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='required' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='opacity' usage='required' type='Number'>
            <description>A number between 0 and 1 denoting the target opacity.</description>
          </parameter>
          <parameter name='easing' usage='optional' type='String'>
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates first paragraph to fade to an opacity of 0.33 (33%, about one third visible), completing the animation within 600 milliseconds.
$( "p:first" ).click(function() {
  $( this ).fadeTo( "slow", 0.33 );
});

&lt;p&gt;
Click this paragraph to see it fade.
&lt;/p&gt;

&lt;p&gt;
Compare to this one that won't fade.
&lt;/p&gt;
Fade div to a random opacity on each click, completing the animation within 200 milliseconds.
$( "div" ).click(function() {
  $( this ).fadeTo( "fast", Math.random() );
});

  p {
    width: 80px;
    margin: 0;
    padding: 5px;
  }
  div {
    width: 40px;
    height: 40px;
    position: absolute;
  }
  #one {
    top: 0;
    left: 0;
    background: #f00;
  }
  #two {
    top: 20px;
    left: 20px;
    background: #0f0;
  }
  #three {
    top: 40px;
    left:40px;
    background:#00f;
  }

&lt;p&gt;And this is the library that John built...&lt;/p&gt;

&lt;div id="one"&gt;&lt;/div&gt;
&lt;div id="two"&gt;&lt;/div&gt;
&lt;div id="three"&gt;&lt;/div&gt;
Find the right answer! The fade will take 250 milliseconds and change various styles when it completes.
var getPos = function( n ) {
  return (Math.floor( n ) * 90) + "px";
};
$( "p" ).each(function( n ) {
  var r = Math.floor( Math.random() * 3 );
  var tmp = $( this ).text();
  $( this ).text( $( "p:eq(" + r + ")" ).text() );
  $( "p:eq(" + r + ")" ).text( tmp );
  $( this ).css( "left", getPos( n ) );
});
$( "div" )
  .each(function( n ) {
    $( this ).css( "left", getPos( n ) );
  })
  .css( "cursor", "pointer" )
  .click( function() {
    $( this ).fadeTo( 250, 0.25, function() {
      $( this )
        .css( "cursor", "" )
        .prev()
          .css({
            "font-weight": "bolder",
            "font-style": "italic"
          });
    });
  });

  div, p {
    width: 80px;
    height: 40px;
    top: 0;
    margin: 0;
    position: absolute;
    padding-top: 8px;
  }
  p {
    background: #fcc;
    text-align: center;
  }
  div {
    background: blue;
  }

&lt;p&gt;Wrong&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;Wrong&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;Right!&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='fadeToggle' scope='instance'>
        <description>Display or hide the matched elements by animating their opacity.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='easing' usage='optional' type='String'>
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Fades first paragraph in or out, completing the animation within 600 milliseconds and using a linear easing. Fades last paragraph in or out for 200 milliseconds, inserting a "finished" message upon completion. 
$( "button:first" ).click(function() {
  $( "p:first" ).fadeToggle( "slow", "linear" );
});
$( "button:last" ).click(function() {
  $( "p:last" ).fadeToggle( "fast", function() {
    $( "#log" ).append( "&lt;div&gt;finished&lt;/div&gt;" );
  });
});

&lt;button&gt;fadeToggle p1&lt;/button&gt;
&lt;button&gt;fadeToggle p2&lt;/button&gt;
&lt;p&gt;This paragraph has a slow, linear fade.&lt;/p&gt;
&lt;p&gt;This paragraph has a fast animation.&lt;/p&gt;
&lt;div id="log"&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='fadeToggle' scope='instance'>
        <description>Display or hide the matched elements by animating their opacity.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='options' usage='required' type='PlainObject'>
            <description>A map of additional options to pass to the method.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Fades first paragraph in or out, completing the animation within 600 milliseconds and using a linear easing. Fades last paragraph in or out for 200 milliseconds, inserting a "finished" message upon completion. 
$( "button:first" ).click(function() {
  $( "p:first" ).fadeToggle( "slow", "linear" );
});
$( "button:last" ).click(function() {
  $( "p:last" ).fadeToggle( "fast", function() {
    $( "#log" ).append( "&lt;div&gt;finished&lt;/div&gt;" );
  });
});

&lt;button&gt;fadeToggle p1&lt;/button&gt;
&lt;button&gt;fadeToggle p2&lt;/button&gt;
&lt;p&gt;This paragraph has a slow, linear fade.&lt;/p&gt;
&lt;p&gt;This paragraph has a fast animation.&lt;/p&gt;
&lt;div id="log"&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='filter' scope='instance'>
        <description>Reduce the set of matched elements to those that match the selector or pass the function's test. </description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='Selector'>
            <description>A string containing a selector expression to match the current set of elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the color of all divs; then add a border to those with a "middle" class.
$( "div" )
  .css( "background", "#c8ebcc" )
  .filter( ".middle" )
    .css( "border-color", "red" );

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 2px white solid;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Change the color of all divs; then add a border to the second one (index == 1) and the div with an id of "fourth."
$( "div" )
  .css( "background", "#b4b0da" )
  .filter(function( index ) {
    return index === 1 || $( this ).attr( "id" ) === "fourth";
  })
    .css( "border", "3px double red" );

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 3px white solid;
  }

&lt;div id="first"&gt;&lt;/div&gt;
&lt;div id="second"&gt;&lt;/div&gt;
&lt;div id="third"&gt;&lt;/div&gt;
&lt;div id="fourth"&gt;&lt;/div&gt;
&lt;div id="fifth"&gt;&lt;/div&gt;
&lt;div id="sixth"&gt;&lt;/div&gt;
Select all divs and filter the selection with a DOM element, keeping only the one with an id of "unique".
$( "div" ).filter( document.getElementById( "unique" ) );
Select all divs and filter the selection with a jQuery object, keeping only the one with an id of "unique".
$( "div" ).filter( $( "#unique" ) );
</example>
        </examples>
      </method>
      <method name='filter' scope='instance'>
        <description>Reduce the set of matched elements to those that match the selector or pass the function's test. </description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index)' usage='required' type='Function'>
            <description>A function used as a test for each element in the set. this is the current DOM element.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the color of all divs; then add a border to those with a "middle" class.
$( "div" )
  .css( "background", "#c8ebcc" )
  .filter( ".middle" )
    .css( "border-color", "red" );

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 2px white solid;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Change the color of all divs; then add a border to the second one (index == 1) and the div with an id of "fourth."
$( "div" )
  .css( "background", "#b4b0da" )
  .filter(function( index ) {
    return index === 1 || $( this ).attr( "id" ) === "fourth";
  })
    .css( "border", "3px double red" );

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 3px white solid;
  }

&lt;div id="first"&gt;&lt;/div&gt;
&lt;div id="second"&gt;&lt;/div&gt;
&lt;div id="third"&gt;&lt;/div&gt;
&lt;div id="fourth"&gt;&lt;/div&gt;
&lt;div id="fifth"&gt;&lt;/div&gt;
&lt;div id="sixth"&gt;&lt;/div&gt;
Select all divs and filter the selection with a DOM element, keeping only the one with an id of "unique".
$( "div" ).filter( document.getElementById( "unique" ) );
Select all divs and filter the selection with a jQuery object, keeping only the one with an id of "unique".
$( "div" ).filter( $( "#unique" ) );
</example>
        </examples>
      </method>
      <method name='filter' scope='instance'>
        <description>Reduce the set of matched elements to those that match the selector or pass the function's test. </description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='elements' usage='required' type='Element'>
            <description>One or more DOM elements to match the current set of elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the color of all divs; then add a border to those with a "middle" class.
$( "div" )
  .css( "background", "#c8ebcc" )
  .filter( ".middle" )
    .css( "border-color", "red" );

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 2px white solid;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Change the color of all divs; then add a border to the second one (index == 1) and the div with an id of "fourth."
$( "div" )
  .css( "background", "#b4b0da" )
  .filter(function( index ) {
    return index === 1 || $( this ).attr( "id" ) === "fourth";
  })
    .css( "border", "3px double red" );

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 3px white solid;
  }

&lt;div id="first"&gt;&lt;/div&gt;
&lt;div id="second"&gt;&lt;/div&gt;
&lt;div id="third"&gt;&lt;/div&gt;
&lt;div id="fourth"&gt;&lt;/div&gt;
&lt;div id="fifth"&gt;&lt;/div&gt;
&lt;div id="sixth"&gt;&lt;/div&gt;
Select all divs and filter the selection with a DOM element, keeping only the one with an id of "unique".
$( "div" ).filter( document.getElementById( "unique" ) );
Select all divs and filter the selection with a jQuery object, keeping only the one with an id of "unique".
$( "div" ).filter( $( "#unique" ) );
</example>
        </examples>
      </method>
      <method name='filter' scope='instance'>
        <description>Reduce the set of matched elements to those that match the selector or pass the function's test. </description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='jQuery object' usage='required' type='Object'>
            <description>An existing jQuery object to match the current set of elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the color of all divs; then add a border to those with a "middle" class.
$( "div" )
  .css( "background", "#c8ebcc" )
  .filter( ".middle" )
    .css( "border-color", "red" );

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 2px white solid;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div class="middle"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Change the color of all divs; then add a border to the second one (index == 1) and the div with an id of "fourth."
$( "div" )
  .css( "background", "#b4b0da" )
  .filter(function( index ) {
    return index === 1 || $( this ).attr( "id" ) === "fourth";
  })
    .css( "border", "3px double red" );

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 3px white solid;
  }

&lt;div id="first"&gt;&lt;/div&gt;
&lt;div id="second"&gt;&lt;/div&gt;
&lt;div id="third"&gt;&lt;/div&gt;
&lt;div id="fourth"&gt;&lt;/div&gt;
&lt;div id="fifth"&gt;&lt;/div&gt;
&lt;div id="sixth"&gt;&lt;/div&gt;
Select all divs and filter the selection with a DOM element, keeping only the one with an id of "unique".
$( "div" ).filter( document.getElementById( "unique" ) );
Select all divs and filter the selection with a jQuery object, keeping only the one with an id of "unique".
$( "div" ).filter( $( "#unique" ) );
</example>
        </examples>
      </method>
      <method name='find' scope='instance'>
        <description>Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Starts with all paragraphs and searches for descendant span elements, same as $( "p span" )
$( "p" ).find( "span" ).css( "color", "red" );

&lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;, how are you?&lt;/p&gt;
&lt;p&gt;Me? I'm &lt;span&gt;good&lt;/span&gt;.&lt;/p&gt;
A selection using a jQuery collection of all span tags. Only spans within p tags are changed to red while others are left blue.
  span {
    color: blue;
  }

var spans = $( "span" );
$( "p" ).find( spans ).css( "color", "red" );

&lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;, how are you?&lt;/p&gt;
&lt;p&gt;Me? I'm &lt;span&gt;good&lt;/span&gt;.&lt;/p&gt;
&lt;div&gt;Did you &lt;span&gt;eat&lt;/span&gt; yet?&lt;/div&gt;
Add spans around each word then add a hover and italicize words with the letter t.
var newText = $( "p" ).text().split( " " ).join( "&lt;/span&gt; &lt;span&gt;" );
newText = "&lt;span&gt;" + newText + "&lt;/span&gt;";

$( "p" )
  .html( newText )
  .find( "span" )
    .hover(function() {
      $( this ).addClass( "hilite" );
    }, function() {
      $( this ).removeClass( "hilite" );
    })
  .end()
  .find( ":contains('t')" )
    .css({
      "font-style": "italic",
      "font-weight": "bolder"
    });

  p {
    font-size: 20px;
    width: 200px;
    color: blue;
    font-weight: bold;
    margin: 0 10px;
  }
  .hilite {
    background: yellow;
  }

&lt;p&gt;
  When the day is short
  find that which matters to you
  or stop believing
&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='find' scope='instance'>
        <description>Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='jQuery object' usage='required' type='Object'>
            <description>A jQuery object to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Starts with all paragraphs and searches for descendant span elements, same as $( "p span" )
$( "p" ).find( "span" ).css( "color", "red" );

&lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;, how are you?&lt;/p&gt;
&lt;p&gt;Me? I'm &lt;span&gt;good&lt;/span&gt;.&lt;/p&gt;
A selection using a jQuery collection of all span tags. Only spans within p tags are changed to red while others are left blue.
  span {
    color: blue;
  }

var spans = $( "span" );
$( "p" ).find( spans ).css( "color", "red" );

&lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;, how are you?&lt;/p&gt;
&lt;p&gt;Me? I'm &lt;span&gt;good&lt;/span&gt;.&lt;/p&gt;
&lt;div&gt;Did you &lt;span&gt;eat&lt;/span&gt; yet?&lt;/div&gt;
Add spans around each word then add a hover and italicize words with the letter t.
var newText = $( "p" ).text().split( " " ).join( "&lt;/span&gt; &lt;span&gt;" );
newText = "&lt;span&gt;" + newText + "&lt;/span&gt;";

$( "p" )
  .html( newText )
  .find( "span" )
    .hover(function() {
      $( this ).addClass( "hilite" );
    }, function() {
      $( this ).removeClass( "hilite" );
    })
  .end()
  .find( ":contains('t')" )
    .css({
      "font-style": "italic",
      "font-weight": "bolder"
    });

  p {
    font-size: 20px;
    width: 200px;
    color: blue;
    font-weight: bold;
    margin: 0 10px;
  }
  .hilite {
    background: yellow;
  }

&lt;p&gt;
  When the day is short
  find that which matters to you
  or stop believing
&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='find' scope='instance'>
        <description>Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='element' usage='required' type='Element'>
            <description>An element to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Starts with all paragraphs and searches for descendant span elements, same as $( "p span" )
$( "p" ).find( "span" ).css( "color", "red" );

&lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;, how are you?&lt;/p&gt;
&lt;p&gt;Me? I'm &lt;span&gt;good&lt;/span&gt;.&lt;/p&gt;
A selection using a jQuery collection of all span tags. Only spans within p tags are changed to red while others are left blue.
  span {
    color: blue;
  }

var spans = $( "span" );
$( "p" ).find( spans ).css( "color", "red" );

&lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;, how are you?&lt;/p&gt;
&lt;p&gt;Me? I'm &lt;span&gt;good&lt;/span&gt;.&lt;/p&gt;
&lt;div&gt;Did you &lt;span&gt;eat&lt;/span&gt; yet?&lt;/div&gt;
Add spans around each word then add a hover and italicize words with the letter t.
var newText = $( "p" ).text().split( " " ).join( "&lt;/span&gt; &lt;span&gt;" );
newText = "&lt;span&gt;" + newText + "&lt;/span&gt;";

$( "p" )
  .html( newText )
  .find( "span" )
    .hover(function() {
      $( this ).addClass( "hilite" );
    }, function() {
      $( this ).removeClass( "hilite" );
    })
  .end()
  .find( ":contains('t')" )
    .css({
      "font-style": "italic",
      "font-weight": "bolder"
    });

  p {
    font-size: 20px;
    width: 200px;
    color: blue;
    font-weight: bold;
    margin: 0 10px;
  }
  .hilite {
    background: yellow;
  }

&lt;p&gt;
  When the day is short
  find that which matters to you
  or stop believing
&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='first' scope='instance'>
        <description>Reduce the set of matched elements to the first in the set.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Highlight the first span in a paragraph.
  .highlight{
    background-color: yellow
  }

$( "p span" ).first().addClass( "highlight" );

&lt;p&gt;
  &lt;span&gt;Look:&lt;/span&gt;
  &lt;span&gt;This is some text in a paragraph.&lt;/span&gt;
  &lt;span&gt;This is a note about it.&lt;/span&gt;
&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='focus' scope='instance'>
        <description>Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Fire focus.
  span {
    display: none;
  }

$( "input" ).focus(function() {
  $( this ).next( "span" ).css( "display", "inline" ).fadeOut( 1000 );
});

&lt;p&gt;&lt;input type="text"&gt; &lt;span&gt;focus fire&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;input type="password"&gt; &lt;span&gt;focus fire&lt;/span&gt;&lt;/p&gt;
To stop people from writing in text input boxes, try:
$( "input[type=text]" ).focus(function() {
  $( this ).blur();
});
To focus on a login input box with id 'login' on page startup, try:
$( document ).ready(function() {
  $( "#login" ).focus();
});
</example>
        </examples>
      </method>
      <method name='focus' scope='instance'>
        <description>Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='Object'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Fire focus.
  span {
    display: none;
  }

$( "input" ).focus(function() {
  $( this ).next( "span" ).css( "display", "inline" ).fadeOut( 1000 );
});

&lt;p&gt;&lt;input type="text"&gt; &lt;span&gt;focus fire&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;input type="password"&gt; &lt;span&gt;focus fire&lt;/span&gt;&lt;/p&gt;
To stop people from writing in text input boxes, try:
$( "input[type=text]" ).focus(function() {
  $( this ).blur();
});
To focus on a login input box with id 'login' on page startup, try:
$( document ).ready(function() {
  $( "#login" ).focus();
});
</example>
        </examples>
      </method>
      <method name='focus' scope='instance'>
        <description>Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Fire focus.
  span {
    display: none;
  }

$( "input" ).focus(function() {
  $( this ).next( "span" ).css( "display", "inline" ).fadeOut( 1000 );
});

&lt;p&gt;&lt;input type="text"&gt; &lt;span&gt;focus fire&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;input type="password"&gt; &lt;span&gt;focus fire&lt;/span&gt;&lt;/p&gt;
To stop people from writing in text input boxes, try:
$( "input[type=text]" ).focus(function() {
  $( this ).blur();
});
To focus on a login input box with id 'login' on page startup, try:
$( document ).ready(function() {
  $( "#login" ).focus();
});
</example>
        </examples>
      </method>
      <method name='focusin' scope='instance'>
        <description>Bind an event handler to the "focusin" event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Watch for a focus to occur within the paragraphs on the page.
  span {
    display: none;
  }

$( "p" ).focusin(function() {
  $( this ).find( "span" ).css( "display", "inline" ).fadeOut( 1000 );
});

&lt;p&gt;&lt;input type="text"&gt; &lt;span&gt;focusin fire&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;input type="password"&gt; &lt;span&gt;focusin fire&lt;/span&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='focusin' scope='instance'>
        <description>Bind an event handler to the "focusin" event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='Object'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Watch for a focus to occur within the paragraphs on the page.
  span {
    display: none;
  }

$( "p" ).focusin(function() {
  $( this ).find( "span" ).css( "display", "inline" ).fadeOut( 1000 );
});

&lt;p&gt;&lt;input type="text"&gt; &lt;span&gt;focusin fire&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;input type="password"&gt; &lt;span&gt;focusin fire&lt;/span&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='focusout' scope='instance'>
        <description>Bind an event handler to the "focusout" JavaScript event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Watch for a loss of focus to occur inside paragraphs and note the difference between the focusout count and the blur count. (The blur count does not change because those events do not bubble.)
  .inputs {
    float: left;
    margin-right: 1em;
  }
  .inputs p {
    margin-top: 0;
  }

var focus = 0,
  blur = 0;
$( "p" )
  .focusout(function() {
    focus++;
    $( "#focus-count" ).text( "focusout fired: " + focus + "x" );
  })
  .blur(function() {
    blur++;
    $( "#blur-count" ).text( "blur fired: " + blur + "x" );
  });

&lt;div class="inputs"&gt;
  &lt;p&gt;
    &lt;input type="text"&gt;&lt;br&gt;
    &lt;input type="text"&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;input type="password"&gt;
  &lt;/p&gt;
&lt;/div&gt;
&lt;div id="focus-count"&gt;focusout fire&lt;/div&gt;
&lt;div id="blur-count"&gt;blur fire&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='focusout' scope='instance'>
        <description>Bind an event handler to the "focusout" JavaScript event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='Object'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Watch for a loss of focus to occur inside paragraphs and note the difference between the focusout count and the blur count. (The blur count does not change because those events do not bubble.)
  .inputs {
    float: left;
    margin-right: 1em;
  }
  .inputs p {
    margin-top: 0;
  }

var focus = 0,
  blur = 0;
$( "p" )
  .focusout(function() {
    focus++;
    $( "#focus-count" ).text( "focusout fired: " + focus + "x" );
  })
  .blur(function() {
    blur++;
    $( "#blur-count" ).text( "blur fired: " + blur + "x" );
  });

&lt;div class="inputs"&gt;
  &lt;p&gt;
    &lt;input type="text"&gt;&lt;br&gt;
    &lt;input type="text"&gt;
  &lt;/p&gt;
  &lt;p&gt;
    &lt;input type="password"&gt;
  &lt;/p&gt;
&lt;/div&gt;
&lt;div id="focus-count"&gt;focusout fire&lt;/div&gt;
&lt;div id="blur-count"&gt;blur fire&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='get' scope='instance'>
        <description>Retrieve one of the elements matched by the jQuery object.</description>
        <return-types>
          <return-type type='Element' />
        </return-types>
        <parameters>
          <parameter name='index' usage='required' type='Integer'>
            <description>A zero-based integer indicating which element to retrieve.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Display the tag name of the click element.
$( "*", document.body ).click(function( event ) {
  event.stopPropagation();
  var domElement = $( this ).get( 0 );
  $( "span:first" ).text( "Clicked on - " + domElement.nodeName );
});

  span {
    color: red;
  }
  div {
    background: yellow;
  }

&lt;span&gt;&amp;nbsp;&lt;/span&gt;
&lt;p&gt;In this paragraph is an &lt;span&gt;important&lt;/span&gt; section&lt;/p&gt;
&lt;div&gt;&lt;input type="text"&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='get' scope='instance'>
        <description>Retrieve the elements matched by the jQuery object.</description>
        <return-types>
          <return-type type='Array' />
        </return-types>
        <parameters />
        <examples>
          <example>Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.
function display( divs ) {
  var a = [];
  for ( var i = 0; i &lt; divs.length; i++ ) {
    a.push( divs[ i ].innerHTML );
  }
  $( "span" ).text( a.join(" ") );
}
display( $( "div" ).get().reverse() );

  span {
    color: red;
  }

Reversed - &lt;span&gt;&lt;/span&gt;

&lt;div&gt;One&lt;/div&gt;
&lt;div&gt;Two&lt;/div&gt;
&lt;div&gt;Three&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='has' scope='instance'>
        <description>Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='String'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Check if an element is inside another.
$( "ul" ).append( "&lt;li&gt;" +
  ( $( "ul" ).has( "li" ).length ? "Yes" : "No" ) +
  "&lt;/li&gt;" );
$( "ul" ).has( "li" ).addClass( "full" );

  .full {
    border: 1px solid red;
  }

&lt;ul&gt;&lt;li&gt;Does the UL contain an LI?&lt;/li&gt;&lt;/ul&gt;
</example>
        </examples>
      </method>
      <method name='has' scope='instance'>
        <description>Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='contained' usage='required' type='Element'>
            <description>A DOM element to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Check if an element is inside another.
$( "ul" ).append( "&lt;li&gt;" +
  ( $( "ul" ).has( "li" ).length ? "Yes" : "No" ) +
  "&lt;/li&gt;" );
$( "ul" ).has( "li" ).addClass( "full" );

  .full {
    border: 1px solid red;
  }

&lt;ul&gt;&lt;li&gt;Does the UL contain an LI?&lt;/li&gt;&lt;/ul&gt;
</example>
        </examples>
      </method>
      <method name='hasClass' scope='instance'>
        <description>Determine whether any of the matched elements are assigned the given class.</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters>
          <parameter name='className' usage='required' type='String'>
            <description>The class name to search for.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Looks for the paragraph that contains 'selected' as a class.
$( "#result1" ).append( $( "p:first" ).hasClass( "selected" ).toString() );
$( "#result2" ).append( $( "p:last" ).hasClass( "selected" ).toString() );
$( "#result3" ).append( $( "p" ).hasClass( "selected" ).toString() ) ;

  p {
    margin: 8px;
    font-size: 16px;
  }
  .selected {
    color: red;
  }

&lt;p&gt;This paragraph is black and is the first paragraph.&lt;/p&gt;
&lt;p class="selected"&gt;This paragraph is red and is the second paragraph.&lt;/p&gt;
&lt;div id="result1"&gt;First paragraph has selected class: &lt;/div&gt;
&lt;div id="result2"&gt;Second paragraph has selected class: &lt;/div&gt;
&lt;div id="result3"&gt;At least one paragraph has selected class: &lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='height' scope='instance'>
        <description>Get the current computed height for the first element in the set of matched elements.</description>
        <return-types>
          <return-type type='Number' />
        </return-types>
        <parameters />
        <examples>
          <example>Show various heights.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.
function showHeight( element, height ) {
  $( "div" ).text( "The height for the " + element + " is " + height + "px." );
}
$( "#getp" ).click(function() {
  showHeight( "paragraph", $( "p" ).height() );
});
$( "#getd" ).click(function() {
  showHeight( "document", $( document ).height() );
});
$( "#getw" ).click(function() {
  showHeight( "window", $( window ).height() );
});

  body {
    background: yellow;
  }
  button {
    font-size: 12px;
    margin: 2px;
  }
  p {
    width: 150px;
    border: 1px red solid;
  }
  div {
    color: red;
    font-weight: bold;
  }

&lt;button id="getp"&gt;Get Paragraph Height&lt;/button&gt;
&lt;button id="getd"&gt;Get Document Height&lt;/button&gt;
&lt;button id="getw"&gt;Get Window Height&lt;/button&gt;

&lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;p&gt;
  Sample paragraph to test height
&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='height' scope='instance'>
        <description>Set the CSS height of every matched element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='value' usage='required' type=''>
            <description>An integer representing the number of pixels, or an integer with an optional unit of measure appended (as a string).</description>
          </parameter>
        </parameters>
        <examples>
          <example>To set the height of each div on click to 30px plus a color change.
$( "div" ).one( "click", function() {
  $( this ).height( 30 ).css({
    cursor: "auto",
    backgroundColor: "green"
  });
});

  div {
    width: 50px;
    height: 70px;
    float: left;
    margin: 5px;
    background: rgb(255,140,0);
    cursor: pointer;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='height' scope='instance'>
        <description>Set the CSS height of every matched element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index, height)' usage='required' type='Function'>
            <description>A function returning the height to set. Receives the index position of the element in the set and the old height as arguments. Within the function, this refers to the current element in the set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To set the height of each div on click to 30px plus a color change.
$( "div" ).one( "click", function() {
  $( this ).height( 30 ).css({
    cursor: "auto",
    backgroundColor: "green"
  });
});

  div {
    width: 50px;
    height: 70px;
    float: left;
    margin: 5px;
    background: rgb(255,140,0);
    cursor: pointer;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='hide' scope='instance'>
        <description>Hide the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Hides all paragraphs then the link on click.
$( "p" ).hide();
$( "a" ).click(function( event ) {
  event.preventDefault();
  $( this ).hide();
});

&lt;p&gt;Hello&lt;/p&gt;
&lt;a href="#"&gt;Click to hide me too&lt;/a&gt;
&lt;p&gt;Here is another paragraph&lt;/p&gt;
Animates all shown paragraphs to hide slowly, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).hide( "slow" );
});

  p {
    background: #dad;
    font-weight: bold;
  }

&lt;button&gt;Hide 'em&lt;/button&gt;
&lt;p&gt;Hiya&lt;/p&gt;
&lt;p&gt;Such interesting text, eh?&lt;/p&gt;
Animates all spans (words in this case) to hide fastly, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.
$( "#hider" ).click(function() {
  $( "span:last-child" ).hide( "fast", function() {
    // Use arguments.callee so we don't need a named function
    $( this ).prev().hide( "fast", arguments.callee );
  });
});
$( "#shower" ).click(function() {
  $( "span" ).show( 2000 );
});

  span {
    background: #def3ca;
    padding: 3px;
    float: left;
  }

&lt;button id="hider"&gt;Hide&lt;/button&gt;
&lt;button id="shower"&gt;Show&lt;/button&gt;
&lt;div&gt;
  &lt;span&gt;Once&lt;/span&gt; &lt;span&gt;upon&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;
  &lt;span&gt;time&lt;/span&gt; &lt;span&gt;there&lt;/span&gt; &lt;span&gt;were&lt;/span&gt;
  &lt;span&gt;three&lt;/span&gt; &lt;span&gt;programmers...&lt;/span&gt;
&lt;/div&gt;
Hides the divs when clicked over 2 seconds, then removes the div element when its hidden.  Try clicking on more than one box at a time.
for ( var i = 0; i &lt; 5; i++ ) {
  $( "&lt;div&gt;" ).appendTo( document.body );
}
$( "div" ).click(function() {
  $( this ).hide( 2000, function() {
    $( this ).remove();
  });
});

  div {
    background: #ece023;
    width: 30px;
    height: 40px;
    margin: 2px;
    float: left;
  }

&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='hide' scope='instance'>
        <description>Hide the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Hides all paragraphs then the link on click.
$( "p" ).hide();
$( "a" ).click(function( event ) {
  event.preventDefault();
  $( this ).hide();
});

&lt;p&gt;Hello&lt;/p&gt;
&lt;a href="#"&gt;Click to hide me too&lt;/a&gt;
&lt;p&gt;Here is another paragraph&lt;/p&gt;
Animates all shown paragraphs to hide slowly, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).hide( "slow" );
});

  p {
    background: #dad;
    font-weight: bold;
  }

&lt;button&gt;Hide 'em&lt;/button&gt;
&lt;p&gt;Hiya&lt;/p&gt;
&lt;p&gt;Such interesting text, eh?&lt;/p&gt;
Animates all spans (words in this case) to hide fastly, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.
$( "#hider" ).click(function() {
  $( "span:last-child" ).hide( "fast", function() {
    // Use arguments.callee so we don't need a named function
    $( this ).prev().hide( "fast", arguments.callee );
  });
});
$( "#shower" ).click(function() {
  $( "span" ).show( 2000 );
});

  span {
    background: #def3ca;
    padding: 3px;
    float: left;
  }

&lt;button id="hider"&gt;Hide&lt;/button&gt;
&lt;button id="shower"&gt;Show&lt;/button&gt;
&lt;div&gt;
  &lt;span&gt;Once&lt;/span&gt; &lt;span&gt;upon&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;
  &lt;span&gt;time&lt;/span&gt; &lt;span&gt;there&lt;/span&gt; &lt;span&gt;were&lt;/span&gt;
  &lt;span&gt;three&lt;/span&gt; &lt;span&gt;programmers...&lt;/span&gt;
&lt;/div&gt;
Hides the divs when clicked over 2 seconds, then removes the div element when its hidden.  Try clicking on more than one box at a time.
for ( var i = 0; i &lt; 5; i++ ) {
  $( "&lt;div&gt;" ).appendTo( document.body );
}
$( "div" ).click(function() {
  $( this ).hide( 2000, function() {
    $( this ).remove();
  });
});

  div {
    background: #ece023;
    width: 30px;
    height: 40px;
    margin: 2px;
    float: left;
  }

&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='hide' scope='instance'>
        <description>Hide the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='options' usage='required' type='PlainObject'>
            <description>A map of additional options to pass to the method.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Hides all paragraphs then the link on click.
$( "p" ).hide();
$( "a" ).click(function( event ) {
  event.preventDefault();
  $( this ).hide();
});

&lt;p&gt;Hello&lt;/p&gt;
&lt;a href="#"&gt;Click to hide me too&lt;/a&gt;
&lt;p&gt;Here is another paragraph&lt;/p&gt;
Animates all shown paragraphs to hide slowly, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).hide( "slow" );
});

  p {
    background: #dad;
    font-weight: bold;
  }

&lt;button&gt;Hide 'em&lt;/button&gt;
&lt;p&gt;Hiya&lt;/p&gt;
&lt;p&gt;Such interesting text, eh?&lt;/p&gt;
Animates all spans (words in this case) to hide fastly, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.
$( "#hider" ).click(function() {
  $( "span:last-child" ).hide( "fast", function() {
    // Use arguments.callee so we don't need a named function
    $( this ).prev().hide( "fast", arguments.callee );
  });
});
$( "#shower" ).click(function() {
  $( "span" ).show( 2000 );
});

  span {
    background: #def3ca;
    padding: 3px;
    float: left;
  }

&lt;button id="hider"&gt;Hide&lt;/button&gt;
&lt;button id="shower"&gt;Show&lt;/button&gt;
&lt;div&gt;
  &lt;span&gt;Once&lt;/span&gt; &lt;span&gt;upon&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;
  &lt;span&gt;time&lt;/span&gt; &lt;span&gt;there&lt;/span&gt; &lt;span&gt;were&lt;/span&gt;
  &lt;span&gt;three&lt;/span&gt; &lt;span&gt;programmers...&lt;/span&gt;
&lt;/div&gt;
Hides the divs when clicked over 2 seconds, then removes the div element when its hidden.  Try clicking on more than one box at a time.
for ( var i = 0; i &lt; 5; i++ ) {
  $( "&lt;div&gt;" ).appendTo( document.body );
}
$( "div" ).click(function() {
  $( this ).hide( 2000, function() {
    $( this ).remove();
  });
});

  div {
    background: #ece023;
    width: 30px;
    height: 40px;
    margin: 2px;
    float: left;
  }

&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='hide' scope='instance'>
        <description>Hide the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='required' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='easing' usage='optional' type='String'>
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Hides all paragraphs then the link on click.
$( "p" ).hide();
$( "a" ).click(function( event ) {
  event.preventDefault();
  $( this ).hide();
});

&lt;p&gt;Hello&lt;/p&gt;
&lt;a href="#"&gt;Click to hide me too&lt;/a&gt;
&lt;p&gt;Here is another paragraph&lt;/p&gt;
Animates all shown paragraphs to hide slowly, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).hide( "slow" );
});

  p {
    background: #dad;
    font-weight: bold;
  }

&lt;button&gt;Hide 'em&lt;/button&gt;
&lt;p&gt;Hiya&lt;/p&gt;
&lt;p&gt;Such interesting text, eh?&lt;/p&gt;
Animates all spans (words in this case) to hide fastly, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.
$( "#hider" ).click(function() {
  $( "span:last-child" ).hide( "fast", function() {
    // Use arguments.callee so we don't need a named function
    $( this ).prev().hide( "fast", arguments.callee );
  });
});
$( "#shower" ).click(function() {
  $( "span" ).show( 2000 );
});

  span {
    background: #def3ca;
    padding: 3px;
    float: left;
  }

&lt;button id="hider"&gt;Hide&lt;/button&gt;
&lt;button id="shower"&gt;Show&lt;/button&gt;
&lt;div&gt;
  &lt;span&gt;Once&lt;/span&gt; &lt;span&gt;upon&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;
  &lt;span&gt;time&lt;/span&gt; &lt;span&gt;there&lt;/span&gt; &lt;span&gt;were&lt;/span&gt;
  &lt;span&gt;three&lt;/span&gt; &lt;span&gt;programmers...&lt;/span&gt;
&lt;/div&gt;
Hides the divs when clicked over 2 seconds, then removes the div element when its hidden.  Try clicking on more than one box at a time.
for ( var i = 0; i &lt; 5; i++ ) {
  $( "&lt;div&gt;" ).appendTo( document.body );
}
$( "div" ).click(function() {
  $( this ).hide( 2000, function() {
    $( this ).remove();
  });
});

  div {
    background: #ece023;
    width: 30px;
    height: 40px;
    margin: 2px;
    float: left;
  }

&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='hover' scope='instance'>
        <description>Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handlerIn(eventObject)' usage='required' type='Function'>
            <description>A function to execute when the mouse pointer enters the element.</description>
          </parameter>
          <parameter name='handlerOut(eventObject)' usage='required' type='Function'>
            <description>A function to execute when the mouse pointer leaves the element.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To add a special style to list items that are being hovered over, try:
$( "li" ).hover(
  function() {
    $( this ).append( $( "&lt;span&gt; ***&lt;/span&gt;" ) );
  }, function() {
    $( this ).find( "span:last" ).remove();
  }
);

$( "li.fade" ).hover(function() {
  $( this ).fadeOut( 100 );
  $( this ).fadeIn( 500 );
});

  ul {
    margin-left: 20px;
    color: blue;
  }
  li {
    cursor: default;
  }
  span {
    color: red;
  }

&lt;ul&gt;
  &lt;li&gt;Milk&lt;/li&gt;
  &lt;li&gt;Bread&lt;/li&gt;
  &lt;li class="fade"&gt;Chips&lt;/li&gt;
  &lt;li class="fade"&gt;Socks&lt;/li&gt;
&lt;/ul&gt;
To add a special style to table cells that are being hovered over, try:
$( "td" ).hover(
  function() {
    $( this ).addClass( "hover" );
  }, function() {
    $( this ).removeClass( "hover" );
  }
);
To unbind the above example use:
$( "td" ).off( "mouseenter mouseleave" );
</example>
        </examples>
      </method>
      <method name='hover' scope='instance'>
        <description>Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handlerInOut(eventObject)' usage='required' type='Function'>
            <description>A function to execute when the mouse pointer enters or leaves the element.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Slide the next sibling LI up or down on hover, and toggle a class.
$( "li" )
  .filter( ":odd" )
    .hide()
  .end()
  .filter( ":even" )
    .hover(function() {
      $( this )
        .toggleClass( "active" )
        .next()
          .stop( true, true )
          .slideToggle();
    });

  ul {
    margin-left: 20px;
    color: blue;
  }
  li {
    cursor: default;
  }
  li.active {
    background: black;
    color: white;
  }
  span {
    color:red;
  }

&lt;ul&gt;
  &lt;li&gt;Milk&lt;/li&gt;
  &lt;li&gt;White&lt;/li&gt;
  &lt;li&gt;Carrots&lt;/li&gt;
  &lt;li&gt;Orange&lt;/li&gt;
  &lt;li&gt;Broccoli&lt;/li&gt;
  &lt;li&gt;Green&lt;/li&gt;
&lt;/ul&gt;
</example>
        </examples>
      </method>
      <method name='html' scope='instance'>
        <description>Get the HTML contents of the first element in the set of matched elements.</description>
        <return-types>
          <return-type type='String' />
        </return-types>
        <parameters />
        <examples>
          <example>Click a paragraph to convert it from html to text.
$( "p" ).click(function() {
  var htmlString = $( this ).html();
  $( this ).text( htmlString );
});

  p {
    margin: 8px;
    font-size: 20px;
    color: blue;
    cursor: pointer;
  }
  b {
    text-decoration: underline;
  }
  button {
    cursor: pointer;
  }

&lt;p&gt;
  &lt;b&gt;Click&lt;/b&gt; to change the &lt;span id="tag"&gt;html&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
  to a &lt;span id="text"&gt;text&lt;/span&gt; node.
&lt;/p&gt;
&lt;p&gt;
  This &lt;button name="nada"&gt;button&lt;/button&gt; does nothing.
&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='html' scope='instance'>
        <description>Set the HTML contents of each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='htmlString' usage='required' type='htmlString'>
            <description>A string of HTML to set as the content of each matched element.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Add some html to each div.
$( "div" ).html( "&lt;span class='red'&gt;Hello &lt;b&gt;Again&lt;/b&gt;&lt;/span&gt;" );

  .red {
    color: red;
  }

&lt;span&gt;Hello&lt;/span&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Add some html to each div then immediately do further manipulations to the inserted html.
$( "div" ).html( "&lt;b&gt;Wow!&lt;/b&gt; Such excitement..." );
$( "div b" )
  .append( document.createTextNode( "!!!" ) )
  .css( "color", "red" );

  div {
    color: blue;
    font-size: 18px;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='html' scope='instance'>
        <description>Set the HTML contents of each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index, oldhtml)' usage='required' type='Function'>
            <description>A function returning the HTML content to set. Receives the
          index position of the element in the set and the old HTML value as arguments.
          jQuery empties the element before calling the function;
          use the oldhtml argument to reference the previous content.
          Within the function, this refers to the current element in the set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Add some html to each div.
$( "div" ).html( "&lt;span class='red'&gt;Hello &lt;b&gt;Again&lt;/b&gt;&lt;/span&gt;" );

  .red {
    color: red;
  }

&lt;span&gt;Hello&lt;/span&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Add some html to each div then immediately do further manipulations to the inserted html.
$( "div" ).html( "&lt;b&gt;Wow!&lt;/b&gt; Such excitement..." );
$( "div b" )
  .append( document.createTextNode( "!!!" ) )
  .css( "color", "red" );

  div {
    color: blue;
    font-size: 18px;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='index' scope='instance'>
        <description>Search for a given element from among the matched elements.</description>
        <return-types>
          <return-type type='Number' />
        </return-types>
        <parameters />
        <examples>
          <example>On click, returns the index (zero-based) of that div in the page.
$( "div" ).click(function() {
  // `this` is the DOM element that was clicked
  var index = $( "div" ).index( this );
  $( "span" ).text( "That was div index #" + index );
});

  div {
    background: yellow;
    margin: 5px;
  }
  span {
    color: red;
  }

&lt;span&gt;Click a div!&lt;/span&gt;
&lt;div&gt;First div&lt;/div&gt;
&lt;div&gt;Second div&lt;/div&gt;
&lt;div&gt;Third div&lt;/div&gt;
Returns the index for the element with ID bar.
  div {
    font-weight: bold;
    color: #090;
  }

var listItem = $( "#bar" );
$( "div" ).html( "Index: " + $( "li" ).index( listItem ) );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
Returns the index for the first item in the jQuery collection.
  div {
    font-weight: bold;
    color: #090;
  }

var listItems = $( "li:gt(0)" );
$( "div" ).html( "Index: " + $( "li" ).index( listItems ) );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
Returns the index for the element with ID bar in relation to all &lt;li&gt; elements.
  div {
    font-weight: bold;
    color: #090;
  }

$( "div" ).html( "Index: " +  $( "#bar" ).index( "li" ) );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
Returns the index for the element with ID bar in relation to its siblings.
  div {
    font-weight: bold;
    color: #090;
  }

var barIndex = $( "#bar" ).index();
$( "div" ).html( "Index: " +  barIndex );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
Returns -1, as there is no element with ID foobar.
  div {
    font-weight: bold;
    color: #090;
  }

var foobar = $( "li" ).index( $( "#foobar" ) );
$( "div" ).html( "Index: " + foobar );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='index' scope='instance'>
        <description>Search for a given element from among the matched elements.</description>
        <return-types>
          <return-type type='Number' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='Selector'>
            <description>A selector representing a jQuery collection in which to look for an element.</description>
          </parameter>
        </parameters>
        <examples>
          <example>On click, returns the index (zero-based) of that div in the page.
$( "div" ).click(function() {
  // `this` is the DOM element that was clicked
  var index = $( "div" ).index( this );
  $( "span" ).text( "That was div index #" + index );
});

  div {
    background: yellow;
    margin: 5px;
  }
  span {
    color: red;
  }

&lt;span&gt;Click a div!&lt;/span&gt;
&lt;div&gt;First div&lt;/div&gt;
&lt;div&gt;Second div&lt;/div&gt;
&lt;div&gt;Third div&lt;/div&gt;
Returns the index for the element with ID bar.
  div {
    font-weight: bold;
    color: #090;
  }

var listItem = $( "#bar" );
$( "div" ).html( "Index: " + $( "li" ).index( listItem ) );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
Returns the index for the first item in the jQuery collection.
  div {
    font-weight: bold;
    color: #090;
  }

var listItems = $( "li:gt(0)" );
$( "div" ).html( "Index: " + $( "li" ).index( listItems ) );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
Returns the index for the element with ID bar in relation to all &lt;li&gt; elements.
  div {
    font-weight: bold;
    color: #090;
  }

$( "div" ).html( "Index: " +  $( "#bar" ).index( "li" ) );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
Returns the index for the element with ID bar in relation to its siblings.
  div {
    font-weight: bold;
    color: #090;
  }

var barIndex = $( "#bar" ).index();
$( "div" ).html( "Index: " +  barIndex );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
Returns -1, as there is no element with ID foobar.
  div {
    font-weight: bold;
    color: #090;
  }

var foobar = $( "li" ).index( $( "#foobar" ) );
$( "div" ).html( "Index: " + foobar );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='index' scope='instance'>
        <description>Search for a given element from among the matched elements.</description>
        <return-types>
          <return-type type='Number' />
        </return-types>
        <parameters>
          <parameter name='element' usage='required' type=''>
            <description>The DOM element or first element within the jQuery object to look for.</description>
          </parameter>
        </parameters>
        <examples>
          <example>On click, returns the index (zero-based) of that div in the page.
$( "div" ).click(function() {
  // `this` is the DOM element that was clicked
  var index = $( "div" ).index( this );
  $( "span" ).text( "That was div index #" + index );
});

  div {
    background: yellow;
    margin: 5px;
  }
  span {
    color: red;
  }

&lt;span&gt;Click a div!&lt;/span&gt;
&lt;div&gt;First div&lt;/div&gt;
&lt;div&gt;Second div&lt;/div&gt;
&lt;div&gt;Third div&lt;/div&gt;
Returns the index for the element with ID bar.
  div {
    font-weight: bold;
    color: #090;
  }

var listItem = $( "#bar" );
$( "div" ).html( "Index: " + $( "li" ).index( listItem ) );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
Returns the index for the first item in the jQuery collection.
  div {
    font-weight: bold;
    color: #090;
  }

var listItems = $( "li:gt(0)" );
$( "div" ).html( "Index: " + $( "li" ).index( listItems ) );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
Returns the index for the element with ID bar in relation to all &lt;li&gt; elements.
  div {
    font-weight: bold;
    color: #090;
  }

$( "div" ).html( "Index: " +  $( "#bar" ).index( "li" ) );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
Returns the index for the element with ID bar in relation to its siblings.
  div {
    font-weight: bold;
    color: #090;
  }

var barIndex = $( "#bar" ).index();
$( "div" ).html( "Index: " +  barIndex );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
Returns -1, as there is no element with ID foobar.
  div {
    font-weight: bold;
    color: #090;
  }

var foobar = $( "li" ).index( $( "#foobar" ) );
$( "div" ).html( "Index: " + foobar );

&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='innerHeight' scope='instance'>
        <description>Get the current computed height for the first element in the set of matched elements, including padding but not border.</description>
        <return-types>
          <return-type type='Number' />
        </return-types>
        <parameters />
        <examples>
          <example>Get the innerHeight of a paragraph.
var p = $( "p:first" );
$( "p:last" ).text( "innerHeight:" + p.innerHeight() );

  p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='innerWidth' scope='instance'>
        <description>Get the current computed inner width for the first element in the set of matched elements, including padding but not border.</description>
        <return-types>
          <return-type type='Integer' />
        </return-types>
        <parameters />
        <examples>
          <example>Get the innerWidth of a paragraph.
var p = $( "p:first" );
$( "p:last" ).text( "innerWidth:" + p.innerWidth() );

  p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='innerWidth' scope='instance'>
        <description>Set the CSS inner width of each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='value' usage='required' type=''>
            <description>A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string).</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the inner width of each div the first time it is clicked (and change its color).
var modWidth = 60;
$( "div" ).one( "click", function() {
$( this ).innerWidth( modWidth ).addClass( "mod" );
modWidth -= 8;
});

div {
width: 60px;
padding: 10px;
height: 50px;
float: left;
margin: 5px;
background: red;
cursor: pointer;
}
.mod {
background: blue;
cursor: default;
}

&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='innerWidth' scope='instance'>
        <description>Set the CSS inner width of each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index, width)' usage='required' type='Function'>
            <description>A function returning the inner width (including padding but not border) to set. Receives the index position of the element in the set and the old inner width as arguments. Within the function, this refers to the current element in the set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the inner width of each div the first time it is clicked (and change its color).
var modWidth = 60;
$( "div" ).one( "click", function() {
$( this ).innerWidth( modWidth ).addClass( "mod" );
modWidth -= 8;
});

div {
width: 60px;
padding: 10px;
height: 50px;
float: left;
margin: 5px;
background: red;
cursor: pointer;
}
.mod {
background: blue;
cursor: default;
}

&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='insertAfter' scope='instance'>
        <description>Insert every element in the set of matched elements after the target.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='target' usage='required' type=''>
            <description>A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Insert all paragraphs after an element with id of "foo". Same as $( "#foo" ).after( "p" )
$( "p" ).insertAfter( "#foo" );

  #foo {
    background: yellow;
  }

&lt;p&gt; is what I said... &lt;/p&gt;
&lt;div id="foo"&gt;FOO!&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='insertBefore' scope='instance'>
        <description>Insert every element in the set of matched elements before the target.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='target' usage='required' type=''>
            <description>A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Insert all paragraphs before an element with id of "foo". Same as $( "#foo" ).before( "p" )
$( "p" ).insertBefore( "#foo" );

  #foo {
    background: yellow;
  }

&lt;div id="foo"&gt;FOO!&lt;/div&gt;
&lt;p&gt;I would like to say: &lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='is' scope='instance'>
        <description>Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Shows a few ways is() can be used inside an event handler.
$( "div" ).one( "click", function() {
  if ( $( this ).is( ":first-child" ) ) {
    $( "p" ).text( "It's the first div." );
  } else if ( $( this ).is( ".blue,.red" ) ) {
    $( "p" ).text( "It's a blue or red div." );
  } else if ( $( this ).is( ":contains('Peter')" ) ) {
    $( "p" ).text( "It's Peter!" );
  } else {
    $( "p" ).html( "It's nothing &lt;em&gt;special&lt;/em&gt;." );
  }
  $( "p" ).hide().slideDown( "slow" );
  $( this ).css({
    "border-style": "inset",
    cursor: "default"
  });
});

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 4px outset;
    background: green;
    text-align: center;
    font-weight: bolder;
    cursor: pointer;
  }
  .blue {
    background: blue;
  }
  .red {
    background: red;
  }
  span {
    color: white;
    font-size: 16px;
  }
  p {
    color: red;
    font-weight: bolder;
    background: yellow;
    margin: 3px;
    clear: left;
    display: none;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div class="blue"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div class="red"&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;span&gt;Peter&lt;/span&gt;&lt;/div&gt;
&lt;div class="blue"&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
Returns true, because the parent of the input is a form element.
var isFormParent = $( "input[type='checkbox']" ).parent().is( "form" );
$( "div" ).text( "isFormParent = " + isFormParent );

  div {
    color: red;
  }

&lt;form&gt;
  &lt;input type="checkbox"&gt;
&lt;/form&gt;
&lt;div&gt;&lt;/div&gt;
Returns false, because the parent of the input is a p element.
var isFormParent = $( "input[type='checkbox']" ).parent().is( "form" );
$( "div" ).text( "isFormParent = " + isFormParent );

  div {
    color: red;
  }

&lt;form&gt;
  &lt;p&gt;&lt;input type="checkbox"&gt;&lt;/p&gt;
&lt;/form&gt;
&lt;div&gt;&lt;/div&gt;
Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.
var alt = $( "#browsers li:nth-child(2n)" ).css( "background", "#0ff" );
$( "li" ).click(function() {
  var li = $( this );
  if ( li.is( alt ) ) {
    li.slideUp();
  } else {
    li.css( "background", "red" );
  }
});

  li {
    cursor: pointer;
  }

&lt;ul id="browsers"&gt;
  &lt;li&gt;Chrome&lt;/li&gt;
  &lt;li&gt;Safari&lt;/li&gt;
  &lt;li&gt;Firefox&lt;/li&gt;
  &lt;li&gt;Opera&lt;/li&gt;
&lt;/ul&gt;
An alternate way to achieve the above example using an element rather than a jQuery object. Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.
var alt = $( "#browsers li:nth-child(2n)" ).css( "background", "#0ff" );
$( "li" ).click(function() {
  if ( alt.is( this ) ) {
    $( this ).slideUp();
  } else {
    $( this ).css( "background", "red" );
  }
});

  li {
    cursor: pointer;
  }

&lt;ul id="browsers"&gt;
  &lt;li&gt;Chrome&lt;/li&gt;
  &lt;li&gt;Safari&lt;/li&gt;
  &lt;li&gt;Firefox&lt;/li&gt;
  &lt;li&gt;Opera&lt;/li&gt;
&lt;/ul&gt;
</example>
        </examples>
      </method>
      <method name='is' scope='instance'>
        <description>Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters>
          <parameter name='function(index)' usage='required' type='Function'>
            <description>A function used as a test for the set of elements. It accepts one argument, index, which is the element's index in the jQuery collection.Within the function, this refers to the current DOM element. </description>
          </parameter>
        </parameters>
        <examples>
          <example>Shows a few ways is() can be used inside an event handler.
$( "div" ).one( "click", function() {
  if ( $( this ).is( ":first-child" ) ) {
    $( "p" ).text( "It's the first div." );
  } else if ( $( this ).is( ".blue,.red" ) ) {
    $( "p" ).text( "It's a blue or red div." );
  } else if ( $( this ).is( ":contains('Peter')" ) ) {
    $( "p" ).text( "It's Peter!" );
  } else {
    $( "p" ).html( "It's nothing &lt;em&gt;special&lt;/em&gt;." );
  }
  $( "p" ).hide().slideDown( "slow" );
  $( this ).css({
    "border-style": "inset",
    cursor: "default"
  });
});

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 4px outset;
    background: green;
    text-align: center;
    font-weight: bolder;
    cursor: pointer;
  }
  .blue {
    background: blue;
  }
  .red {
    background: red;
  }
  span {
    color: white;
    font-size: 16px;
  }
  p {
    color: red;
    font-weight: bolder;
    background: yellow;
    margin: 3px;
    clear: left;
    display: none;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div class="blue"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div class="red"&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;span&gt;Peter&lt;/span&gt;&lt;/div&gt;
&lt;div class="blue"&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
Returns true, because the parent of the input is a form element.
var isFormParent = $( "input[type='checkbox']" ).parent().is( "form" );
$( "div" ).text( "isFormParent = " + isFormParent );

  div {
    color: red;
  }

&lt;form&gt;
  &lt;input type="checkbox"&gt;
&lt;/form&gt;
&lt;div&gt;&lt;/div&gt;
Returns false, because the parent of the input is a p element.
var isFormParent = $( "input[type='checkbox']" ).parent().is( "form" );
$( "div" ).text( "isFormParent = " + isFormParent );

  div {
    color: red;
  }

&lt;form&gt;
  &lt;p&gt;&lt;input type="checkbox"&gt;&lt;/p&gt;
&lt;/form&gt;
&lt;div&gt;&lt;/div&gt;
Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.
var alt = $( "#browsers li:nth-child(2n)" ).css( "background", "#0ff" );
$( "li" ).click(function() {
  var li = $( this );
  if ( li.is( alt ) ) {
    li.slideUp();
  } else {
    li.css( "background", "red" );
  }
});

  li {
    cursor: pointer;
  }

&lt;ul id="browsers"&gt;
  &lt;li&gt;Chrome&lt;/li&gt;
  &lt;li&gt;Safari&lt;/li&gt;
  &lt;li&gt;Firefox&lt;/li&gt;
  &lt;li&gt;Opera&lt;/li&gt;
&lt;/ul&gt;
An alternate way to achieve the above example using an element rather than a jQuery object. Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.
var alt = $( "#browsers li:nth-child(2n)" ).css( "background", "#0ff" );
$( "li" ).click(function() {
  if ( alt.is( this ) ) {
    $( this ).slideUp();
  } else {
    $( this ).css( "background", "red" );
  }
});

  li {
    cursor: pointer;
  }

&lt;ul id="browsers"&gt;
  &lt;li&gt;Chrome&lt;/li&gt;
  &lt;li&gt;Safari&lt;/li&gt;
  &lt;li&gt;Firefox&lt;/li&gt;
  &lt;li&gt;Opera&lt;/li&gt;
&lt;/ul&gt;
</example>
        </examples>
      </method>
      <method name='is' scope='instance'>
        <description>Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters>
          <parameter name='jQuery object' usage='required' type='Object'>
            <description>An existing jQuery object to match the current set of elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Shows a few ways is() can be used inside an event handler.
$( "div" ).one( "click", function() {
  if ( $( this ).is( ":first-child" ) ) {
    $( "p" ).text( "It's the first div." );
  } else if ( $( this ).is( ".blue,.red" ) ) {
    $( "p" ).text( "It's a blue or red div." );
  } else if ( $( this ).is( ":contains('Peter')" ) ) {
    $( "p" ).text( "It's Peter!" );
  } else {
    $( "p" ).html( "It's nothing &lt;em&gt;special&lt;/em&gt;." );
  }
  $( "p" ).hide().slideDown( "slow" );
  $( this ).css({
    "border-style": "inset",
    cursor: "default"
  });
});

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 4px outset;
    background: green;
    text-align: center;
    font-weight: bolder;
    cursor: pointer;
  }
  .blue {
    background: blue;
  }
  .red {
    background: red;
  }
  span {
    color: white;
    font-size: 16px;
  }
  p {
    color: red;
    font-weight: bolder;
    background: yellow;
    margin: 3px;
    clear: left;
    display: none;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div class="blue"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div class="red"&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;span&gt;Peter&lt;/span&gt;&lt;/div&gt;
&lt;div class="blue"&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
Returns true, because the parent of the input is a form element.
var isFormParent = $( "input[type='checkbox']" ).parent().is( "form" );
$( "div" ).text( "isFormParent = " + isFormParent );

  div {
    color: red;
  }

&lt;form&gt;
  &lt;input type="checkbox"&gt;
&lt;/form&gt;
&lt;div&gt;&lt;/div&gt;
Returns false, because the parent of the input is a p element.
var isFormParent = $( "input[type='checkbox']" ).parent().is( "form" );
$( "div" ).text( "isFormParent = " + isFormParent );

  div {
    color: red;
  }

&lt;form&gt;
  &lt;p&gt;&lt;input type="checkbox"&gt;&lt;/p&gt;
&lt;/form&gt;
&lt;div&gt;&lt;/div&gt;
Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.
var alt = $( "#browsers li:nth-child(2n)" ).css( "background", "#0ff" );
$( "li" ).click(function() {
  var li = $( this );
  if ( li.is( alt ) ) {
    li.slideUp();
  } else {
    li.css( "background", "red" );
  }
});

  li {
    cursor: pointer;
  }

&lt;ul id="browsers"&gt;
  &lt;li&gt;Chrome&lt;/li&gt;
  &lt;li&gt;Safari&lt;/li&gt;
  &lt;li&gt;Firefox&lt;/li&gt;
  &lt;li&gt;Opera&lt;/li&gt;
&lt;/ul&gt;
An alternate way to achieve the above example using an element rather than a jQuery object. Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.
var alt = $( "#browsers li:nth-child(2n)" ).css( "background", "#0ff" );
$( "li" ).click(function() {
  if ( alt.is( this ) ) {
    $( this ).slideUp();
  } else {
    $( this ).css( "background", "red" );
  }
});

  li {
    cursor: pointer;
  }

&lt;ul id="browsers"&gt;
  &lt;li&gt;Chrome&lt;/li&gt;
  &lt;li&gt;Safari&lt;/li&gt;
  &lt;li&gt;Firefox&lt;/li&gt;
  &lt;li&gt;Opera&lt;/li&gt;
&lt;/ul&gt;
</example>
        </examples>
      </method>
      <method name='is' scope='instance'>
        <description>Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters>
          <parameter name='elements' usage='required' type='Element'>
            <description>One or more elements to match the current set of elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Shows a few ways is() can be used inside an event handler.
$( "div" ).one( "click", function() {
  if ( $( this ).is( ":first-child" ) ) {
    $( "p" ).text( "It's the first div." );
  } else if ( $( this ).is( ".blue,.red" ) ) {
    $( "p" ).text( "It's a blue or red div." );
  } else if ( $( this ).is( ":contains('Peter')" ) ) {
    $( "p" ).text( "It's Peter!" );
  } else {
    $( "p" ).html( "It's nothing &lt;em&gt;special&lt;/em&gt;." );
  }
  $( "p" ).hide().slideDown( "slow" );
  $( this ).css({
    "border-style": "inset",
    cursor: "default"
  });
});

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    border: 4px outset;
    background: green;
    text-align: center;
    font-weight: bolder;
    cursor: pointer;
  }
  .blue {
    background: blue;
  }
  .red {
    background: red;
  }
  span {
    color: white;
    font-size: 16px;
  }
  p {
    color: red;
    font-weight: bolder;
    background: yellow;
    margin: 3px;
    clear: left;
    display: none;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div class="blue"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div class="red"&gt;&lt;/div&gt;
&lt;div&gt;&lt;br/&gt;&lt;span&gt;Peter&lt;/span&gt;&lt;/div&gt;
&lt;div class="blue"&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
Returns true, because the parent of the input is a form element.
var isFormParent = $( "input[type='checkbox']" ).parent().is( "form" );
$( "div" ).text( "isFormParent = " + isFormParent );

  div {
    color: red;
  }

&lt;form&gt;
  &lt;input type="checkbox"&gt;
&lt;/form&gt;
&lt;div&gt;&lt;/div&gt;
Returns false, because the parent of the input is a p element.
var isFormParent = $( "input[type='checkbox']" ).parent().is( "form" );
$( "div" ).text( "isFormParent = " + isFormParent );

  div {
    color: red;
  }

&lt;form&gt;
  &lt;p&gt;&lt;input type="checkbox"&gt;&lt;/p&gt;
&lt;/form&gt;
&lt;div&gt;&lt;/div&gt;
Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.
var alt = $( "#browsers li:nth-child(2n)" ).css( "background", "#0ff" );
$( "li" ).click(function() {
  var li = $( this );
  if ( li.is( alt ) ) {
    li.slideUp();
  } else {
    li.css( "background", "red" );
  }
});

  li {
    cursor: pointer;
  }

&lt;ul id="browsers"&gt;
  &lt;li&gt;Chrome&lt;/li&gt;
  &lt;li&gt;Safari&lt;/li&gt;
  &lt;li&gt;Firefox&lt;/li&gt;
  &lt;li&gt;Opera&lt;/li&gt;
&lt;/ul&gt;
An alternate way to achieve the above example using an element rather than a jQuery object. Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.
var alt = $( "#browsers li:nth-child(2n)" ).css( "background", "#0ff" );
$( "li" ).click(function() {
  if ( alt.is( this ) ) {
    $( this ).slideUp();
  } else {
    $( this ).css( "background", "red" );
  }
});

  li {
    cursor: pointer;
  }

&lt;ul id="browsers"&gt;
  &lt;li&gt;Chrome&lt;/li&gt;
  &lt;li&gt;Safari&lt;/li&gt;
  &lt;li&gt;Firefox&lt;/li&gt;
  &lt;li&gt;Opera&lt;/li&gt;
&lt;/ul&gt;
</example>
        </examples>
      </method>
      <method name='jQuery' scope='instance'>
        <description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='Selector'>
            <description>A string containing a selector expression</description>
          </parameter>
          <parameter name='context' usage='optional' type=''>
            <description>A DOM Element, Document, or jQuery to use as context</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find all p elements that are children of a div element and apply a border to them.
$( "div &gt; p" ).css( "border", "1px solid gray" );

&lt;p&gt;one&lt;/p&gt;
&lt;div&gt;&lt;p&gt;two&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;three&lt;/p&gt;
Find all inputs of type radio within the first form in the document.
$( "input:radio", document.forms[ 0 ] );
Find all div elements within an XML document from an Ajax response.
$( "div", xml.responseXML );
Set the background color of the page to black.
$( document.body ).css( "background", "black" );
Hide all the input elements within a form.
$( myForm.elements ).hide();
</example>
        </examples>
      </method>
      <method name='jQuery' scope='instance'>
        <description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='element' usage='required' type='Element'>
            <description>A DOM element to wrap in a jQuery object.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find all p elements that are children of a div element and apply a border to them.
$( "div &gt; p" ).css( "border", "1px solid gray" );

&lt;p&gt;one&lt;/p&gt;
&lt;div&gt;&lt;p&gt;two&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;three&lt;/p&gt;
Find all inputs of type radio within the first form in the document.
$( "input:radio", document.forms[ 0 ] );
Find all div elements within an XML document from an Ajax response.
$( "div", xml.responseXML );
Set the background color of the page to black.
$( document.body ).css( "background", "black" );
Hide all the input elements within a form.
$( myForm.elements ).hide();
</example>
        </examples>
      </method>
      <method name='jQuery' scope='instance'>
        <description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='elementArray' usage='required' type='Array'>
            <description>An array containing a set of DOM elements to wrap in a jQuery object.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find all p elements that are children of a div element and apply a border to them.
$( "div &gt; p" ).css( "border", "1px solid gray" );

&lt;p&gt;one&lt;/p&gt;
&lt;div&gt;&lt;p&gt;two&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;three&lt;/p&gt;
Find all inputs of type radio within the first form in the document.
$( "input:radio", document.forms[ 0 ] );
Find all div elements within an XML document from an Ajax response.
$( "div", xml.responseXML );
Set the background color of the page to black.
$( document.body ).css( "background", "black" );
Hide all the input elements within a form.
$( myForm.elements ).hide();
</example>
        </examples>
      </method>
      <method name='jQuery' scope='instance'>
        <description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='object' usage='required' type='PlainObject'>
            <description>A plain object to wrap in a jQuery object.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find all p elements that are children of a div element and apply a border to them.
$( "div &gt; p" ).css( "border", "1px solid gray" );

&lt;p&gt;one&lt;/p&gt;
&lt;div&gt;&lt;p&gt;two&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;three&lt;/p&gt;
Find all inputs of type radio within the first form in the document.
$( "input:radio", document.forms[ 0 ] );
Find all div elements within an XML document from an Ajax response.
$( "div", xml.responseXML );
Set the background color of the page to black.
$( document.body ).css( "background", "black" );
Hide all the input elements within a form.
$( myForm.elements ).hide();
</example>
        </examples>
      </method>
      <method name='jQuery' scope='instance'>
        <description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='jQuery object' usage='required' type='PlainObject'>
            <description>An existing jQuery object to clone.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find all p elements that are children of a div element and apply a border to them.
$( "div &gt; p" ).css( "border", "1px solid gray" );

&lt;p&gt;one&lt;/p&gt;
&lt;div&gt;&lt;p&gt;two&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;three&lt;/p&gt;
Find all inputs of type radio within the first form in the document.
$( "input:radio", document.forms[ 0 ] );
Find all div elements within an XML document from an Ajax response.
$( "div", xml.responseXML );
Set the background color of the page to black.
$( document.body ).css( "background", "black" );
Hide all the input elements within a form.
$( myForm.elements ).hide();
</example>
        </examples>
      </method>
      <method name='jQuery' scope='instance'>
        <description>Accepts a string containing a CSS selector which is then used to match a set of elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Find all p elements that are children of a div element and apply a border to them.
$( "div &gt; p" ).css( "border", "1px solid gray" );

&lt;p&gt;one&lt;/p&gt;
&lt;div&gt;&lt;p&gt;two&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;three&lt;/p&gt;
Find all inputs of type radio within the first form in the document.
$( "input:radio", document.forms[ 0 ] );
Find all div elements within an XML document from an Ajax response.
$( "div", xml.responseXML );
Set the background color of the page to black.
$( document.body ).css( "background", "black" );
Hide all the input elements within a form.
$( myForm.elements ).hide();
</example>
        </examples>
      </method>
      <method name='jQuery' scope='instance'>
        <description>Creates DOM elements on the fly from the provided string of raw HTML.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='html' usage='required' type='htmlString'>
            <description>A string of HTML to create on the fly. Note that this parses HTML, not XML.</description>
          </parameter>
          <parameter name='ownerDocument' usage='optional' type='document'>
            <description>A document in which the new elements will be created.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Create a div element (and all of its contents) dynamically and append it to the body element. Internally, an element is created and its innerHTML property set to the given markup.
$( "&lt;div&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;" ).appendTo( "body" )
Create some DOM elements.
$( "&lt;div/&gt;", {
  "class": "test",
  text: "Click me!",
  click: function() {
    $( this ).toggleClass( "test" );
  }
})
  .appendTo( "body" );
</example>
        </examples>
      </method>
      <method name='jQuery' scope='instance'>
        <description>Creates DOM elements on the fly from the provided string of raw HTML.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='html' usage='required' type='htmlString'>
            <description>A string defining a single, standalone, HTML element (e.g. &lt;div/&gt; or &lt;div&gt;&lt;/div&gt;).</description>
          </parameter>
          <parameter name='attributes' usage='required' type='PlainObject'>
            <description>An object of attributes, events, and methods to call on the newly-created element.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Create a div element (and all of its contents) dynamically and append it to the body element. Internally, an element is created and its innerHTML property set to the given markup.
$( "&lt;div&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;" ).appendTo( "body" )
Create some DOM elements.
$( "&lt;div/&gt;", {
  "class": "test",
  text: "Click me!",
  click: function() {
    $( this ).toggleClass( "test" );
  }
})
  .appendTo( "body" );
</example>
        </examples>
      </method>
      <method name='jQuery' scope='instance'>
        <description>Binds a function to be executed when the DOM has finished loading.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='callback' usage='required' type='Function'>
            <description>The function to execute when the DOM is ready.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Execute the function when the DOM is ready to be used.
$(function() {
  // Document is ready
});
Use both the shortcut for $(document).ready() and the argument to write failsafe jQuery code using the $ alias, without relying on the global alias.
jQuery(function( $ ) {
  // Your code using failsafe $ alias here...
});
</example>
        </examples>
      </method>
      <method name='keydown' scope='instance'>
        <description>Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show the event object for the keydown handler when a key is pressed in the input.
var xTriggered = 0;
$( "#target" ).keydown(function( event ) {
  if ( event.which == 13 ) {
   event.preventDefault();
  }
  xTriggered++;
  var msg = "Handler for .keydown() called " + xTriggered + " time(s).";
  $.print( msg, "html" );
  $.print( event );
});

$( "#other" ).click(function() {
  $( "#target" ).keydown();
});

  fieldset {
    margin-bottom: 1em;
  }
  input {
    display: block;
    margin-bottom: .25em;
  }
  #print-output {
    width: 100%;
  }
  .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
  }
460
&lt;form&gt;
  &lt;fieldset&gt;
    &lt;label for="target"&gt;Type Something:&lt;/label&gt;
    &lt;input id="target" type="text"&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;button id="other"&gt;
  Trigger the handler
&lt;/button&gt;
&lt;script type="text/javascript" src="/resources/events.js"&gt;&lt;/script&gt;
</example>
        </examples>
      </method>
      <method name='keydown' scope='instance'>
        <description>Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show the event object for the keydown handler when a key is pressed in the input.
var xTriggered = 0;
$( "#target" ).keydown(function( event ) {
  if ( event.which == 13 ) {
   event.preventDefault();
  }
  xTriggered++;
  var msg = "Handler for .keydown() called " + xTriggered + " time(s).";
  $.print( msg, "html" );
  $.print( event );
});

$( "#other" ).click(function() {
  $( "#target" ).keydown();
});

  fieldset {
    margin-bottom: 1em;
  }
  input {
    display: block;
    margin-bottom: .25em;
  }
  #print-output {
    width: 100%;
  }
  .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
  }
460
&lt;form&gt;
  &lt;fieldset&gt;
    &lt;label for="target"&gt;Type Something:&lt;/label&gt;
    &lt;input id="target" type="text"&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;button id="other"&gt;
  Trigger the handler
&lt;/button&gt;
&lt;script type="text/javascript" src="/resources/events.js"&gt;&lt;/script&gt;
</example>
        </examples>
      </method>
      <method name='keydown' scope='instance'>
        <description>Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Show the event object for the keydown handler when a key is pressed in the input.
var xTriggered = 0;
$( "#target" ).keydown(function( event ) {
  if ( event.which == 13 ) {
   event.preventDefault();
  }
  xTriggered++;
  var msg = "Handler for .keydown() called " + xTriggered + " time(s).";
  $.print( msg, "html" );
  $.print( event );
});

$( "#other" ).click(function() {
  $( "#target" ).keydown();
});

  fieldset {
    margin-bottom: 1em;
  }
  input {
    display: block;
    margin-bottom: .25em;
  }
  #print-output {
    width: 100%;
  }
  .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
  }
460
&lt;form&gt;
  &lt;fieldset&gt;
    &lt;label for="target"&gt;Type Something:&lt;/label&gt;
    &lt;input id="target" type="text"&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;button id="other"&gt;
  Trigger the handler
&lt;/button&gt;
&lt;script type="text/javascript" src="/resources/events.js"&gt;&lt;/script&gt;
</example>
        </examples>
      </method>
      <method name='keypress' scope='instance'>
        <description>Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show the event object when a key is pressed in the input. Note: This demo relies on a simple $.print() plugin (http://api.jquery.com/resources/events.js) for the event object's output.
var xTriggered = 0;
$( "#target" ).keypress(function( event ) {
  if ( event.which == 13 ) {
     event.preventDefault();
  }
  xTriggered++;
  var msg = "Handler for .keypress() called " + xTriggered + " time(s).";
  $.print( msg, "html" );
  $.print( event );
});

$( "#other" ).click(function() {
  $( "#target" ).keypress();
});

  fieldset {
    margin-bottom: 1em;
  }
  input {
    display: block;
    margin-bottom: .25em;
  }
  #print-output {
    width: 100%;
  }
  .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
  }
460
&lt;form&gt;
  &lt;fieldset&gt;
    &lt;label for="target"&gt;Type Something:&lt;/label&gt;
    &lt;input id="target" type="text"&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;button id="other"&gt;
  Trigger the handler
&lt;/button&gt;
&lt;script src="/resources/events.js"&gt;&lt;/script&gt;
</example>
        </examples>
      </method>
      <method name='keypress' scope='instance'>
        <description>Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show the event object when a key is pressed in the input. Note: This demo relies on a simple $.print() plugin (http://api.jquery.com/resources/events.js) for the event object's output.
var xTriggered = 0;
$( "#target" ).keypress(function( event ) {
  if ( event.which == 13 ) {
     event.preventDefault();
  }
  xTriggered++;
  var msg = "Handler for .keypress() called " + xTriggered + " time(s).";
  $.print( msg, "html" );
  $.print( event );
});

$( "#other" ).click(function() {
  $( "#target" ).keypress();
});

  fieldset {
    margin-bottom: 1em;
  }
  input {
    display: block;
    margin-bottom: .25em;
  }
  #print-output {
    width: 100%;
  }
  .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
  }
460
&lt;form&gt;
  &lt;fieldset&gt;
    &lt;label for="target"&gt;Type Something:&lt;/label&gt;
    &lt;input id="target" type="text"&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;button id="other"&gt;
  Trigger the handler
&lt;/button&gt;
&lt;script src="/resources/events.js"&gt;&lt;/script&gt;
</example>
        </examples>
      </method>
      <method name='keypress' scope='instance'>
        <description>Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Show the event object when a key is pressed in the input. Note: This demo relies on a simple $.print() plugin (http://api.jquery.com/resources/events.js) for the event object's output.
var xTriggered = 0;
$( "#target" ).keypress(function( event ) {
  if ( event.which == 13 ) {
     event.preventDefault();
  }
  xTriggered++;
  var msg = "Handler for .keypress() called " + xTriggered + " time(s).";
  $.print( msg, "html" );
  $.print( event );
});

$( "#other" ).click(function() {
  $( "#target" ).keypress();
});

  fieldset {
    margin-bottom: 1em;
  }
  input {
    display: block;
    margin-bottom: .25em;
  }
  #print-output {
    width: 100%;
  }
  .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
  }
460
&lt;form&gt;
  &lt;fieldset&gt;
    &lt;label for="target"&gt;Type Something:&lt;/label&gt;
    &lt;input id="target" type="text"&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;button id="other"&gt;
  Trigger the handler
&lt;/button&gt;
&lt;script src="/resources/events.js"&gt;&lt;/script&gt;
</example>
        </examples>
      </method>
      <method name='keyup' scope='instance'>
        <description>Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show the event object for the keyup handler (using a simple $.print plugin) when a key is released in the input.
var xTriggered = 0;
$( "#target" ).keyup(function( event ) {
  xTriggered++;
  var msg = "Handler for .keyup() called " + xTriggered + " time(s).";
  $.print( msg, "html" );
  $.print( event );
}).keydown(function( event ) {
  if ( event.which == 13 ) {
    event.preventDefault();
  }
});

$( "#other").click(function() {
  $( "#target" ).keyup();
});

  fieldset {
    margin-bottom: 1em;
  }
  input {
    display: block;
    margin-bottom: .25em;
  }
  #print-output {
    width: 100%;
  }
  .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
  }
460
&lt;form&gt;
  &lt;fieldset&gt;
    &lt;label for="target"&gt;Type Something:&lt;/label&gt;
    &lt;input id="target" type="text"&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;button id="other"&gt;
  Trigger the handler
&lt;/button&gt;
&lt;script type="text/javascript" src="/resources/events.js"&gt;&lt;/script&gt;
</example>
        </examples>
      </method>
      <method name='keyup' scope='instance'>
        <description>Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show the event object for the keyup handler (using a simple $.print plugin) when a key is released in the input.
var xTriggered = 0;
$( "#target" ).keyup(function( event ) {
  xTriggered++;
  var msg = "Handler for .keyup() called " + xTriggered + " time(s).";
  $.print( msg, "html" );
  $.print( event );
}).keydown(function( event ) {
  if ( event.which == 13 ) {
    event.preventDefault();
  }
});

$( "#other").click(function() {
  $( "#target" ).keyup();
});

  fieldset {
    margin-bottom: 1em;
  }
  input {
    display: block;
    margin-bottom: .25em;
  }
  #print-output {
    width: 100%;
  }
  .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
  }
460
&lt;form&gt;
  &lt;fieldset&gt;
    &lt;label for="target"&gt;Type Something:&lt;/label&gt;
    &lt;input id="target" type="text"&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;button id="other"&gt;
  Trigger the handler
&lt;/button&gt;
&lt;script type="text/javascript" src="/resources/events.js"&gt;&lt;/script&gt;
</example>
        </examples>
      </method>
      <method name='keyup' scope='instance'>
        <description>Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Show the event object for the keyup handler (using a simple $.print plugin) when a key is released in the input.
var xTriggered = 0;
$( "#target" ).keyup(function( event ) {
  xTriggered++;
  var msg = "Handler for .keyup() called " + xTriggered + " time(s).";
  $.print( msg, "html" );
  $.print( event );
}).keydown(function( event ) {
  if ( event.which == 13 ) {
    event.preventDefault();
  }
});

$( "#other").click(function() {
  $( "#target" ).keyup();
});

  fieldset {
    margin-bottom: 1em;
  }
  input {
    display: block;
    margin-bottom: .25em;
  }
  #print-output {
    width: 100%;
  }
  .print-output-line {
    white-space: pre;
    padding: 5px;
    font-family: monaco, monospace;
    font-size: .7em;
  }
460
&lt;form&gt;
  &lt;fieldset&gt;
    &lt;label for="target"&gt;Type Something:&lt;/label&gt;
    &lt;input id="target" type="text"&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;button id="other"&gt;
  Trigger the handler
&lt;/button&gt;
&lt;script type="text/javascript" src="/resources/events.js"&gt;&lt;/script&gt;
</example>
        </examples>
      </method>
      <method name='last' scope='instance'>
        <description>Reduce the set of matched elements to the final one in the set.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Highlight the last span in a paragraph.
  .highlight {
    background-color: yellow;
  }

$( "p span" ).last().addClass( "highlight" );

&lt;p&gt;&lt;span&gt;Look:&lt;/span&gt; &lt;span&gt;This is some text in a paragraph.&lt;/span&gt; &lt;span&gt;This is a note about it.&lt;/span&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='live' scope='instance'>
        <description>Attach an event handler for all elements which match the current selector, now and in the future.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='events' usage='required' type='String'>
            <description>A string containing a JavaScript event type, such as "click" or "keydown." As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute at the time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Cancel a default action and prevent it from bubbling up by returning false.
$( "a" ).live( "click", function() {
  return false;
});
Cancel only the default action by using the preventDefault method.
$( "a" ).live( "click", function( event ) {
  event.preventDefault();
});
Bind custom events with .live().
$( "p" ).live( "myCustomEvent", function( event, myName, myValue ) {
  $( this ).text( "Hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
  });
$( "button" ).click(function() {
  $( "p" ).trigger( "myCustomEvent" );
});
Use an object to bind multiple live event handlers. Note that .live() calls the click, mouseover, and mouseout event handlers for all paragraphs--even new ones.
$( "p" ).live({
  click: function() {
    $( this ).after( "&lt;p&gt;Another paragraph!&lt;/p&gt;" );
  },
  mouseover: function() {
    $( this ).addClass( "over" );
  },
  mouseout: function() {
    $( this ).removeClass( "over" );
  }
});
</example>
        </examples>
      </method>
      <method name='live' scope='instance'>
        <description>Attach an event handler for all elements which match the current selector, now and in the future.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='events' usage='required' type='String'>
            <description>A string containing a JavaScript event type, such as "click" or "keydown." As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.</description>
          </parameter>
          <parameter name='data' usage='required' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute at the time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Cancel a default action and prevent it from bubbling up by returning false.
$( "a" ).live( "click", function() {
  return false;
});
Cancel only the default action by using the preventDefault method.
$( "a" ).live( "click", function( event ) {
  event.preventDefault();
});
Bind custom events with .live().
$( "p" ).live( "myCustomEvent", function( event, myName, myValue ) {
  $( this ).text( "Hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
  });
$( "button" ).click(function() {
  $( "p" ).trigger( "myCustomEvent" );
});
Use an object to bind multiple live event handlers. Note that .live() calls the click, mouseover, and mouseout event handlers for all paragraphs--even new ones.
$( "p" ).live({
  click: function() {
    $( this ).after( "&lt;p&gt;Another paragraph!&lt;/p&gt;" );
  },
  mouseover: function() {
    $( this ).addClass( "over" );
  },
  mouseout: function() {
    $( this ).removeClass( "over" );
  }
});
</example>
        </examples>
      </method>
      <method name='live' scope='instance'>
        <description>Attach an event handler for all elements which match the current selector, now and in the future.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='events' usage='required' type='PlainObject'>
            <description>A plain object of one or more JavaScript event types and functions to execute for them.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Cancel a default action and prevent it from bubbling up by returning false.
$( "a" ).live( "click", function() {
  return false;
});
Cancel only the default action by using the preventDefault method.
$( "a" ).live( "click", function( event ) {
  event.preventDefault();
});
Bind custom events with .live().
$( "p" ).live( "myCustomEvent", function( event, myName, myValue ) {
  $( this ).text( "Hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
  });
$( "button" ).click(function() {
  $( "p" ).trigger( "myCustomEvent" );
});
Use an object to bind multiple live event handlers. Note that .live() calls the click, mouseover, and mouseout event handlers for all paragraphs--even new ones.
$( "p" ).live({
  click: function() {
    $( this ).after( "&lt;p&gt;Another paragraph!&lt;/p&gt;" );
  },
  mouseover: function() {
    $( this ).addClass( "over" );
  },
  mouseout: function() {
    $( this ).removeClass( "over" );
  }
});
</example>
        </examples>
      </method>
      <method name='load' scope='instance'>
        <description>Bind an event handler to the "load" JavaScript event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute when the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Run a function when the page is fully loaded including graphics.
$( window ).load(function() {
  // Run code
});
Add the class bigImg to all images with height greater than 100 upon each image load.
$( "img.userIcon" ).load(function() {
  if ( $( this ).height() &gt; 100) {
    $( this ).addClass( "bigImg" );
  }
});
</example>
        </examples>
      </method>
      <method name='load' scope='instance'>
        <description>Bind an event handler to the "load" JavaScript event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Run a function when the page is fully loaded including graphics.
$( window ).load(function() {
  // Run code
});
Add the class bigImg to all images with height greater than 100 upon each image load.
$( "img.userIcon" ).load(function() {
  if ( $( this ).height() &gt; 100) {
    $( this ).addClass( "bigImg" );
  }
});
</example>
        </examples>
      </method>
      <method name='load' scope='instance'>
        <description>Load data from the server and place the returned HTML into the matched element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='url' usage='required' type='String'>
            <description>A string containing the URL to which the request is sent.</description>
          </parameter>
          <parameter name='data' usage='optional' type=''>
            <description>A plain object or string that is sent to the server with the request.</description>
          </parameter>
          <parameter name='complete(responseText, textStatus, XMLHttpRequest)' usage='optional' type='Function'>
            <description>A callback function that is executed when the request completes.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Load another page's list items into an ordered list.
$( "#new-projects" ).load( "/resources/load.html #projects li" );

  body {
    font-size: 12px;
    font-family: Arial;
  }

&lt;b&gt;Projects:&lt;/b&gt;
&lt;ol id="new-projects"&gt;&lt;/ol&gt;
Display a notice if the Ajax request encounters an error.
$( "#success" ).load( "/not-here.php", function( response, status, xhr ) {
  if ( status == "error" ) {
    var msg = "Sorry but there was an error: ";
    $( "#error" ).html( msg + xhr.status + " " + xhr.statusText );
  }
});

  body {
    font-size: 12px;
    font-family: Arial;
  }

&lt;b&gt;Successful Response (should be blank):&lt;/b&gt;
&lt;div id="success"&gt;&lt;/div&gt;
&lt;b&gt;Error Response:&lt;/b&gt;
&lt;div id="error"&gt;&lt;/div&gt;
Load the feeds.html file into the div with the ID of feeds.
$( "#feeds" ).load( "feeds.html" );

&lt;div id="feeds"&gt;&lt;b&gt;45&lt;/b&gt; feeds found.&lt;/div&gt;
pass arrays of data to the server.
$( "#objectID" ).load( "test.php", { "choices[]": [ "Jon", "Susan" ] } );
Same as above, but will POST the additional parameters to the server and a callback that is executed when the server is finished responding.
$( "#feeds" ).load( "feeds.php", { limit: 25 }, function() {
  alert( "The last 25 entries in the feed have been loaded" );
});
</example>
        </examples>
      </method>
      <method name='map' scope='instance'>
        <description>Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='callback(index, domElement)' usage='required' type='Function'>
            <description>A function object that will be invoked for each element in the current set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Build a list of all the values within a form.
$( "p" )
  .append( $( "input" ).map(function() {
    return $( this ).val();
  })
  .get()
  .join( ", " ) );

  p {
    color: red;
  }

&lt;p&gt;&lt;b&gt;Values: &lt;/b&gt;&lt;/p&gt;
&lt;form&gt;
  &lt;input type="text" name="name" value="John"&gt;
  &lt;input type="text" name="password" value="password"&gt;
  &lt;input type="text" name="url" value="http://ejohn.org/"&gt;
&lt;/form&gt;
A contrived example to show some functionality.
var mappedItems = $( "li" ).map(function( index ) {
  var replacement = $( "&lt;li&gt;" ).text( $( this ).text() ).get( 0 );
  if ( index === 0 ) {

    // Make the first item all caps
    $( replacement ).text( $( replacement ).text().toUpperCase() );
  } else if ( index === 1 || index === 3 ) {

    // Delete the second and fourth items
    replacement = null;
  } else if ( index === 2 ) {

    // Make two of the third item and add some text
    replacement = [ replacement, $( "&lt;li&gt;" ).get( 0 ) ];
    $( replacement[ 0 ] ).append( "&lt;b&gt; - A&lt;/b&gt;" );
    $( replacement[ 1 ] ).append( "Extra &lt;b&gt; - B&lt;/b&gt;" );
  }

  // Replacement will be a dom element, null,
  // or an array of dom elements
  return replacement;
});
$( "#results" ).append( mappedItems );

  body {
    font-size: 16px;
  }
  ul {
    float: left;
    margin: 0 30px;
    color: blue;
  }
  #results {
    color: red;
  }

&lt;ul&gt;
  &lt;li&gt;First&lt;/li&gt;
  &lt;li&gt;Second&lt;/li&gt;
  &lt;li&gt;Third&lt;/li&gt;
  &lt;li&gt;Fourth&lt;/li&gt;
  &lt;li&gt;Fifth&lt;/li&gt;
&lt;/ul&gt;
&lt;ul id="results"&gt;
&lt;/ul&gt;
Equalize the heights of the divs.
$.fn.equalizeHeights = function() {
  var maxHeight = this.map(function( i, e ) {
    return $( e ).height();
  }).get();
  return this.height( Math.max.apply( this, maxHeight ) );
};

$( "input" ).click(function() {
  $( "div" ).equalizeHeights();
});

  div {
    width: 40px;
    float: left;
  }
  input {
    clear: left;
  }

&lt;input type="button" value="equalize div heights"&gt;
&lt;div style="background: red; height: 40px; "&gt;&lt;/div&gt;
&lt;div style="background: green; height: 70px;"&gt;&lt;/div&gt;
&lt;div style="background: blue; height: 50px; "&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mousedown' scope='instance'>
        <description>Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show texts when mouseup and mousedown event triggering.
$( "p" )
  .mouseup(function() {
    $( this ).append( "&lt;span style='color:#f00;'&gt;Mouse up.&lt;/span&gt;" );
  })
  .mousedown(function() {
    $( this ).append( "&lt;span style='color:#00f;'&gt;Mouse down.&lt;/span&gt;" );
  });

&lt;p&gt;Press mouse and release here.&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='mousedown' scope='instance'>
        <description>Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show texts when mouseup and mousedown event triggering.
$( "p" )
  .mouseup(function() {
    $( this ).append( "&lt;span style='color:#f00;'&gt;Mouse up.&lt;/span&gt;" );
  })
  .mousedown(function() {
    $( this ).append( "&lt;span style='color:#00f;'&gt;Mouse down.&lt;/span&gt;" );
  });

&lt;p&gt;Press mouse and release here.&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='mousedown' scope='instance'>
        <description>Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Show texts when mouseup and mousedown event triggering.
$( "p" )
  .mouseup(function() {
    $( this ).append( "&lt;span style='color:#f00;'&gt;Mouse up.&lt;/span&gt;" );
  })
  .mousedown(function() {
    $( this ).append( "&lt;span style='color:#00f;'&gt;Mouse down.&lt;/span&gt;" );
  });

&lt;p&gt;Press mouse and release here.&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='mouseenter' scope='instance'>
        <description>Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show texts when mouseenter and mouseout event triggering.
    mouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }

var i = 0;
$( "div.overout" )
  .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
    $( "p:last", this ).text( ++i );
  })
  .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
  });

var n = 0;
$( "div.enterleave" )
  .mouseenter(function() {
    $( "p:first", this ).text( "mouse enter" );
    $( "p:last", this ).text( ++n );
  })
  .mouseleave(function() {
    $( "p:first", this ).text( "mouse leave" );
  });

&lt;div class="out overout"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;

&lt;div class="out enterleave"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mouseenter' scope='instance'>
        <description>Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show texts when mouseenter and mouseout event triggering.
    mouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }

var i = 0;
$( "div.overout" )
  .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
    $( "p:last", this ).text( ++i );
  })
  .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
  });

var n = 0;
$( "div.enterleave" )
  .mouseenter(function() {
    $( "p:first", this ).text( "mouse enter" );
    $( "p:last", this ).text( ++n );
  })
  .mouseleave(function() {
    $( "p:first", this ).text( "mouse leave" );
  });

&lt;div class="out overout"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;

&lt;div class="out enterleave"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mouseenter' scope='instance'>
        <description>Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Show texts when mouseenter and mouseout event triggering.
    mouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }

var i = 0;
$( "div.overout" )
  .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
    $( "p:last", this ).text( ++i );
  })
  .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
  });

var n = 0;
$( "div.enterleave" )
  .mouseenter(function() {
    $( "p:first", this ).text( "mouse enter" );
    $( "p:last", this ).text( ++n );
  })
  .mouseleave(function() {
    $( "p:first", this ).text( "mouse leave" );
  });

&lt;div class="out overout"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;

&lt;div class="out enterleave"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mouseleave' scope='instance'>
        <description>Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show number of times mouseout and mouseleave events are triggered. mouseout fires when the pointer moves out of child element as well, while mouseleave fires only when the pointer moves out of the bound element.
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }

var i = 0;
$( "div.overout" )
  .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
  })
  .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
    $( "p:last", this ).text( ++i );
  });

var n = 0;
$( "div.enterleave" )
  .mouseenter(function() {
    $( "p:first", this ).text( "mouse enter" );
  })
  .mouseleave(function() {
    $( "p:first", this ).text( "mouse leave" );
    $( "p:last", this ).text( ++n );
  });

&lt;div class="out overout"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;
&lt;div class="out enterleave"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mouseleave' scope='instance'>
        <description>Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show number of times mouseout and mouseleave events are triggered. mouseout fires when the pointer moves out of child element as well, while mouseleave fires only when the pointer moves out of the bound element.
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }

var i = 0;
$( "div.overout" )
  .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
  })
  .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
    $( "p:last", this ).text( ++i );
  });

var n = 0;
$( "div.enterleave" )
  .mouseenter(function() {
    $( "p:first", this ).text( "mouse enter" );
  })
  .mouseleave(function() {
    $( "p:first", this ).text( "mouse leave" );
    $( "p:last", this ).text( ++n );
  });

&lt;div class="out overout"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;
&lt;div class="out enterleave"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mouseleave' scope='instance'>
        <description>Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Show number of times mouseout and mouseleave events are triggered. mouseout fires when the pointer moves out of child element as well, while mouseleave fires only when the pointer moves out of the bound element.
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }

var i = 0;
$( "div.overout" )
  .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
  })
  .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
    $( "p:last", this ).text( ++i );
  });

var n = 0;
$( "div.enterleave" )
  .mouseenter(function() {
    $( "p:first", this ).text( "mouse enter" );
  })
  .mouseleave(function() {
    $( "p:first", this ).text( "mouse leave" );
    $( "p:last", this ).text( ++n );
  });

&lt;div class="out overout"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;
&lt;div class="out enterleave"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mousemove' scope='instance'>
        <description>Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show the mouse coordinates when the mouse is moved over the yellow div.  Coordinates are relative to the window, which in this case is the iframe.
$( "div" ).mousemove(function( event ) {
  var pageCoords = "( " + event.pageX + ", " + event.pageY + " )";
  var clientCoords = "( " + event.clientX + ", " + event.clientY + " )";
  $( "span:first" ).text( "( event.pageX, event.pageY ) : " + pageCoords );
  $( "span:last" ).text( "( event.clientX, event.clientY ) : " + clientCoords );
});
300
  div {
    width: 220px;
    height: 170px;
    margin: 10px 50px 10px 10px;
    background: yellow;
    border: 2px groove;
    float: right;
  }
  p {
    margin: 0;
    margin-left: 10px;
    color: red;
    width: 220px;
    height: 120px;
    padding-top: 70px;
    float: left;
    font-size: 14px;
  }
  span {
    display: block;
  }

&lt;p&gt;
  &lt;span&gt;Move the mouse over the div.&lt;/span&gt;
  &lt;span&gt;&amp;nbsp;&lt;/span&gt;
&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mousemove' scope='instance'>
        <description>Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show the mouse coordinates when the mouse is moved over the yellow div.  Coordinates are relative to the window, which in this case is the iframe.
$( "div" ).mousemove(function( event ) {
  var pageCoords = "( " + event.pageX + ", " + event.pageY + " )";
  var clientCoords = "( " + event.clientX + ", " + event.clientY + " )";
  $( "span:first" ).text( "( event.pageX, event.pageY ) : " + pageCoords );
  $( "span:last" ).text( "( event.clientX, event.clientY ) : " + clientCoords );
});
300
  div {
    width: 220px;
    height: 170px;
    margin: 10px 50px 10px 10px;
    background: yellow;
    border: 2px groove;
    float: right;
  }
  p {
    margin: 0;
    margin-left: 10px;
    color: red;
    width: 220px;
    height: 120px;
    padding-top: 70px;
    float: left;
    font-size: 14px;
  }
  span {
    display: block;
  }

&lt;p&gt;
  &lt;span&gt;Move the mouse over the div.&lt;/span&gt;
  &lt;span&gt;&amp;nbsp;&lt;/span&gt;
&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mousemove' scope='instance'>
        <description>Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Show the mouse coordinates when the mouse is moved over the yellow div.  Coordinates are relative to the window, which in this case is the iframe.
$( "div" ).mousemove(function( event ) {
  var pageCoords = "( " + event.pageX + ", " + event.pageY + " )";
  var clientCoords = "( " + event.clientX + ", " + event.clientY + " )";
  $( "span:first" ).text( "( event.pageX, event.pageY ) : " + pageCoords );
  $( "span:last" ).text( "( event.clientX, event.clientY ) : " + clientCoords );
});
300
  div {
    width: 220px;
    height: 170px;
    margin: 10px 50px 10px 10px;
    background: yellow;
    border: 2px groove;
    float: right;
  }
  p {
    margin: 0;
    margin-left: 10px;
    color: red;
    width: 220px;
    height: 120px;
    padding-top: 70px;
    float: left;
    font-size: 14px;
  }
  span {
    display: block;
  }

&lt;p&gt;
  &lt;span&gt;Move the mouse over the div.&lt;/span&gt;
  &lt;span&gt;&amp;nbsp;&lt;/span&gt;
&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mouseout' scope='instance'>
        <description>Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show the number of times mouseout and mouseleave events are triggered.
  mouseout fires when the pointer moves out of the child element as well, while mouseleave fires only when the pointer moves out of the bound element.
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }

var i = 0;
$( "div.overout" )
  .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
    $( "p:last", this ).text( ++i );
  })
  .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
  });

var n = 0;
$( "div.enterleave" )
  .on( "mouseenter", function() {
    $( "p:first", this ).text( "mouse enter" );
  })
  .on( "mouseleave", function() {
    $( "p:first", this ).text( "mouse leave" );
    $( "p:last", this ).text( ++n );
  });

&lt;div class="out overout"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;

&lt;div class="out enterleave"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mouseout' scope='instance'>
        <description>Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show the number of times mouseout and mouseleave events are triggered.
  mouseout fires when the pointer moves out of the child element as well, while mouseleave fires only when the pointer moves out of the bound element.
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }

var i = 0;
$( "div.overout" )
  .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
    $( "p:last", this ).text( ++i );
  })
  .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
  });

var n = 0;
$( "div.enterleave" )
  .on( "mouseenter", function() {
    $( "p:first", this ).text( "mouse enter" );
  })
  .on( "mouseleave", function() {
    $( "p:first", this ).text( "mouse leave" );
    $( "p:last", this ).text( ++n );
  });

&lt;div class="out overout"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;

&lt;div class="out enterleave"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mouseout' scope='instance'>
        <description>Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Show the number of times mouseout and mouseleave events are triggered.
  mouseout fires when the pointer moves out of the child element as well, while mouseleave fires only when the pointer moves out of the bound element.
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }

var i = 0;
$( "div.overout" )
  .mouseout(function() {
    $( "p:first", this ).text( "mouse out" );
    $( "p:last", this ).text( ++i );
  })
  .mouseover(function() {
    $( "p:first", this ).text( "mouse over" );
  });

var n = 0;
$( "div.enterleave" )
  .on( "mouseenter", function() {
    $( "p:first", this ).text( "mouse enter" );
  })
  .on( "mouseleave", function() {
    $( "p:first", this ).text( "mouse leave" );
    $( "p:last", this ).text( ++n );
  });

&lt;div class="out overout"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in overout"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;

&lt;div class="out enterleave"&gt;
  &lt;p&gt;move your mouse&lt;/p&gt;
  &lt;div class="in enterleave"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;
  &lt;p&gt;0&lt;/p&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mouseover' scope='instance'>
        <description>Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show the number of times mouseover and mouseenter events are triggered.
mouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }

var i = 0;
$( "div.overout" )
  .mouseover(function() {
    i += 1;
    $( this ).find( "span" ).text( "mouse over x " + i );
  })
  .mouseout(function() {
    $( this ).find( "span" ).text( "mouse out " );
  });

var n = 0;
$( "div.enterleave" )
  .mouseenter(function() {
    n += 1;
    $( this ).find( "span" ).text( "mouse enter x " + n );
  })
  .mouseleave(function() {
    $( this ).find( "span" ).text( "mouse leave" );
  });

&lt;div class="out overout"&gt;
  &lt;span&gt;move your mouse&lt;/span&gt;
  &lt;div class="in"&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="out enterleave"&gt;
  &lt;span&gt;move your mouse&lt;/span&gt;
  &lt;div class="in"&gt;
  &lt;/div&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mouseover' scope='instance'>
        <description>Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show the number of times mouseover and mouseenter events are triggered.
mouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }

var i = 0;
$( "div.overout" )
  .mouseover(function() {
    i += 1;
    $( this ).find( "span" ).text( "mouse over x " + i );
  })
  .mouseout(function() {
    $( this ).find( "span" ).text( "mouse out " );
  });

var n = 0;
$( "div.enterleave" )
  .mouseenter(function() {
    n += 1;
    $( this ).find( "span" ).text( "mouse enter x " + n );
  })
  .mouseleave(function() {
    $( this ).find( "span" ).text( "mouse leave" );
  });

&lt;div class="out overout"&gt;
  &lt;span&gt;move your mouse&lt;/span&gt;
  &lt;div class="in"&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="out enterleave"&gt;
  &lt;span&gt;move your mouse&lt;/span&gt;
  &lt;div class="in"&gt;
  &lt;/div&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mouseover' scope='instance'>
        <description>Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Show the number of times mouseover and mouseenter events are triggered.
mouseover fires when the pointer moves into the child element as well, while mouseenter fires only when the pointer moves into the bound element.
  div.out {
    width: 40%;
    height: 120px;
    margin: 0 15px;
    background-color: #d6edfc;
    float: left;
  }
  div.in {
    width: 60%;
    height: 60%;
    background-color: #fc0;
    margin: 10px auto;
  }
  p {
    line-height: 1em;
    margin: 0;
    padding: 0;
  }

var i = 0;
$( "div.overout" )
  .mouseover(function() {
    i += 1;
    $( this ).find( "span" ).text( "mouse over x " + i );
  })
  .mouseout(function() {
    $( this ).find( "span" ).text( "mouse out " );
  });

var n = 0;
$( "div.enterleave" )
  .mouseenter(function() {
    n += 1;
    $( this ).find( "span" ).text( "mouse enter x " + n );
  })
  .mouseleave(function() {
    $( this ).find( "span" ).text( "mouse leave" );
  });

&lt;div class="out overout"&gt;
  &lt;span&gt;move your mouse&lt;/span&gt;
  &lt;div class="in"&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="out enterleave"&gt;
  &lt;span&gt;move your mouse&lt;/span&gt;
  &lt;div class="in"&gt;
  &lt;/div&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='mouseup' scope='instance'>
        <description>Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show texts when mouseup and mousedown event triggering.
$( "p" )
  .mouseup(function() {
    $( this ).append( "&lt;span style='color:#f00;'&gt;Mouse up.&lt;/span&gt;" );
  })
  .mousedown(function() {
    $( this ).append( "&lt;span style='color:#00f;'&gt;Mouse down.&lt;/span&gt;" );
  });

&lt;p&gt;Press mouse and release here.&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='mouseup' scope='instance'>
        <description>Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show texts when mouseup and mousedown event triggering.
$( "p" )
  .mouseup(function() {
    $( this ).append( "&lt;span style='color:#f00;'&gt;Mouse up.&lt;/span&gt;" );
  })
  .mousedown(function() {
    $( this ).append( "&lt;span style='color:#00f;'&gt;Mouse down.&lt;/span&gt;" );
  });

&lt;p&gt;Press mouse and release here.&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='mouseup' scope='instance'>
        <description>Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Show texts when mouseup and mousedown event triggering.
$( "p" )
  .mouseup(function() {
    $( this ).append( "&lt;span style='color:#f00;'&gt;Mouse up.&lt;/span&gt;" );
  })
  .mousedown(function() {
    $( this ).append( "&lt;span style='color:#00f;'&gt;Mouse down.&lt;/span&gt;" );
  });

&lt;p&gt;Press mouse and release here.&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='next' scope='instance'>
        <description>Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='optional' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find the very next sibling of each disabled button and change its text "this button is disabled".
$( "button[disabled]" ).next().text( "this button is disabled" );

  span {
    color: blue;
    font-weight: bold;
  }
  button {
    width: 100px;
  }

&lt;div&gt;&lt;button disabled="disabled"&gt;First&lt;/button&gt; - &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;button&gt;Second&lt;/button&gt; - &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;button disabled="disabled"&gt;Third&lt;/button&gt; - &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
Find the very next sibling of each paragraph. Keep only the ones with a class "selected".
$( "p" ).next( ".selected" ).css( "background", "yellow" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;p class="selected"&gt;Hello Again&lt;/p&gt;
&lt;div&gt;&lt;span&gt;And Again&lt;/span&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='nextAll' scope='instance'>
        <description>Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='optional' type='String'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Locate all the divs after the first and give them a class.
$( "div:first" ).nextAll().addClass( "after" );

  div {
    width: 80px;
    height: 80px;
    background: #abc;
    border: 2px solid black;
    margin: 10px;
    float: left;
  }
  div.after {
    border-color: red;
  }
150
&lt;div&gt;first&lt;/div&gt;
&lt;div&gt;sibling&lt;div&gt;child&lt;/div&gt;&lt;/div&gt;
&lt;div&gt;sibling&lt;/div&gt;
&lt;div&gt;sibling&lt;/div&gt;Locate all the paragraphs after the second child in the body and give them a class.
$( ":nth-child(1)" ).nextAll( "p" ).addClass( "after" );

  div, p {
    width: 60px;
    height: 60px;
    background: #abc;
    border: 2px solid black;
    margin: 10px;
    float: left;
  }
  .after {
    border-color: red;
  }
200
&lt;p&gt;p&lt;/p&gt;
&lt;div&gt;div&lt;/div&gt;
&lt;p&gt;p&lt;/p&gt;
&lt;p&gt;p&lt;/p&gt;
&lt;div&gt;div&lt;/div&gt;
&lt;p&gt;p&lt;/p&gt;
&lt;div&gt;div&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='nextUntil' scope='instance'>
        <description>Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='optional' type='Selector'>
            <description>A string containing a selector expression to indicate where to stop matching following sibling elements.</description>
          </parameter>
          <parameter name='filter' usage='optional' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>250pxFind the siblings that follow &lt;dt id="term-2"&gt; up to the next &lt;dt&gt; and give them a red background color. Also, find &lt;dd&gt; siblings that follow &lt;dt id="term-1"&gt; up to &lt;dt id="term-3"&gt; and give them a green text color. 
$( "#term-2" )
  .nextUntil( "dt" )
    .css( "background-color", "red" );
var term3 = document.getElementById( "term-3" );
$( "#term-1" )
  .nextUntil( term3, "dd" )
    .css( "color", "green" );

&lt;dl&gt;
  &lt;dt id="term-1"&gt;term 1&lt;/dt&gt;
  &lt;dd&gt;definition 1-a&lt;/dd&gt;
  &lt;dd&gt;definition 1-b&lt;/dd&gt;
  &lt;dd&gt;definition 1-c&lt;/dd&gt;
  &lt;dd&gt;definition 1-d&lt;/dd&gt;
  &lt;dt id="term-2"&gt;term 2&lt;/dt&gt;
  &lt;dd&gt;definition 2-a&lt;/dd&gt;
  &lt;dd&gt;definition 2-b&lt;/dd&gt;
  &lt;dd&gt;definition 2-c&lt;/dd&gt;
  &lt;dt id="term-3"&gt;term 3&lt;/dt&gt;
  &lt;dd&gt;definition 3-a&lt;/dd&gt;
  &lt;dd&gt;definition 3-b&lt;/dd&gt;
&lt;/dl&gt;
</example>
        </examples>
      </method>
      <method name='nextUntil' scope='instance'>
        <description>Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='element' usage='optional' type=''>
            <description>A DOM node or jQuery object indicating where to stop matching following sibling elements.</description>
          </parameter>
          <parameter name='filter' usage='optional' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>250pxFind the siblings that follow &lt;dt id="term-2"&gt; up to the next &lt;dt&gt; and give them a red background color. Also, find &lt;dd&gt; siblings that follow &lt;dt id="term-1"&gt; up to &lt;dt id="term-3"&gt; and give them a green text color. 
$( "#term-2" )
  .nextUntil( "dt" )
    .css( "background-color", "red" );
var term3 = document.getElementById( "term-3" );
$( "#term-1" )
  .nextUntil( term3, "dd" )
    .css( "color", "green" );

&lt;dl&gt;
  &lt;dt id="term-1"&gt;term 1&lt;/dt&gt;
  &lt;dd&gt;definition 1-a&lt;/dd&gt;
  &lt;dd&gt;definition 1-b&lt;/dd&gt;
  &lt;dd&gt;definition 1-c&lt;/dd&gt;
  &lt;dd&gt;definition 1-d&lt;/dd&gt;
  &lt;dt id="term-2"&gt;term 2&lt;/dt&gt;
  &lt;dd&gt;definition 2-a&lt;/dd&gt;
  &lt;dd&gt;definition 2-b&lt;/dd&gt;
  &lt;dd&gt;definition 2-c&lt;/dd&gt;
  &lt;dt id="term-3"&gt;term 3&lt;/dt&gt;
  &lt;dd&gt;definition 3-a&lt;/dd&gt;
  &lt;dd&gt;definition 3-b&lt;/dd&gt;
&lt;/dl&gt;
</example>
        </examples>
      </method>
      <method name='not' scope='instance'>
        <description>Remove elements from the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Adds a border to divs that are not green or blue.
$( "div" ).not( ".green, #blueone" )
  .css( "border-color", "red" );

  div {
    width: 50px;
    height: 50px;
    margin: 10px;
    float: left;
    background: yellow;
    border: 2px solid white;
  }
  .green {
    background: #8f8;
  }
  .gray {
    background: #ccc;
  }
  #blueone {
    background: #99f;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div id="blueone"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div class="green"&gt;&lt;/div&gt;
&lt;div class="green"&gt;&lt;/div&gt;
&lt;div class="gray"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Removes the element with the ID "selected" from the set of all paragraphs.
$( "p" ).not( $( "#selected" )[ 0 ] );
Removes the element with the ID "selected" from the set of all paragraphs.
$( "p" ).not( "#selected" );
Removes all elements that match "div p.selected" from the total set of all paragraphs.
$( "p" ).not( $( "div p.selected" ) );
</example>
        </examples>
      </method>
      <method name='not' scope='instance'>
        <description>Remove elements from the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='elements' usage='required' type='Elements'>
            <description>One or more DOM elements to remove from the matched set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Adds a border to divs that are not green or blue.
$( "div" ).not( ".green, #blueone" )
  .css( "border-color", "red" );

  div {
    width: 50px;
    height: 50px;
    margin: 10px;
    float: left;
    background: yellow;
    border: 2px solid white;
  }
  .green {
    background: #8f8;
  }
  .gray {
    background: #ccc;
  }
  #blueone {
    background: #99f;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div id="blueone"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div class="green"&gt;&lt;/div&gt;
&lt;div class="green"&gt;&lt;/div&gt;
&lt;div class="gray"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Removes the element with the ID "selected" from the set of all paragraphs.
$( "p" ).not( $( "#selected" )[ 0 ] );
Removes the element with the ID "selected" from the set of all paragraphs.
$( "p" ).not( "#selected" );
Removes all elements that match "div p.selected" from the total set of all paragraphs.
$( "p" ).not( $( "div p.selected" ) );
</example>
        </examples>
      </method>
      <method name='not' scope='instance'>
        <description>Remove elements from the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index)' usage='required' type='Function'>
            <description>A function used as a test for each element in the set. this is the current DOM element.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Adds a border to divs that are not green or blue.
$( "div" ).not( ".green, #blueone" )
  .css( "border-color", "red" );

  div {
    width: 50px;
    height: 50px;
    margin: 10px;
    float: left;
    background: yellow;
    border: 2px solid white;
  }
  .green {
    background: #8f8;
  }
  .gray {
    background: #ccc;
  }
  #blueone {
    background: #99f;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div id="blueone"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div class="green"&gt;&lt;/div&gt;
&lt;div class="green"&gt;&lt;/div&gt;
&lt;div class="gray"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Removes the element with the ID "selected" from the set of all paragraphs.
$( "p" ).not( $( "#selected" )[ 0 ] );
Removes the element with the ID "selected" from the set of all paragraphs.
$( "p" ).not( "#selected" );
Removes all elements that match "div p.selected" from the total set of all paragraphs.
$( "p" ).not( $( "div p.selected" ) );
</example>
        </examples>
      </method>
      <method name='not' scope='instance'>
        <description>Remove elements from the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='jQuery object' usage='required' type='PlainObject'>
            <description>An existing jQuery object to match the current set of elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Adds a border to divs that are not green or blue.
$( "div" ).not( ".green, #blueone" )
  .css( "border-color", "red" );

  div {
    width: 50px;
    height: 50px;
    margin: 10px;
    float: left;
    background: yellow;
    border: 2px solid white;
  }
  .green {
    background: #8f8;
  }
  .gray {
    background: #ccc;
  }
  #blueone {
    background: #99f;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div id="blueone"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div class="green"&gt;&lt;/div&gt;
&lt;div class="green"&gt;&lt;/div&gt;
&lt;div class="gray"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Removes the element with the ID "selected" from the set of all paragraphs.
$( "p" ).not( $( "#selected" )[ 0 ] );
Removes the element with the ID "selected" from the set of all paragraphs.
$( "p" ).not( "#selected" );
Removes all elements that match "div p.selected" from the total set of all paragraphs.
$( "p" ).not( $( "div p.selected" ) );
</example>
        </examples>
      </method>
      <method name='off' scope='instance'>
        <description>Remove an event handler.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='events' usage='required' type='String'>
            <description>One or more space-separated event types and optional namespaces, or just namespaces, such as "click", "keydown.myPlugin", or ".myPlugin".</description>
          </parameter>
          <parameter name='selector' usage='optional' type='String'>
            <description>A selector which should match the one originally passed to .on() when attaching event handlers.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='optional' type='Function'>
            <description>A handler function previously attached for the event(s), or the special value false.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Add and remove event handlers on the colored button.
function flash() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "body" )
    .on( "click", "#theone", flash )
    .find( "#theone" )
      .text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "body" )
    .off( "click", "#theone", flash )
    .find( "#theone" )
      .text( "Does nothing..." );
});

  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }

&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
&lt;button id="bind"&gt;Add Click&lt;/button&gt;
&lt;button id="unbind"&gt;Remove Click&lt;/button&gt;
&lt;div style="display:none;"&gt;Click!&lt;/div&gt;
Remove all event handlers from all paragraphs:
$( "p" ).off();
Remove all delegated click handlers from all paragraphs:
$( "p" ).off( "click", "**" );
Remove just one previously bound handler by passing it as the third argument:
var foo = function() {
  // Code to handle some kind of event
};

// ... Now foo will be called when paragraphs are clicked ...
$( "body" ).on( "click", "p", foo );

// ... Foo will no longer be called.
$( "body" ).off( "click", "p", foo );
Unbind all delegated event handlers by their namespace:
var validate = function() {
  // Code to validate form entries
};

// Delegate events under the ".validator" namespace
$( "form" ).on( "click.validator", "button", validate );

$( "form" ).on( "keypress.validator", "input[type='text']", validate );

// Remove event handlers in the ".validator" namespace
$( "form" ).off( ".validator" );
</example>
        </examples>
      </method>
      <method name='off' scope='instance'>
        <description>Remove an event handler.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='events' usage='required' type='PlainObject'>
            <description>An object where the string keys represent one or more space-separated event types and optional namespaces, and the values represent handler functions previously attached for the event(s).</description>
          </parameter>
          <parameter name='selector' usage='optional' type='String'>
            <description>A selector which should match the one originally passed to .on() when attaching event handlers.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Add and remove event handlers on the colored button.
function flash() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "body" )
    .on( "click", "#theone", flash )
    .find( "#theone" )
      .text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "body" )
    .off( "click", "#theone", flash )
    .find( "#theone" )
      .text( "Does nothing..." );
});

  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }

&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
&lt;button id="bind"&gt;Add Click&lt;/button&gt;
&lt;button id="unbind"&gt;Remove Click&lt;/button&gt;
&lt;div style="display:none;"&gt;Click!&lt;/div&gt;
Remove all event handlers from all paragraphs:
$( "p" ).off();
Remove all delegated click handlers from all paragraphs:
$( "p" ).off( "click", "**" );
Remove just one previously bound handler by passing it as the third argument:
var foo = function() {
  // Code to handle some kind of event
};

// ... Now foo will be called when paragraphs are clicked ...
$( "body" ).on( "click", "p", foo );

// ... Foo will no longer be called.
$( "body" ).off( "click", "p", foo );
Unbind all delegated event handlers by their namespace:
var validate = function() {
  // Code to validate form entries
};

// Delegate events under the ".validator" namespace
$( "form" ).on( "click.validator", "button", validate );

$( "form" ).on( "keypress.validator", "input[type='text']", validate );

// Remove event handlers in the ".validator" namespace
$( "form" ).off( ".validator" );
</example>
        </examples>
      </method>
      <method name='off' scope='instance'>
        <description>Remove an event handler.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Add and remove event handlers on the colored button.
function flash() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "body" )
    .on( "click", "#theone", flash )
    .find( "#theone" )
      .text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "body" )
    .off( "click", "#theone", flash )
    .find( "#theone" )
      .text( "Does nothing..." );
});

  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }

&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
&lt;button id="bind"&gt;Add Click&lt;/button&gt;
&lt;button id="unbind"&gt;Remove Click&lt;/button&gt;
&lt;div style="display:none;"&gt;Click!&lt;/div&gt;
Remove all event handlers from all paragraphs:
$( "p" ).off();
Remove all delegated click handlers from all paragraphs:
$( "p" ).off( "click", "**" );
Remove just one previously bound handler by passing it as the third argument:
var foo = function() {
  // Code to handle some kind of event
};

// ... Now foo will be called when paragraphs are clicked ...
$( "body" ).on( "click", "p", foo );

// ... Foo will no longer be called.
$( "body" ).off( "click", "p", foo );
Unbind all delegated event handlers by their namespace:
var validate = function() {
  // Code to validate form entries
};

// Delegate events under the ".validator" namespace
$( "form" ).on( "click.validator", "button", validate );

$( "form" ).on( "keypress.validator", "input[type='text']", validate );

// Remove event handlers in the ".validator" namespace
$( "form" ).off( ".validator" );
</example>
        </examples>
      </method>
      <method name='offset' scope='instance'>
        <description>Get the current coordinates of the first element in the set of matched elements, relative to the document.</description>
        <return-types>
          <return-type type='Object' />
        </return-types>
        <parameters />
        <examples>
          <example>Access the offset of the second paragraph:
var p = $( "p:last" );
var offset = p.offset();
p.html( "left: " + offset.left + ", top: " + offset.top );

  p {
    margin-left: 10px;
  }

&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;2nd Paragraph&lt;/p&gt;
Click to see the offset.
$( "*", document.body ).click(function( event ) {
  var offset = $( this ).offset();
  event.stopPropagation();
  $( "#result" ).text( this.tagName +
    " coords ( " + offset.left + ", " + offset.top + " )" );
});

  p {
    margin-left: 10px;
    color: blue;
    width: 200px;
    cursor: pointer;
  }
  span {
    color: red;
    cursor: pointer;
  }
  div.abs {
    width: 50px;
    height: 50px;
    position: absolute;
    left: 220px;
    top: 35px;
    background-color: green;
    cursor: pointer;
  }

&lt;div id="result"&gt;Click an element.&lt;/div&gt;
&lt;p&gt;
  This is the best way to &lt;span&gt;find&lt;/span&gt; an offset.
&lt;/p&gt;
&lt;div class="abs"&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='offset' scope='instance'>
        <description>Set the current coordinates of every element in the set of matched elements, relative to the document.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='coordinates' usage='required' type='PlainObject'>
            <description>An object containing the properties top and left, which are numbers indicating the new top and left coordinates for the elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Set the offset of the second paragraph:
$( "p:last" ).offset({ top: 10, left: 30 });

  p {
    margin-left: 10px;
  }

&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;2nd Paragraph&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='offset' scope='instance'>
        <description>Set the current coordinates of every element in the set of matched elements, relative to the document.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index, coords)' usage='required' type='Function'>
            <description>A function to return the coordinates to set. Receives the index of the element in the collection as the first argument and the current coordinates as the second argument. The function should return an object with the new top and left properties.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Set the offset of the second paragraph:
$( "p:last" ).offset({ top: 10, left: 30 });

  p {
    margin-left: 10px;
  }

&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;2nd Paragraph&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='offsetParent' scope='instance'>
        <description>Get the closest ancestor element that is positioned.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Find the offsetParent of item "A."250$( "li.item-a" ).offsetParent().css( "background-color", "red" );
&lt;ul class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii" style="position: relative;"&gt;II
    &lt;ul class="level-2"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</example>
        </examples>
      </method>
      <method name='on' scope='instance'>
        <description>Attach an event handler function for one or more events to the selected elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='events' usage='required' type='String'>
            <description>One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".</description>
          </parameter>
          <parameter name='selector' usage='optional' type='String'>
            <description>A selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element.</description>
          </parameter>
          <parameter name='data' usage='optional' type='Anything'>
            <description>Data to be passed to the handler in event.data when an event is triggered.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Display a paragraph's text in an alert when it is clicked:
$( "p" ).on( "click", function() {
  alert( $( this ).text() );
});
Pass data to the event handler, which is specified here by name:
function myHandler( event ) {
  alert( event.data.foo );
}
$( "p" ).on( "click", { foo: "bar" }, myHandler );
Cancel a form submit action and prevent the event from bubbling up by returning false:
$( "form" ).on( "submit", false );
Cancel only the default action by using .preventDefault().
$( "form" ).on( "submit", function( event ) {
  event.preventDefault();
});
Stop submit events from bubbling without preventing form submit, using .stopPropagation().
$( "form" ).on( "submit", function( event ) {
  event.stopPropagation();
});
Attach and trigger custom (non-browser) events.
$( "p" ).on( "myCustomEvent", function( event, myName ) {
  $( this ).text( myName + ", hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
});
$( "button" ).click(function () {
  $( "p" ).trigger( "myCustomEvent", [ "John" ] );
});

  p {
    color: red;
  }
  span {
    color: blue;
  }

&lt;p&gt;Has an attached custom event.&lt;/p&gt;
&lt;button&gt;Trigger custom event&lt;/button&gt;
&lt;span style="display:none;"&gt;&lt;/span&gt;
Attach multiple event handlers simultaneously using a plain object.
&lt;div class="test"&gt;test div&lt;/div&gt;

  .test {
    color: #000;
    padding: .5em;
    border: 1px solid #444;
  }
  .active {
    color: #900;
  }
  .inside {
    background-color: aqua;
  }

$( "div.test" ).on({
  click: function() {
    $( this ).toggleClass( "active" );
  }, mouseenter: function() {
    $( this ).addClass( "inside" );
  }, mouseleave: function() {
    $( this ).removeClass( "inside" );
  }
});
Click any paragraph to add another after it. Note that .on() allows a click event on any paragraph--even new ones--since the event is handled by the ever-present body element after it bubbles to there.
var count = 0;
$( "body" ).on( "click", "p", function() {
  $( this ).after( "&lt;p&gt;Another paragraph! " + (++count) + "&lt;/p&gt;" );
});

  p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
  }
  p.over {
    background: #ccc;
  }
  span {
    color: red;
  }

&lt;p&gt;Click me!&lt;/p&gt;
&lt;span&gt;&lt;/span&gt;
Display each paragraph's text in an alert box whenever it is clicked:
$( "body" ).on( "click", "p", function() {
  alert( $( this ).text() );
});
Cancel a link's default action using the preventDefault method.
$( "body" ).on( "click", "a", function( event ) {
  event.preventDefault();
});
</example>
        </examples>
      </method>
      <method name='on' scope='instance'>
        <description>Attach an event handler function for one or more events to the selected elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='events' usage='required' type='PlainObject'>
            <description>An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).</description>
          </parameter>
          <parameter name='selector' usage='optional' type='String'>
            <description>A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element.</description>
          </parameter>
          <parameter name='data' usage='optional' type='Anything'>
            <description>Data to be passed to the handler in event.data when an event occurs.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Display a paragraph's text in an alert when it is clicked:
$( "p" ).on( "click", function() {
  alert( $( this ).text() );
});
Pass data to the event handler, which is specified here by name:
function myHandler( event ) {
  alert( event.data.foo );
}
$( "p" ).on( "click", { foo: "bar" }, myHandler );
Cancel a form submit action and prevent the event from bubbling up by returning false:
$( "form" ).on( "submit", false );
Cancel only the default action by using .preventDefault().
$( "form" ).on( "submit", function( event ) {
  event.preventDefault();
});
Stop submit events from bubbling without preventing form submit, using .stopPropagation().
$( "form" ).on( "submit", function( event ) {
  event.stopPropagation();
});
Attach and trigger custom (non-browser) events.
$( "p" ).on( "myCustomEvent", function( event, myName ) {
  $( this ).text( myName + ", hi there!" );
  $( "span" )
    .stop()
    .css( "opacity", 1 )
    .text( "myName = " + myName )
    .fadeIn( 30 )
    .fadeOut( 1000 );
});
$( "button" ).click(function () {
  $( "p" ).trigger( "myCustomEvent", [ "John" ] );
});

  p {
    color: red;
  }
  span {
    color: blue;
  }

&lt;p&gt;Has an attached custom event.&lt;/p&gt;
&lt;button&gt;Trigger custom event&lt;/button&gt;
&lt;span style="display:none;"&gt;&lt;/span&gt;
Attach multiple event handlers simultaneously using a plain object.
&lt;div class="test"&gt;test div&lt;/div&gt;

  .test {
    color: #000;
    padding: .5em;
    border: 1px solid #444;
  }
  .active {
    color: #900;
  }
  .inside {
    background-color: aqua;
  }

$( "div.test" ).on({
  click: function() {
    $( this ).toggleClass( "active" );
  }, mouseenter: function() {
    $( this ).addClass( "inside" );
  }, mouseleave: function() {
    $( this ).removeClass( "inside" );
  }
});
Click any paragraph to add another after it. Note that .on() allows a click event on any paragraph--even new ones--since the event is handled by the ever-present body element after it bubbles to there.
var count = 0;
$( "body" ).on( "click", "p", function() {
  $( this ).after( "&lt;p&gt;Another paragraph! " + (++count) + "&lt;/p&gt;" );
});

  p {
    background: yellow;
    font-weight: bold;
    cursor: pointer;
    padding: 5px;
  }
  p.over {
    background: #ccc;
  }
  span {
    color: red;
  }

&lt;p&gt;Click me!&lt;/p&gt;
&lt;span&gt;&lt;/span&gt;
Display each paragraph's text in an alert box whenever it is clicked:
$( "body" ).on( "click", "p", function() {
  alert( $( this ).text() );
});
Cancel a link's default action using the preventDefault method.
$( "body" ).on( "click", "a", function( event ) {
  event.preventDefault();
});
</example>
        </examples>
      </method>
      <method name='one' scope='instance'>
        <description>Attach a handler to an event for the elements. The handler is executed at most once per element per event type.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='events' usage='required' type='String'>
            <description>A string containing one or more JavaScript event types, such as "click" or "submit," or custom event names.</description>
          </parameter>
          <parameter name='data' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute at the time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Tie a one-time click to each div.
var n = 0;
$( "div" ).one( "click", function() {
  var index = $( "div" ).index( this );
  $( this ).css({
    borderStyle: "inset",
    cursor: "auto"
  });
  $( "p" ).text( "Div at index #" + index + " clicked." +
    " That's " + (++n) + " total clicks." );
});

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    background: green;
    border: 10px outset;
    cursor:pointer;
  }
  p {
    color: red;
    margin: 0;
    clear: left;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;Click a green square...&lt;/p&gt;
To display the text of all paragraphs in an alert box the first time each of them is clicked:
$( "p" ).one( "click", function() {
  alert( $( this ).text() );
});
Event handlers will trigger once per element per event type
var n = 0;
$(".target").one("click mouseenter", function() {
  $(".count").html(++n);
});

&lt;div class="count"&gt;0&lt;/div&gt;
&lt;div class="target"&gt;Hover/click me&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='one' scope='instance'>
        <description>Attach a handler to an event for the elements. The handler is executed at most once per element per event type.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='events' usage='required' type='String'>
            <description>One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".</description>
          </parameter>
          <parameter name='selector' usage='optional' type='String'>
            <description>A selector string to filter the descendants of the selected elements that trigger the event. If the selector is null or omitted, the event is always triggered when it reaches the selected element.</description>
          </parameter>
          <parameter name='data' usage='optional' type='Anything'>
            <description>Data to be passed to the handler in event.data when an event is triggered.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute when the event is triggered. The value false is also allowed as a shorthand for a function that simply does return false.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Tie a one-time click to each div.
var n = 0;
$( "div" ).one( "click", function() {
  var index = $( "div" ).index( this );
  $( this ).css({
    borderStyle: "inset",
    cursor: "auto"
  });
  $( "p" ).text( "Div at index #" + index + " clicked." +
    " That's " + (++n) + " total clicks." );
});

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    background: green;
    border: 10px outset;
    cursor:pointer;
  }
  p {
    color: red;
    margin: 0;
    clear: left;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;Click a green square...&lt;/p&gt;
To display the text of all paragraphs in an alert box the first time each of them is clicked:
$( "p" ).one( "click", function() {
  alert( $( this ).text() );
});
Event handlers will trigger once per element per event type
var n = 0;
$(".target").one("click mouseenter", function() {
  $(".count").html(++n);
});

&lt;div class="count"&gt;0&lt;/div&gt;
&lt;div class="target"&gt;Hover/click me&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='one' scope='instance'>
        <description>Attach a handler to an event for the elements. The handler is executed at most once per element per event type.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='events' usage='required' type='PlainObject'>
            <description>An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).</description>
          </parameter>
          <parameter name='selector' usage='optional' type='String'>
            <description>A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element.</description>
          </parameter>
          <parameter name='data' usage='optional' type='Anything'>
            <description>Data to be passed to the handler in event.data when an event occurs.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Tie a one-time click to each div.
var n = 0;
$( "div" ).one( "click", function() {
  var index = $( "div" ).index( this );
  $( this ).css({
    borderStyle: "inset",
    cursor: "auto"
  });
  $( "p" ).text( "Div at index #" + index + " clicked." +
    " That's " + (++n) + " total clicks." );
});

  div {
    width: 60px;
    height: 60px;
    margin: 5px;
    float: left;
    background: green;
    border: 10px outset;
    cursor:pointer;
  }
  p {
    color: red;
    margin: 0;
    clear: left;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;Click a green square...&lt;/p&gt;
To display the text of all paragraphs in an alert box the first time each of them is clicked:
$( "p" ).one( "click", function() {
  alert( $( this ).text() );
});
Event handlers will trigger once per element per event type
var n = 0;
$(".target").one("click mouseenter", function() {
  $(".count").html(++n);
});

&lt;div class="count"&gt;0&lt;/div&gt;
&lt;div class="target"&gt;Hover/click me&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='outerHeight' scope='instance'>
        <description>Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns a number (without "px") representation of the value or null if called on an empty set of elements.</description>
        <return-types>
          <return-type type='Number' />
        </return-types>
        <parameters>
          <parameter name='includeMargin' usage='optional' type='Boolean'>
            <description>A Boolean indicating whether to include the element's margin in the calculation.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Get the outerHeight of a paragraph.
var p = $( "p:first" );
$( "p:last" ).text(
  "outerHeight:" + p.outerHeight() +
  " , outerHeight( true ):" + p.outerHeight( true ) );

  p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
  }

&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='outerWidth' scope='instance'>
        <description>Get the current computed width for the first element in the set of matched elements, including padding and border.</description>
        <return-types>
          <return-type type='Number' />
        </return-types>
        <parameters>
          <parameter name='includeMargin' usage='optional' type='Boolean'>
            <description>A Boolean indicating whether to include the element's margin in the calculation.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Get the outerWidth of a paragraph.
var p = $( "p:first" );
$( "p:last" ).text(
  "outerWidth:" + p.outerWidth() +
  " , outerWidth( true ):" + p.outerWidth( true ) );

  p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
  }

&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='parent' scope='instance'>
        <description>Get the parent of each element in the current set of matched elements, optionally filtered by a selector.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='optional' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Shows the parent of each element as (parent &gt; child).  Check the View Source to see the raw html.
$( "*", document.body ).each(function() {
  var parentTag = $( this ).parent().get( 0 ).tagName;
  $( this ).prepend( document.createTextNode( parentTag + " &gt; " ) );
});

  div, p {
    margin: 10px;
  }

&lt;div&gt;div,
  &lt;span&gt;span, &lt;/span&gt;
  &lt;b&gt;b &lt;/b&gt;
&lt;/div&gt;

&lt;p&gt;p,
  &lt;span&gt;span,
    &lt;em&gt;em &lt;/em&gt;
  &lt;/span&gt;
&lt;/p&gt;

&lt;div&gt;div,
  &lt;strong&gt;strong,
    &lt;span&gt;span, &lt;/span&gt;
    &lt;em&gt;em,
      &lt;b&gt;b, &lt;/b&gt;
    &lt;/em&gt;
  &lt;/strong&gt;
  &lt;b&gt;b &lt;/b&gt;
&lt;/div&gt;
Find the parent element of each paragraph with a class "selected".
$( "p" ).parent( ".selected" ).css( "background", "yellow" );

&lt;div&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;
&lt;div class="selected"&gt;&lt;p&gt;Hello Again&lt;/p&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='parents' scope='instance'>
        <description>Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='optional' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find all parent elements of each b.
var parentEls = $( "b" ).parents()
  .map(function() {
    return this.tagName;
  })
  .get()
  .join( ", " );
$( "b" ).append( "&lt;strong&gt;" + parentEls + "&lt;/strong&gt;" );

  b, span, p, html body {
    padding: .5em;
    border: 1px solid;
  }
  b {
    color: blue;
  }
  strong {
    color: red;
  }

&lt;div&gt;
  &lt;p&gt;
    &lt;span&gt;
      &lt;b&gt;My parents are: &lt;/b&gt;
    &lt;/span&gt;
  &lt;/p&gt;
&lt;/div&gt;
Click to find all unique div parent elements of each span.
function showParents() {
  $( "div" ).css( "border-color", "white" );
  var len = $( "span.selected" )
    .parents( "div" )
      .css( "border", "2px red solid" )
      .length;
  $( "b" ).text( "Unique div parents: " + len );
}
$( "span" ).click(function() {
  $( this ).toggleClass( "selected" );
  showParents();
});

  p, div, span {
    margin: 2px;
    padding: 1px;
  }
  div {
    border: 2px white solid;
  }
  span {
    cursor: pointer;
    font-size: 12px;
  }
  .selected {
    color: blue;
  }
  b {
    color: red;
    display: block;
    font-size: 14px;
  }

&lt;p&gt;
  &lt;div&gt;
    &lt;div&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;/div&gt;
      &lt;span&gt;Hello Again&lt;/span&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;span&gt;And Hello Again&lt;/span&gt;
    &lt;/div&gt;
  &lt;/p&gt;
  &lt;b&gt;Click Hellos to toggle their parents.&lt;/b&gt;
</example>
        </examples>
      </method>
      <method name='parentsUntil' scope='instance'>
        <description>Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='optional' type='Selector'>
            <description>A string containing a selector expression to indicate where to stop matching ancestor elements.</description>
          </parameter>
          <parameter name='filter' usage='optional' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>220pxFind the ancestors of &lt;li class="item-a"&gt; up to &lt;ul class="level-1"&gt; and give them a red background color. Also, find ancestors of &lt;li class="item-2"&gt; that have a class of "yes" up to &lt;ul class="level-1"&gt; and give them a green border.
$( "li.item-a" )
  .parentsUntil( ".level-1" )
    .css( "background-color", "red" );

$( "li.item-2" )
  .parentsUntil( $( "ul.level-1" ), ".yes" )
    .css( "border", "3px solid green" );

&lt;ul class="level-1 yes"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii"&gt;II
    &lt;ul class="level-2 yes"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</example>
        </examples>
      </method>
      <method name='parentsUntil' scope='instance'>
        <description>Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='element' usage='optional' type=''>
            <description>A DOM node or jQuery object indicating where to stop matching ancestor elements.</description>
          </parameter>
          <parameter name='filter' usage='optional' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>220pxFind the ancestors of &lt;li class="item-a"&gt; up to &lt;ul class="level-1"&gt; and give them a red background color. Also, find ancestors of &lt;li class="item-2"&gt; that have a class of "yes" up to &lt;ul class="level-1"&gt; and give them a green border.
$( "li.item-a" )
  .parentsUntil( ".level-1" )
    .css( "background-color", "red" );

$( "li.item-2" )
  .parentsUntil( $( "ul.level-1" ), ".yes" )
    .css( "border", "3px solid green" );

&lt;ul class="level-1 yes"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii"&gt;II
    &lt;ul class="level-2 yes"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</example>
        </examples>
      </method>
      <method name='position' scope='instance'>
        <description>Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.</description>
        <return-types>
          <return-type type='Object' />
        </return-types>
        <parameters />
        <examples>
          <example>Access the position of the second paragraph:
var p = $( "p:first" );
var position = p.position();
$( "p:last" ).text( "left: " + position.left + ", top: " + position.top );

  div {
    padding: 15px;
  }
  p {
    margin-left: 10px;
  }

&lt;div&gt;
  &lt;p&gt;Hello&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='prepend' scope='instance'>
        <description>Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='content' usage='required' type=''>
            <description>DOM element, array of elements, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements.</description>
          </parameter>
          <parameter name='content' usage='optional' type=''>
            <description>One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the beginning of each element in the set of matched elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Prepends some HTML to all paragraphs.
$( "p" ).prepend( "&lt;b&gt;Hello &lt;/b&gt;" );

  p {
    background: yellow;
  }

&lt;p&gt;there, friend!&lt;/p&gt;
&lt;p&gt;amigo!&lt;/p&gt;
Prepends a DOM Element to all paragraphs.
$( "p" ).prepend( document.createTextNode( "Hello " ) );

  p {
    background: yellow;
  }

&lt;p&gt;is what I'd say&lt;/p&gt;
&lt;p&gt;is what I said&lt;/p&gt;
Prepends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.
$( "p" ).prepend( $( "b" ) );

  p {
    background: yellow;
  }

&lt;p&gt; is what was said.&lt;/p&gt;&lt;b&gt;Hello&lt;/b&gt;
</example>
        </examples>
      </method>
      <method name='prepend' scope='instance'>
        <description>Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index, html)' usage='required' type='Function'>
            <description>A function that returns an HTML string, DOM element(s), or jQuery object to insert at the beginning of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Prepends some HTML to all paragraphs.
$( "p" ).prepend( "&lt;b&gt;Hello &lt;/b&gt;" );

  p {
    background: yellow;
  }

&lt;p&gt;there, friend!&lt;/p&gt;
&lt;p&gt;amigo!&lt;/p&gt;
Prepends a DOM Element to all paragraphs.
$( "p" ).prepend( document.createTextNode( "Hello " ) );

  p {
    background: yellow;
  }

&lt;p&gt;is what I'd say&lt;/p&gt;
&lt;p&gt;is what I said&lt;/p&gt;
Prepends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.
$( "p" ).prepend( $( "b" ) );

  p {
    background: yellow;
  }

&lt;p&gt; is what was said.&lt;/p&gt;&lt;b&gt;Hello&lt;/b&gt;
</example>
        </examples>
      </method>
      <method name='prependTo' scope='instance'>
        <description>Insert every element in the set of matched elements to the beginning of the target.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='target' usage='required' type=''>
            <description>A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Prepend all spans to the element with the ID "foo" (Check .prepend() documentation for more examples)
  div {
    background: yellow;
  }

$( "span" ).prependTo( "#foo" );

&lt;div id="foo"&gt;FOO!&lt;/div&gt;
&lt;span&gt;I have something to say... &lt;/span&gt;
</example>
        </examples>
      </method>
      <method name='prev' scope='instance'>
        <description>Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='optional' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find the very previous sibling of each div.
var $curr = $( "#start" );
$curr.css( "background", "#f99" );
$( "button" ).click(function() {
  $curr = $curr.prev();
  $( "div" ).css( "background", "" );
  $curr.css( "background", "#f99" );
});

  div {
    width: 40px;
    height: 40px;
    margin: 10px;
    float: left;
    border: 2px blue solid;
    padding: 2px;
  }
  span {
    font-size: 14px;
  }
  p {
    clear: left;
    margin: 10px;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;span&gt;has child&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div id="start"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;button&gt;Go to Prev&lt;/button&gt;&lt;/p&gt;
For each paragraph, find the very previous sibling that has a class "selected".
$( "p" ).prev( ".selected" ).css( "background", "yellow" );

&lt;div&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;/div&gt;
&lt;p class="selected"&gt;Hello Again&lt;/p&gt;
&lt;p&gt;And Again&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='prevAll' scope='instance'>
        <description>Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='optional' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Locate all the divs preceding the last div and give them a class.
$( "div:last" ).prevAll().addClass( "before" );

  div {
    width: 70px;
    height: 70px;
    background: #abc;
    border: 2px solid black;
    margin: 10px;
    float: left;
  }
  div.before {
    border-color: red;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='prevUntil' scope='instance'>
        <description>Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='optional' type='Selector'>
            <description>A string containing a selector expression to indicate where to stop matching preceding sibling elements.</description>
          </parameter>
          <parameter name='filter' usage='optional' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>250pxFind the siblings that precede &lt;dt id="term-2"&gt; up to the preceding &lt;dt&gt; and give them a red background color. Also, find previous &lt;dd&gt; siblings of &lt;dt id="term-3"&gt; up to &lt;dt id="term-1"&gt; and give them a green text color.
$( "#term-2" ).prevUntil( "dt" )
  .css( "background-color", "red" );

var term1 = document.getElementById( "term-1" );
$( "#term-3" ).prevUntil( term1, "dd" )
  .css( "color", "green" );

&lt;dl&gt;
  &lt;dt id="term-1"&gt;term 1&lt;/dt&gt;
  &lt;dd&gt;definition 1-a&lt;/dd&gt;
  &lt;dd&gt;definition 1-b&lt;/dd&gt;
  &lt;dd&gt;definition 1-c&lt;/dd&gt;
  &lt;dd&gt;definition 1-d&lt;/dd&gt;

  &lt;dt id="term-2"&gt;term 2&lt;/dt&gt;
  &lt;dd&gt;definition 2-a&lt;/dd&gt;
  &lt;dd&gt;definition 2-b&lt;/dd&gt;
  &lt;dd&gt;definition 2-c&lt;/dd&gt;

  &lt;dt id="term-3"&gt;term 3&lt;/dt&gt;
  &lt;dd&gt;definition 3-a&lt;/dd&gt;
  &lt;dd&gt;definition 3-b&lt;/dd&gt;
&lt;/dl&gt;
</example>
        </examples>
      </method>
      <method name='prevUntil' scope='instance'>
        <description>Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='element' usage='optional' type=''>
            <description>A DOM node or jQuery object indicating where to stop matching preceding sibling elements.</description>
          </parameter>
          <parameter name='filter' usage='optional' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>250pxFind the siblings that precede &lt;dt id="term-2"&gt; up to the preceding &lt;dt&gt; and give them a red background color. Also, find previous &lt;dd&gt; siblings of &lt;dt id="term-3"&gt; up to &lt;dt id="term-1"&gt; and give them a green text color.
$( "#term-2" ).prevUntil( "dt" )
  .css( "background-color", "red" );

var term1 = document.getElementById( "term-1" );
$( "#term-3" ).prevUntil( term1, "dd" )
  .css( "color", "green" );

&lt;dl&gt;
  &lt;dt id="term-1"&gt;term 1&lt;/dt&gt;
  &lt;dd&gt;definition 1-a&lt;/dd&gt;
  &lt;dd&gt;definition 1-b&lt;/dd&gt;
  &lt;dd&gt;definition 1-c&lt;/dd&gt;
  &lt;dd&gt;definition 1-d&lt;/dd&gt;

  &lt;dt id="term-2"&gt;term 2&lt;/dt&gt;
  &lt;dd&gt;definition 2-a&lt;/dd&gt;
  &lt;dd&gt;definition 2-b&lt;/dd&gt;
  &lt;dd&gt;definition 2-c&lt;/dd&gt;

  &lt;dt id="term-3"&gt;term 3&lt;/dt&gt;
  &lt;dd&gt;definition 3-a&lt;/dd&gt;
  &lt;dd&gt;definition 3-b&lt;/dd&gt;
&lt;/dl&gt;
</example>
        </examples>
      </method>
      <method name='promise' scope='instance'>
        <description> Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. </description>
        <return-types>
          <return-type type='Promise' />
        </return-types>
        <parameters>
          <parameter name='type' usage='optional' type='String'>
            <description> The type of queue that needs to be observed. </description>
          </parameter>
          <parameter name='target' usage='optional' type='PlainObject'>
            <description>Object onto which the promise methods have to be attached</description>
          </parameter>
        </parameters>
        <examples>
          <example>Using .promise() on a collection with no active animation returns a resolved Promise:
var div = $( "&lt;div&gt;" );

div.promise().done(function( arg1 ) {
  // Will fire right away and alert "true"
  alert( this === div &amp;&amp; arg1 === div );
});
Resolve the returned Promise when all animations have ended (including those initiated in the animation callback or added later on):
  div {
    height: 50px;
    width: 50px;
    float: left;
    margin-right: 10px;
    display: none;
    background-color: #090;
  }

&lt;button&gt;Go&lt;/button&gt;
&lt;p&gt;Ready...&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;

$( "button" ).on( "click", function() {
  $( "p" ).append( "Started..." );

  $( "div" ).each(function( i ) {
    $( this ).fadeIn().fadeOut( 1000 * ( i + 1 ) );
  });

  $( "div" ).promise().done(function() {
    $( "p" ).append( " Finished! " );
  });
});
Resolve the returned Promise using a $.when() statement (the .promise() method makes it possible to do this with jQuery collections):
  div {
    height: 50px;
    width: 50px;
    float: left;
    margin-right: 10px;
    display: none;
    background-color: #090;
  }

&lt;button&gt;Go&lt;/button&gt;
&lt;p&gt;Ready...&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;

var effect = function() {
  return $( "div" ).fadeIn( 800 ).delay( 1200 ).fadeOut();
};

$( "button" ).on( "click", function() {
  $( "p" ).append( " Started... " );

  $.when( effect() ).done(function() {
    $( "p" ).append( " Finished! " );
  });
});
</example>
        </examples>
      </method>
      <method name='prop' scope='instance'>
        <description>Get the value of a property for the first element in the set of matched elements.</description>
        <return-types>
          <return-type type='' />
        </return-types>
        <parameters>
          <parameter name='propertyName' usage='required' type='String'>
            <description>The name of the property to get.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Display the checked property and attribute of a checkbox as it changes.
$( "input" ).change(function() {
  var $input = $( this );
  $( "p" ).html(
    ".attr( \"checked\" ): &lt;b&gt;" + $input.attr( "checked" ) + "&lt;/b&gt;&lt;br&gt;" +
    ".prop( \"checked\" ): &lt;b&gt;" + $input.prop( "checked" ) + "&lt;/b&gt;&lt;br&gt;" +
    ".is( \":checked\" ): &lt;b&gt;" + $input.is( ":checked" ) ) + "&lt;/b&gt;";
}).change();

  p {
    margin: 20px 0 0;
  }
  b {
    color: blue;
  }

&lt;input id="check1" type="checkbox" checked="checked"&gt;
&lt;label for="check1"&gt;Check me&lt;/label&gt;
&lt;p&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='prop' scope='instance'>
        <description>Set one or more properties for the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='propertyName' usage='required' type='String'>
            <description>The name of the property to set.</description>
          </parameter>
          <parameter name='value' usage='required' type=''>
            <description>A value to set for the property.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Disable all checkboxes on the page.
$( "input[type='checkbox']" ).prop({
  disabled: true
});

  img {
    padding: 10px;
  }
  div {
    color: red;
    font-size: 24px;
  }

  &lt;input type="checkbox" checked="checked"&gt;
  &lt;input type="checkbox"&gt;
  &lt;input type="checkbox"&gt;
  &lt;input type="checkbox" checked="checked"&gt;
</example>
        </examples>
      </method>
      <method name='prop' scope='instance'>
        <description>Set one or more properties for the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='properties' usage='required' type='PlainObject'>
            <description>An object of property-value pairs to set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Disable all checkboxes on the page.
$( "input[type='checkbox']" ).prop({
  disabled: true
});

  img {
    padding: 10px;
  }
  div {
    color: red;
    font-size: 24px;
  }

  &lt;input type="checkbox" checked="checked"&gt;
  &lt;input type="checkbox"&gt;
  &lt;input type="checkbox"&gt;
  &lt;input type="checkbox" checked="checked"&gt;
</example>
        </examples>
      </method>
      <method name='prop' scope='instance'>
        <description>Set one or more properties for the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='propertyName' usage='required' type='String'>
            <description>The name of the property to set.</description>
          </parameter>
          <parameter name='function(index, oldPropertyValue)' usage='required' type='Function'>
            <description>A function returning the value to set. Receives the index position of the element in the set and the old property value as arguments. Within the function, the keyword this refers to the current element.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Disable all checkboxes on the page.
$( "input[type='checkbox']" ).prop({
  disabled: true
});

  img {
    padding: 10px;
  }
  div {
    color: red;
    font-size: 24px;
  }

  &lt;input type="checkbox" checked="checked"&gt;
  &lt;input type="checkbox"&gt;
  &lt;input type="checkbox"&gt;
  &lt;input type="checkbox" checked="checked"&gt;
</example>
        </examples>
      </method>
      <method name='pushStack' scope='instance'>
        <description>Add a collection of DOM elements onto the jQuery stack.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='elements' usage='required' type='Array'>
            <description>An array of elements to push onto the stack and make into a new jQuery object.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Add some elements onto the jQuery stack, then pop back off again.
jQuery([])
  .pushStack( document.getElementsByTagName( "div" ) )
  .remove()
  .end();
</example>
        </examples>
      </method>
      <method name='pushStack' scope='instance'>
        <description>Add a collection of DOM elements onto the jQuery stack.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='elements' usage='required' type='Array'>
            <description>An array of elements to push onto the stack and make into a new jQuery object.</description>
          </parameter>
          <parameter name='name' usage='required' type='String'>
            <description>The name of a jQuery method that generated the array of elements.</description>
          </parameter>
          <parameter name='arguments' usage='required' type='Array'>
            <description>The arguments that were passed in to the jQuery method (for serialization).</description>
          </parameter>
        </parameters>
        <examples>
          <example>Add some elements onto the jQuery stack, then pop back off again.
jQuery([])
  .pushStack( document.getElementsByTagName( "div" ) )
  .remove()
  .end();
</example>
        </examples>
      </method>
      <method name='queue' scope='instance'>
        <description>Show the queue of functions to be executed on the matched elements.</description>
        <return-types>
          <return-type type='Array' />
        </return-types>
        <parameters>
          <parameter name='queueName' usage='optional' type='String'>
            <description>A string containing the name of the queue. Defaults to fx, the standard effects queue.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show the length of the queue.
var div = $( "div" );

function runIt() {
  div
    .show( "slow" )
    .animate({ left: "+=200" }, 2000 )
    .slideToggle( 1000 )
    .slideToggle( "fast" )
    .animate({ left: "-=200" }, 1500 )
    .hide( "slow" )
    .show( 1200 )
    .slideUp( "normal", runIt );
}

function showIt() {
  var n = div.queue( "fx" );
  $( "span" ).text( n.length );
  setTimeout( showIt, 100 );
}

runIt();
showIt();

  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 60px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }
  p {
    color: red;
  }

&lt;p&gt;The queue length is: &lt;span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='queue' scope='instance'>
        <description>Manipulate the queue of functions to be executed, once for each matched element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='queueName' usage='optional' type='String'>
            <description>A string containing the name of the queue. Defaults to fx, the standard effects queue.</description>
          </parameter>
          <parameter name='newQueue' usage='required' type='Array'>
            <description>An array of functions to replace the current queue contents.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Queue a custom function.
$( document.body ).click(function() {
  $( "div" )
    .show( "slow" )
    .animate({ left: "+=200" }, 2000 )
    .queue(function() {
      $( this ).addClass( "newcolor" ).dequeue();
    })
    .animate({ left: "-=200" }, 500 )
    .queue(function() {
      $( this ).removeClass( "newcolor" ).dequeue();
    })
    .slideUp();
});

  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }

Click here...
&lt;div&gt;&lt;/div&gt;
Set a queue array to delete the queue.
$( "#start" ).click(function() {
  $( "div" )
    .show( "slow" )
    .animate({ left: "+=200" }, 5000 )
    .queue(function() {
      $( this ).addClass( "newcolor" ).dequeue();
    })
    .animate({ left: '-=200' }, 1500 )
    .queue(function() {
      $( this ).removeClass( "newcolor" ).dequeue();
    })
    .slideUp();
});
$( "#stop" ).click(function() {
  $( "div" )
    .queue( "fx", [] )
    .stop();
});

  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }

&lt;button id="start"&gt;Start&lt;/button&gt;
&lt;button id="stop"&gt;Stop&lt;/button&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='queue' scope='instance'>
        <description>Manipulate the queue of functions to be executed, once for each matched element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='queueName' usage='optional' type='String'>
            <description>A string containing the name of the queue. Defaults to fx, the standard effects queue.</description>
          </parameter>
          <parameter name='callback( next )' usage='required' type='Function'>
            <description>The new function to add to the queue, with a function to call that will dequeue the next item.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Queue a custom function.
$( document.body ).click(function() {
  $( "div" )
    .show( "slow" )
    .animate({ left: "+=200" }, 2000 )
    .queue(function() {
      $( this ).addClass( "newcolor" ).dequeue();
    })
    .animate({ left: "-=200" }, 500 )
    .queue(function() {
      $( this ).removeClass( "newcolor" ).dequeue();
    })
    .slideUp();
});

  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }

Click here...
&lt;div&gt;&lt;/div&gt;
Set a queue array to delete the queue.
$( "#start" ).click(function() {
  $( "div" )
    .show( "slow" )
    .animate({ left: "+=200" }, 5000 )
    .queue(function() {
      $( this ).addClass( "newcolor" ).dequeue();
    })
    .animate({ left: '-=200' }, 1500 )
    .queue(function() {
      $( this ).removeClass( "newcolor" ).dequeue();
    })
    .slideUp();
});
$( "#stop" ).click(function() {
  $( "div" )
    .queue( "fx", [] )
    .stop();
});

  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }

&lt;button id="start"&gt;Start&lt;/button&gt;
&lt;button id="stop"&gt;Stop&lt;/button&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='ready' scope='instance'>
        <description>Specify a function to execute when the DOM is fully loaded.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler' usage='required' type='Function'>
            <description>A function to execute after the DOM is ready.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Display a message when the DOM is loaded.
  $( document ).ready(function() {
    $( "p" ).text( "The DOM is now loaded and can be manipulated." );
  });

  p {
    color: red;
  }

&lt;p&gt;Not loaded yet.&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='remove' scope='instance'>
        <description>Remove the set of matched elements from the DOM.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='optional' type='String'>
            <description>A selector expression that filters the set of matched elements to be removed.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Removes all paragraphs from the DOM
$( "button" ).click(function() {
  $( "p" ).remove();
});

  p {
    background: yellow;
    margin: 6px 0;
  }

&lt;p&gt;Hello&lt;/p&gt;
how are
&lt;p&gt;you?&lt;/p&gt;
&lt;button&gt;Call remove() on paragraphs&lt;/button&gt;
Removes all paragraphs that contain "Hello" from the DOM.  Analogous to doing $("p").filter(":contains('Hello')").remove().
$( "button" ).click(function() {
  $( "p" ).remove( ":contains('Hello')" );
});

  p {
    background: yellow;
    margin: 6px 0;
  }

&lt;p class="hello"&gt;Hello&lt;/p&gt;
how are
&lt;p&gt;you?&lt;/p&gt;
&lt;button&gt;Call remove( ":contains('Hello')" ) on paragraphs&lt;/button&gt;
</example>
        </examples>
      </method>
      <method name='removeAttr' scope='instance'>
        <description>Remove an attribute from each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='attributeName' usage='required' type='String'>
            <description>An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Clicking the button changes the title of the input next to it. Move the mouse pointer over the text input to see the effect of adding and removing the title attribute.
(function() {
  var inputTitle = $( "input" ).attr( "title" );
  $( "button" ).click(function() {
    var input = $( this ).next();

    if ( input.attr( "title" ) === inputTitle ) {
      input.removeAttr( "title" )
    } else {
      input.attr( "title", inputTitle );
    }

    $( "#log" ).html( "input title is now " + input.attr( "title" ) );
  });
})();

&lt;button&gt;Change title&lt;/button&gt;
&lt;input type="text" title="hello there"&gt;
&lt;div id="log"&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='removeClass' scope='instance'>
        <description>Remove a single class, multiple classes, or all classes from each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='className' usage='optional' type='String'>
            <description>One or more space-separated classes to be removed from the class attribute of each matched element.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Remove the class 'blue' from the matched elements.
$( "p:even" ).removeClass( "blue" );

  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
  }
  .blue {
    color: blue;
  }
  .under {
    text-decoration: underline;
  }
  .highlight {
    background: yellow;
  }

&lt;p class="blue under"&gt;Hello&lt;/p&gt;
&lt;p class="blue under highlight"&gt;and&lt;/p&gt;
&lt;p class="blue under"&gt;then&lt;/p&gt;
&lt;p class="blue under"&gt;Goodbye&lt;/p&gt;
Remove the class 'blue' and 'under' from the matched elements.
$( "p:odd" ).removeClass( "blue under" );

  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
  }
  .blue {
    color: blue;
  }
  .under {
    text-decoration: underline;
  }
  .highlight {
    background: yellow;
  }

&lt;p class="blue under"&gt;Hello&lt;/p&gt;
&lt;p class="blue under highlight"&gt;and&lt;/p&gt;
&lt;p class="blue under"&gt;then&lt;/p&gt;
&lt;p class="blue under"&gt;Goodbye&lt;/p&gt;
Remove all the classes from the matched elements.
$( "p:eq(1)" ).removeClass();

  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
  }
  .blue {
    color: blue;
  }
  .under {
    text-decoration: underline;
  }
  .highlight {
    background: yellow;
  }

&lt;p class="blue under"&gt;Hello&lt;/p&gt;
&lt;p class="blue under highlight"&gt;and&lt;/p&gt;
&lt;p class="blue under"&gt;then&lt;/p&gt;
&lt;p class="blue under"&gt;Goodbye&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='removeClass' scope='instance'>
        <description>Remove a single class, multiple classes, or all classes from each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index, class)' usage='required' type='Function'>
            <description>A function returning one or more space-separated class names to be removed. Receives the index position of the element in the set and the old class value as arguments.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Remove the class 'blue' from the matched elements.
$( "p:even" ).removeClass( "blue" );

  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
  }
  .blue {
    color: blue;
  }
  .under {
    text-decoration: underline;
  }
  .highlight {
    background: yellow;
  }

&lt;p class="blue under"&gt;Hello&lt;/p&gt;
&lt;p class="blue under highlight"&gt;and&lt;/p&gt;
&lt;p class="blue under"&gt;then&lt;/p&gt;
&lt;p class="blue under"&gt;Goodbye&lt;/p&gt;
Remove the class 'blue' and 'under' from the matched elements.
$( "p:odd" ).removeClass( "blue under" );

  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
  }
  .blue {
    color: blue;
  }
  .under {
    text-decoration: underline;
  }
  .highlight {
    background: yellow;
  }

&lt;p class="blue under"&gt;Hello&lt;/p&gt;
&lt;p class="blue under highlight"&gt;and&lt;/p&gt;
&lt;p class="blue under"&gt;then&lt;/p&gt;
&lt;p class="blue under"&gt;Goodbye&lt;/p&gt;
Remove all the classes from the matched elements.
$( "p:eq(1)" ).removeClass();

  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
  }
  .blue {
    color: blue;
  }
  .under {
    text-decoration: underline;
  }
  .highlight {
    background: yellow;
  }

&lt;p class="blue under"&gt;Hello&lt;/p&gt;
&lt;p class="blue under highlight"&gt;and&lt;/p&gt;
&lt;p class="blue under"&gt;then&lt;/p&gt;
&lt;p class="blue under"&gt;Goodbye&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='removeData' scope='instance'>
        <description>Remove a previously-stored piece of data.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='name' usage='optional' type='String'>
            <description>A string naming the piece of data to delete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Set a data store for 2 names then remove one of them.
$( "span:eq(0)" ).text( "" + $( "div" ).data( "test1" ) );
$( "div" ).data( "test1", "VALUE-1" );
$( "div" ).data( "test2", "VALUE-2" );
$( "span:eq(1)" ).text( "" + $( "div").data( "test1" ) );
$( "div" ).removeData( "test1" );
$( "span:eq(2)" ).text( "" + $( "div" ).data( "test1" ) );
$( "span:eq(3)" ).text( "" + $( "div" ).data( "test2" ) );

  div {
    margin: 2px;
    color: blue;
  }
  span {
    color: red;
  }

&lt;div&gt;value1 before creation: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;value1 after creation: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;value1 after removal: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;value2 after removal: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='removeData' scope='instance'>
        <description>Remove a previously-stored piece of data.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='list' usage='optional' type=''>
            <description>An array or space-separated string naming the pieces of data to delete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Set a data store for 2 names then remove one of them.
$( "span:eq(0)" ).text( "" + $( "div" ).data( "test1" ) );
$( "div" ).data( "test1", "VALUE-1" );
$( "div" ).data( "test2", "VALUE-2" );
$( "span:eq(1)" ).text( "" + $( "div").data( "test1" ) );
$( "div" ).removeData( "test1" );
$( "span:eq(2)" ).text( "" + $( "div" ).data( "test1" ) );
$( "span:eq(3)" ).text( "" + $( "div" ).data( "test2" ) );

  div {
    margin: 2px;
    color: blue;
  }
  span {
    color: red;
  }

&lt;div&gt;value1 before creation: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;value1 after creation: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;value1 after removal: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;value2 after removal: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='removeProp' scope='instance'>
        <description>Remove a property for the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='propertyName' usage='required' type='String'>
            <description>The name of the property to remove.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Set a numeric property on a paragraph and then remove it. 
$( "p" )
  .prop( "luggageCode", 1234 )
  .append( "The secret luggage code is: ", String( $para.prop( "luggageCode" ) ), ". " )
  .removeProp( "luggageCode" );
  .append( "Now the secret luggage code is: ", String( $para.prop( "luggageCode" ) ), ". " );

  img {
    padding: 10px;
  }
  div {
    color: red;
    font-size: 24px;
  }

  &lt;p&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='replaceAll' scope='instance'>
        <description>Replace each target element with the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='target' usage='required' type=''>
            <description>A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Replace all the paragraphs with bold words.
$( "&lt;b&gt;Paragraph. &lt;/b&gt;" ).replaceAll( "p" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='replaceWith' scope='instance'>
        <description>Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='newContent' usage='required' type=''>
            <description>The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object.</description>
          </parameter>
        </parameters>
        <examples>
          <example>On click, replace the button with a div containing the same word.
$( "button" ).click(function() {
  $( this ).replaceWith( "&lt;div&gt;" + $( this ).text() + "&lt;/div&gt;" );
});

  button {
    display: block;
    margin: 3px;
    color: red;
    width: 200px;
  }
  div {
    color: red;
    border: 2px solid blue;
    width: 200px;
    margin: 3px;
    text-align: center;
  }

&lt;button&gt;First&lt;/button&gt;
&lt;button&gt;Second&lt;/button&gt;
&lt;button&gt;Third&lt;/button&gt;
Replace all paragraphs with bold words.
$( "p" ).replaceWith( "&lt;b&gt;Paragraph. &lt;/b&gt;" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
On click, replace each paragraph with a div that is already in the DOM and selected with the $() function. Notice it doesn't clone the object but rather moves it to replace the paragraph.
$( "p" ).click(function() {
  $( this ).replaceWith( $( "div" ) );
});

  div {
    border: 2px solid blue;
    color: red;
    margin: 3px;
  }
  p {
    border: 2px solid red;
    color: blue;
    margin: 3px;
    cursor: pointer;
  }

  &lt;p&gt;Hello&lt;/p&gt;
  &lt;p&gt;cruel&lt;/p&gt;
  &lt;p&gt;World&lt;/p&gt;
  &lt;div&gt;Replaced!&lt;/div&gt;
On button click, replace the containing div with its child divs and append the class name of the selected element to the paragraph.
$( "button" ).on( "click", function() {
  var $container = $( "div.container" ).replaceWith(function() {
    return $( this ).contents();
  });

  $( "p" ).append( $container.attr( "class" ) );
});

  .container {
    background-color: #991;
  }
  .inner {
    color: #911;
  }

&lt;p&gt;
  &lt;button&gt;Replace!&lt;/button&gt;
&lt;/p&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Scooby&lt;/div&gt;
  &lt;div class="inner"&gt;Dooby&lt;/div&gt;
  &lt;div class="inner"&gt;Doo&lt;/div&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='replaceWith' scope='instance'>
        <description>Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function' usage='required' type='Function'>
            <description>A function that returns content with which to replace the set of matched elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>On click, replace the button with a div containing the same word.
$( "button" ).click(function() {
  $( this ).replaceWith( "&lt;div&gt;" + $( this ).text() + "&lt;/div&gt;" );
});

  button {
    display: block;
    margin: 3px;
    color: red;
    width: 200px;
  }
  div {
    color: red;
    border: 2px solid blue;
    width: 200px;
    margin: 3px;
    text-align: center;
  }

&lt;button&gt;First&lt;/button&gt;
&lt;button&gt;Second&lt;/button&gt;
&lt;button&gt;Third&lt;/button&gt;
Replace all paragraphs with bold words.
$( "p" ).replaceWith( "&lt;b&gt;Paragraph. &lt;/b&gt;" );

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
On click, replace each paragraph with a div that is already in the DOM and selected with the $() function. Notice it doesn't clone the object but rather moves it to replace the paragraph.
$( "p" ).click(function() {
  $( this ).replaceWith( $( "div" ) );
});

  div {
    border: 2px solid blue;
    color: red;
    margin: 3px;
  }
  p {
    border: 2px solid red;
    color: blue;
    margin: 3px;
    cursor: pointer;
  }

  &lt;p&gt;Hello&lt;/p&gt;
  &lt;p&gt;cruel&lt;/p&gt;
  &lt;p&gt;World&lt;/p&gt;
  &lt;div&gt;Replaced!&lt;/div&gt;
On button click, replace the containing div with its child divs and append the class name of the selected element to the paragraph.
$( "button" ).on( "click", function() {
  var $container = $( "div.container" ).replaceWith(function() {
    return $( this ).contents();
  });

  $( "p" ).append( $container.attr( "class" ) );
});

  .container {
    background-color: #991;
  }
  .inner {
    color: #911;
  }

&lt;p&gt;
  &lt;button&gt;Replace!&lt;/button&gt;
&lt;/p&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Scooby&lt;/div&gt;
  &lt;div class="inner"&gt;Dooby&lt;/div&gt;
  &lt;div class="inner"&gt;Doo&lt;/div&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='resize' scope='instance'>
        <description>Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To see the window width while (or after) it is resized, try:
$( window ).resize(function() {
  $( "body" ).prepend( "&lt;div&gt;" + $( window ).width() + "&lt;/div&gt;" );
});
</example>
        </examples>
      </method>
      <method name='resize' scope='instance'>
        <description>Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To see the window width while (or after) it is resized, try:
$( window ).resize(function() {
  $( "body" ).prepend( "&lt;div&gt;" + $( window ).width() + "&lt;/div&gt;" );
});
</example>
        </examples>
      </method>
      <method name='resize' scope='instance'>
        <description>Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>To see the window width while (or after) it is resized, try:
$( window ).resize(function() {
  $( "body" ).prepend( "&lt;div&gt;" + $( window ).width() + "&lt;/div&gt;" );
});
</example>
        </examples>
      </method>
      <method name='scroll' scope='instance'>
        <description>Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To do something when your page is scrolled:
$( "p" ).clone().appendTo( document.body );
$( "p" ).clone().appendTo( document.body );
$( "p" ).clone().appendTo( document.body );
$( window ).scroll(function() {
  $( "span" ).css( "display", "inline" ).fadeOut( "slow" );
});

  div {
    color: blue;
  }
  p {
    color: green;
  }
  span {
    color: red;
    display: none;
  }

&lt;div&gt;Try scrolling the iframe.&lt;/div&gt;
&lt;p&gt;Paragraph - &lt;span&gt;Scroll happened!&lt;/span&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='scroll' scope='instance'>
        <description>Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To do something when your page is scrolled:
$( "p" ).clone().appendTo( document.body );
$( "p" ).clone().appendTo( document.body );
$( "p" ).clone().appendTo( document.body );
$( window ).scroll(function() {
  $( "span" ).css( "display", "inline" ).fadeOut( "slow" );
});

  div {
    color: blue;
  }
  p {
    color: green;
  }
  span {
    color: red;
    display: none;
  }

&lt;div&gt;Try scrolling the iframe.&lt;/div&gt;
&lt;p&gt;Paragraph - &lt;span&gt;Scroll happened!&lt;/span&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='scroll' scope='instance'>
        <description>Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>To do something when your page is scrolled:
$( "p" ).clone().appendTo( document.body );
$( "p" ).clone().appendTo( document.body );
$( "p" ).clone().appendTo( document.body );
$( window ).scroll(function() {
  $( "span" ).css( "display", "inline" ).fadeOut( "slow" );
});

  div {
    color: blue;
  }
  p {
    color: green;
  }
  span {
    color: red;
    display: none;
  }

&lt;div&gt;Try scrolling the iframe.&lt;/div&gt;
&lt;p&gt;Paragraph - &lt;span&gt;Scroll happened!&lt;/span&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='scrollLeft' scope='instance'>
        <description>Get the current horizontal position of the scroll bar for the first element in the set of matched elements.</description>
        <return-types>
          <return-type type='Integer' />
        </return-types>
        <parameters />
        <examples>
          <example>Get the scrollLeft of a paragraph.
var p = $( "p:first" );
$( "p:last" ).text( "scrollLeft:" + p.scrollLeft() );

  p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
  }

&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='scrollLeft' scope='instance'>
        <description>Set the current horizontal position of the scroll bar for each of the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='value' usage='required' type='Number'>
            <description>An integer indicating the new position to set the scroll bar to.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Set the scrollLeft of a div.
$( "div.demo" ).scrollLeft( 300 );

  div.demo {
    background: #ccc none repeat scroll 0 0;
    border: 3px solid #666;
    margin: 5px;
    padding: 5px;
    position: relative;
    width: 200px;
    height: 100px;
    overflow: auto;
  }
  p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
    width: 1000px;
    height: 1000px;
  }

&lt;div class="demo"&gt;&lt;h1&gt;lalala&lt;/h1&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='scrollTop' scope='instance'>
        <description>Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element.</description>
        <return-types>
          <return-type type='Integer' />
        </return-types>
        <parameters />
        <examples>
          <example>Get the scrollTop of a paragraph.
var p = $( "p:first" );
$( "p:last" ).text( "scrollTop:" + p.scrollTop() );

  p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
  }

&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='scrollTop' scope='instance'>
        <description>Set the current vertical position of the scroll bar for each of the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='value' usage='required' type='Number'>
            <description>An integer indicating the new position to set the scroll bar to.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Set the scrollTop of a div.
$( "div.demo" ).scrollTop( 300 );

  div.demo {
    background: #ccc none repeat scroll 0 0;
    border: 3px solid #666;
    margin: 5px;
    padding: 5px;
    position: relative;
    width: 200px;
    height: 100px;
    overflow: auto;
  }
  p {
    margin: 10px;
    padding: 5px;
    border: 2px solid #666;
    width: 1000px;
    height: 1000px;
  }

&lt;div class="demo"&gt;&lt;h1&gt;lalala&lt;/h1&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='select' scope='instance'>
        <description>Bind an event handler to the "select" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To do something when text in input boxes is selected:
$( ":input" ).select(function() {
  $( "div" ).text( "Something was selected" ).show().fadeOut( 1000 );
});

  p {
    color: blue;
  }
  div {
    color: red;
  }

  &lt;p&gt;Click and drag the mouse to select text in the inputs.&lt;/p&gt;
  &lt;input type="text" value="Some text"&gt;
  &lt;input type="text" value="to test on"&gt;
  &lt;div&gt;&lt;/div&gt;
  To trigger the select event on all input elements, try:
$( "input" ).select();
</example>
        </examples>
      </method>
      <method name='select' scope='instance'>
        <description>Bind an event handler to the "select" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To do something when text in input boxes is selected:
$( ":input" ).select(function() {
  $( "div" ).text( "Something was selected" ).show().fadeOut( 1000 );
});

  p {
    color: blue;
  }
  div {
    color: red;
  }

  &lt;p&gt;Click and drag the mouse to select text in the inputs.&lt;/p&gt;
  &lt;input type="text" value="Some text"&gt;
  &lt;input type="text" value="to test on"&gt;
  &lt;div&gt;&lt;/div&gt;
  To trigger the select event on all input elements, try:
$( "input" ).select();
</example>
        </examples>
      </method>
      <method name='select' scope='instance'>
        <description>Bind an event handler to the "select" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>To do something when text in input boxes is selected:
$( ":input" ).select(function() {
  $( "div" ).text( "Something was selected" ).show().fadeOut( 1000 );
});

  p {
    color: blue;
  }
  div {
    color: red;
  }

  &lt;p&gt;Click and drag the mouse to select text in the inputs.&lt;/p&gt;
  &lt;input type="text" value="Some text"&gt;
  &lt;input type="text" value="to test on"&gt;
  &lt;div&gt;&lt;/div&gt;
  To trigger the select event on all input elements, try:
$( "input" ).select();
</example>
        </examples>
      </method>
      <method name='serialize' scope='instance'>
        <description>Encode a set of form elements as a string for submission.</description>
        <return-types>
          <return-type type='String' />
        </return-types>
        <parameters />
        <examples>
          <example>Serialize a form to a query string that could be sent to a server in an Ajax request.
  function showValues() {
    var str = $( "form" ).serialize();
    $( "#results" ).text( str );
  }
  $( "input[type='checkbox'], input[type='radio']" ).on( "click", showValues );
  $( "select" ).on( "change", showValues );
  showValues();

  body, select {
    font-size: 12px;
  }
  form {
    margin: 5px;
  }
  p {
    color: red;
    margin: 5px;
    font-size: 14px;
  }
  b {
    color: blue;
  }
200
&lt;form&gt;
  &lt;select name="single"&gt;
    &lt;option&gt;Single&lt;/option&gt;
    &lt;option&gt;Single2&lt;/option&gt;
  &lt;/select&gt;

  &lt;br&gt;
  &lt;select name="multiple" multiple="multiple"&gt;
    &lt;option selected="selected"&gt;Multiple&lt;/option&gt;
    &lt;option&gt;Multiple2&lt;/option&gt;
    &lt;option selected="selected"&gt;Multiple3&lt;/option&gt;
  &lt;/select&gt;

  &lt;br&gt;
  &lt;input type="checkbox" name="check" value="check1" id="ch1"&gt;
  &lt;label for="ch1"&gt;check1&lt;/label&gt;
  &lt;input type="checkbox" name="check" value="check2" checked="checked" id="ch2"&gt;
  &lt;label for="ch2"&gt;check2&lt;/label&gt;

  &lt;br&gt;
  &lt;input type="radio" name="radio" value="radio1" checked="checked" id="r1"&gt;
  &lt;label for="r1"&gt;radio1&lt;/label&gt;
  &lt;input type="radio" name="radio" value="radio2" id="r2"&gt;
  &lt;label for="r2"&gt;radio2&lt;/label&gt;
&lt;/form&gt;

&lt;p&gt;&lt;tt id="results"&gt;&lt;/tt&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='serializeArray' scope='instance'>
        <description>Encode a set of form elements as an array of names and values.</description>
        <return-types>
          <return-type type='Array' />
        </return-types>
        <parameters />
        <examples>
          <example>Get the values from a form, iterate through them, and append them to a results display.
  function showValues() {
    var fields = $( ":input" ).serializeArray();
    $( "#results" ).empty();
    jQuery.each( fields, function( i, field ) {
      $( "#results" ).append( field.value + " " );
    });
  }

  $( ":checkbox, :radio" ).click( showValues );
  $( "select" ).change( showValues );
  showValues();

  body, select {
    font-size: 14px;
  }
  form {
    margin: 5px;
  }
  p {
    color: red;
    margin: 5px;
  }
  b {
    color: blue;
  }

&lt;p&gt;&lt;b&gt;Results:&lt;/b&gt; &lt;span id="results"&gt;&lt;/span&gt;&lt;/p&gt;
&lt;form&gt;
  &lt;select name="single"&gt;
    &lt;option&gt;Single&lt;/option&gt;
    &lt;option&gt;Single2&lt;/option&gt;
  &lt;/select&gt;
  &lt;select name="multiple" multiple="multiple"&gt;
    &lt;option selected="selected"&gt;Multiple&lt;/option&gt;
    &lt;option&gt;Multiple2&lt;/option&gt;
    &lt;option selected="selected"&gt;Multiple3&lt;/option&gt;
  &lt;/select&gt;
  &lt;br&gt;
  &lt;input type="checkbox" name="check" value="check1" id="ch1"&gt;
  &lt;label for="ch1"&gt;check1&lt;/label&gt;
  &lt;input type="checkbox" name="check" value="check2" checked="checked" id="ch2"&gt;
  &lt;label for="ch2"&gt;check2&lt;/label&gt;
  &lt;input type="radio" name="radio" value="radio1" checked="checked" id="r1"&gt;
  &lt;label for="r1"&gt;radio1&lt;/label&gt;
  &lt;input type="radio" name="radio" value="radio2" id="r2"&gt;
  &lt;label for="r2"&gt;radio2&lt;/label&gt;
&lt;/form&gt;
</example>
        </examples>
      </method>
      <method name='show' scope='instance'>
        <description>Display the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).show( "slow" );
});

  p {
    background: yellow;
  }

&lt;button&gt;Show it&lt;/button&gt;
&lt;p style="display: none"&gt;Hello  2&lt;/p&gt;
Show the first div, followed by each next adjacent sibling div in order, with a 200ms animation. Each animation starts when the previous sibling div's animation ends.
$( "#showr" ).click(function() {
  $( "div" ).first().show( "fast", function showNext() {
    $( this ).next( "div" ).show( "fast", showNext );
  });
});

$( "#hidr" ).click(function() {
  $( "div" ).hide( 1000 );
});

  div {
    background: #def3ca;
    margin: 3px;
    width: 80px;
    display: none;
    float: left;
    text-align: center;
  }

&lt;button id="showr"&gt;Show&lt;/button&gt;
&lt;button id="hidr"&gt;Hide&lt;/button&gt;
&lt;div&gt;Hello 3,&lt;/div&gt;
&lt;div&gt;how&lt;/div&gt;
&lt;div&gt;are&lt;/div&gt;
&lt;div&gt;you?&lt;/div&gt;
Show all span and input elements with an animation. Change the text once the animation is done.
function doIt() {
  $( "span,div" ).show( "slow" );
}
// Can pass in function name
$( "button" ).click( doIt );

$( "form" ).submit(function( event ) {
  if ( $( "input" ).val() === "yes" ) {
    $( "p" ).show( 4000, function() {
      $( this ).text( "Ok, DONE! (now showing)" );
    });
  }
  $( "span,div" ).hide( "fast" );

  // Prevent form submission
  event.preventDefault();
});

  span {
    display: none;
  }
  div {
    display: none;
  }
  p {
    font-weight: bold;
    background-color: #fcd;
  }

&lt;button&gt;Do it!&lt;/button&gt;
&lt;span&gt;Are you sure? (type 'yes' if you are) &lt;/span&gt;
&lt;div&gt;
  &lt;form&gt;
    &lt;input type="text"  value="as;ldkfjalsdf"&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;p style="display:none;"&gt;I'm hidden...&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='show' scope='instance'>
        <description>Display the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).show( "slow" );
});

  p {
    background: yellow;
  }

&lt;button&gt;Show it&lt;/button&gt;
&lt;p style="display: none"&gt;Hello  2&lt;/p&gt;
Show the first div, followed by each next adjacent sibling div in order, with a 200ms animation. Each animation starts when the previous sibling div's animation ends.
$( "#showr" ).click(function() {
  $( "div" ).first().show( "fast", function showNext() {
    $( this ).next( "div" ).show( "fast", showNext );
  });
});

$( "#hidr" ).click(function() {
  $( "div" ).hide( 1000 );
});

  div {
    background: #def3ca;
    margin: 3px;
    width: 80px;
    display: none;
    float: left;
    text-align: center;
  }

&lt;button id="showr"&gt;Show&lt;/button&gt;
&lt;button id="hidr"&gt;Hide&lt;/button&gt;
&lt;div&gt;Hello 3,&lt;/div&gt;
&lt;div&gt;how&lt;/div&gt;
&lt;div&gt;are&lt;/div&gt;
&lt;div&gt;you?&lt;/div&gt;
Show all span and input elements with an animation. Change the text once the animation is done.
function doIt() {
  $( "span,div" ).show( "slow" );
}
// Can pass in function name
$( "button" ).click( doIt );

$( "form" ).submit(function( event ) {
  if ( $( "input" ).val() === "yes" ) {
    $( "p" ).show( 4000, function() {
      $( this ).text( "Ok, DONE! (now showing)" );
    });
  }
  $( "span,div" ).hide( "fast" );

  // Prevent form submission
  event.preventDefault();
});

  span {
    display: none;
  }
  div {
    display: none;
  }
  p {
    font-weight: bold;
    background-color: #fcd;
  }

&lt;button&gt;Do it!&lt;/button&gt;
&lt;span&gt;Are you sure? (type 'yes' if you are) &lt;/span&gt;
&lt;div&gt;
  &lt;form&gt;
    &lt;input type="text"  value="as;ldkfjalsdf"&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;p style="display:none;"&gt;I'm hidden...&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='show' scope='instance'>
        <description>Display the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='options' usage='required' type='PlainObject'>
            <description>A map of additional options to pass to the method.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).show( "slow" );
});

  p {
    background: yellow;
  }

&lt;button&gt;Show it&lt;/button&gt;
&lt;p style="display: none"&gt;Hello  2&lt;/p&gt;
Show the first div, followed by each next adjacent sibling div in order, with a 200ms animation. Each animation starts when the previous sibling div's animation ends.
$( "#showr" ).click(function() {
  $( "div" ).first().show( "fast", function showNext() {
    $( this ).next( "div" ).show( "fast", showNext );
  });
});

$( "#hidr" ).click(function() {
  $( "div" ).hide( 1000 );
});

  div {
    background: #def3ca;
    margin: 3px;
    width: 80px;
    display: none;
    float: left;
    text-align: center;
  }

&lt;button id="showr"&gt;Show&lt;/button&gt;
&lt;button id="hidr"&gt;Hide&lt;/button&gt;
&lt;div&gt;Hello 3,&lt;/div&gt;
&lt;div&gt;how&lt;/div&gt;
&lt;div&gt;are&lt;/div&gt;
&lt;div&gt;you?&lt;/div&gt;
Show all span and input elements with an animation. Change the text once the animation is done.
function doIt() {
  $( "span,div" ).show( "slow" );
}
// Can pass in function name
$( "button" ).click( doIt );

$( "form" ).submit(function( event ) {
  if ( $( "input" ).val() === "yes" ) {
    $( "p" ).show( 4000, function() {
      $( this ).text( "Ok, DONE! (now showing)" );
    });
  }
  $( "span,div" ).hide( "fast" );

  // Prevent form submission
  event.preventDefault();
});

  span {
    display: none;
  }
  div {
    display: none;
  }
  p {
    font-weight: bold;
    background-color: #fcd;
  }

&lt;button&gt;Do it!&lt;/button&gt;
&lt;span&gt;Are you sure? (type 'yes' if you are) &lt;/span&gt;
&lt;div&gt;
  &lt;form&gt;
    &lt;input type="text"  value="as;ldkfjalsdf"&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;p style="display:none;"&gt;I'm hidden...&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='show' scope='instance'>
        <description>Display the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='required' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='easing' usage='optional' type='String'>
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).show( "slow" );
});

  p {
    background: yellow;
  }

&lt;button&gt;Show it&lt;/button&gt;
&lt;p style="display: none"&gt;Hello  2&lt;/p&gt;
Show the first div, followed by each next adjacent sibling div in order, with a 200ms animation. Each animation starts when the previous sibling div's animation ends.
$( "#showr" ).click(function() {
  $( "div" ).first().show( "fast", function showNext() {
    $( this ).next( "div" ).show( "fast", showNext );
  });
});

$( "#hidr" ).click(function() {
  $( "div" ).hide( 1000 );
});

  div {
    background: #def3ca;
    margin: 3px;
    width: 80px;
    display: none;
    float: left;
    text-align: center;
  }

&lt;button id="showr"&gt;Show&lt;/button&gt;
&lt;button id="hidr"&gt;Hide&lt;/button&gt;
&lt;div&gt;Hello 3,&lt;/div&gt;
&lt;div&gt;how&lt;/div&gt;
&lt;div&gt;are&lt;/div&gt;
&lt;div&gt;you?&lt;/div&gt;
Show all span and input elements with an animation. Change the text once the animation is done.
function doIt() {
  $( "span,div" ).show( "slow" );
}
// Can pass in function name
$( "button" ).click( doIt );

$( "form" ).submit(function( event ) {
  if ( $( "input" ).val() === "yes" ) {
    $( "p" ).show( 4000, function() {
      $( this ).text( "Ok, DONE! (now showing)" );
    });
  }
  $( "span,div" ).hide( "fast" );

  // Prevent form submission
  event.preventDefault();
});

  span {
    display: none;
  }
  div {
    display: none;
  }
  p {
    font-weight: bold;
    background-color: #fcd;
  }

&lt;button&gt;Do it!&lt;/button&gt;
&lt;span&gt;Are you sure? (type 'yes' if you are) &lt;/span&gt;
&lt;div&gt;
  &lt;form&gt;
    &lt;input type="text"  value="as;ldkfjalsdf"&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;p style="display:none;"&gt;I'm hidden...&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='siblings' scope='instance'>
        <description>Get the siblings of each element in the set of matched elements, optionally filtered by a selector.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='optional' type='Selector'>
            <description>A string containing a selector expression to match elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find the unique siblings of all yellow li elements in the 3 lists (including other yellow li elements if appropriate).
var len = $( ".hilite" ).siblings()
  .css( "color", "red" )
  .length;
$( "b" ).text( len );

  ul {
    float: left;
    margin: 5px;
    font-size: 16px;
    font-weight: bold;
  }
  p {
    color: blue;
    margin: 10px 20px;
    font-size: 16px;
    padding: 5px;
    font-weight: bolder;
  }
  .hilite {
    background: yellow;
  }

&lt;ul&gt;
  &lt;li&gt;One&lt;/li&gt;
  &lt;li&gt;Two&lt;/li&gt;
  &lt;li class="hilite"&gt;Three&lt;/li&gt;
  &lt;li&gt;Four&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;Five&lt;/li&gt;
  &lt;li&gt;Six&lt;/li&gt;
  &lt;li&gt;Seven&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;Eight&lt;/li&gt;
  &lt;li class="hilite"&gt;Nine&lt;/li&gt;
  &lt;li&gt;Ten&lt;/li&gt;
  &lt;li class="hilite"&gt;Eleven&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unique siblings: &lt;b&gt;&lt;/b&gt;&lt;/p&gt;
Find all siblings with a class "selected" of each div.
$( "p" ).siblings( ".selected" ).css( "background", "yellow" );

&lt;div&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;/div&gt;
&lt;p class="selected"&gt;Hello Again&lt;/p&gt;
&lt;p&gt;And Again&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='size' scope='instance'>
        <description>Return the number of elements in the jQuery object.</description>
        <return-types>
          <return-type type='Integer' />
        </return-types>
        <parameters />
        <examples>
          <example>Count the divs. Click to add more.
$( document.body )
  .click(function() {
    $( this ).append( $( "&lt;div&gt;" ) );
    var n = $( "div" ).size();
    $( "span" ).text( "There are " + n + " divs. Click to add more." );
  })

  // Trigger the click to start
  .click();

  body {
    cursor: pointer;
    min-height: 100px;
  }
  div {
    width: 50px;
    height: 30px;
    margin: 5px;
    float: left;
    background: blue;
  }
  span {
    color: red;
  }

&lt;span&gt;&lt;/span&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='slice' scope='instance'>
        <description>Reduce the set of matched elements to a subset specified by a range of indices.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='start' usage='required' type='Integer'>
            <description>An integer indicating the 0-based position at which the elements begin to be selected. If negative, it indicates an offset from the end of the set.</description>
          </parameter>
          <parameter name='end' usage='optional' type='Integer'>
            <description>An integer indicating the 0-based position at which the elements stop being selected. If negative, it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Turns divs yellow based on a random slice.
function colorEm() {
  var $div = $( "div" );
  var start = Math.floor( Math.random() * $div.length );
  var end = Math.floor( Math.random() * ( $div.length - start ) ) +
    start + 1;
  if ( end === $div.length ) {
    end = undefined;
  }
  $div.css( "background", "" );
  if ( end ) {
    $div.slice( start, end ).css( "background", "yellow" );
  } else {
    $div.slice( start ).css( "background", "yellow" );
  }
  $( "span" ).text( "$( 'div' ).slice( " + start +
    (end ? ", " + end : "") +
    ").css( 'background', 'yellow' );" );
}

$( "button" ).click( colorEm );

  div {
    width: 40px;
    height: 40px;
    margin: 10px;
    float: left;
    border: 2px solid blue;
  }
  span {
    color: red;
    font-weight: bold;
  }
  button {
    margin: 5px;
  }
240
&lt;p&gt;&lt;button&gt;Turn slice yellow&lt;/button&gt;
  &lt;span&gt;Click the button!&lt;/span&gt;&lt;/p&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div&gt;&lt;/div&gt;
  Selects all paragraphs, then slices the selection to include only the first element.
$( "p" ).slice( 0, 1 ).wrapInner( "&lt;b&gt;&lt;/b&gt;" );
Selects all paragraphs, then slices the selection to include only the first and second element.
$( "p" ).slice( 0, 2 ).wrapInner( "&lt;b&gt;&lt;/b&gt;" );
Selects all paragraphs, then slices the selection to include only the second element.
$( "p" ).slice( 1, 2 ).wrapInner( "&lt;b&gt;&lt;/b&gt;" );
Selects all paragraphs, then slices the selection to include only the second and third element.
$( "p" ).slice( 1 ).wrapInner( "&lt;b&gt;&lt;/b&gt;" );
Selects all paragraphs, then slices the selection to include only the third element.
$( "p" ).slice( -1 ).wrapInner( "&lt;b&gt;&lt;/b&gt;" );
</example>
        </examples>
      </method>
      <method name='slideDown' scope='instance'>
        <description>Display the matched elements with a sliding motion.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all divs to slide down and show themselves over 600 milliseconds.
$( document.body ).click(function () {
  if ( $( "div:first" ).is( ":hidden" ) ) {
    $( "div" ).slideDown( "slow" );
  } else {
    $( "div" ).hide();
  }
});

  div {
    background: #de9a44;
    margin: 3px;
    width: 80px;
    height: 40px;
    display: none;
    float: left;
  }

Click me!
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Animates all inputs to slide down, completing the animation within 1000 milliseconds. Once the animation is done, the input look is changed especially if it is the middle input which gets the focus.
$( "div" ).click(function() {
  $( this ).css({
    borderStyle: "inset",
    cursor: "wait"
  });
  $( "input" ).slideDown( 1000, function() {
    $( this )
      .css( "border", "2px red inset" )
      .filter( ".middle" )
        .css( "background", "yellow" )
        .focus();
    $( "div" ).css( "visibility", "hidden" );
  });
});


  div {
    background: #cfd;
    margin: 3px;
    width: 50px;
    text-align: center;
    float: left;
    cursor: pointer;
    border: 2px outset black;
    font-weight: bolder;
  }
  input {
    display: none;
    width: 120px;
    float: left;
    margin: 10px;
  }

&lt;div&gt;Push!&lt;/div&gt;
&lt;input type="text"&gt;
&lt;input type="text" class="middle"&gt;
&lt;input type="text"&gt;
  </example>
        </examples>
      </method>
      <method name='slideDown' scope='instance'>
        <description>Display the matched elements with a sliding motion.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='options' usage='required' type='PlainObject'>
            <description>A map of additional options to pass to the method.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all divs to slide down and show themselves over 600 milliseconds.
$( document.body ).click(function () {
  if ( $( "div:first" ).is( ":hidden" ) ) {
    $( "div" ).slideDown( "slow" );
  } else {
    $( "div" ).hide();
  }
});

  div {
    background: #de9a44;
    margin: 3px;
    width: 80px;
    height: 40px;
    display: none;
    float: left;
  }

Click me!
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Animates all inputs to slide down, completing the animation within 1000 milliseconds. Once the animation is done, the input look is changed especially if it is the middle input which gets the focus.
$( "div" ).click(function() {
  $( this ).css({
    borderStyle: "inset",
    cursor: "wait"
  });
  $( "input" ).slideDown( 1000, function() {
    $( this )
      .css( "border", "2px red inset" )
      .filter( ".middle" )
        .css( "background", "yellow" )
        .focus();
    $( "div" ).css( "visibility", "hidden" );
  });
});


  div {
    background: #cfd;
    margin: 3px;
    width: 50px;
    text-align: center;
    float: left;
    cursor: pointer;
    border: 2px outset black;
    font-weight: bolder;
  }
  input {
    display: none;
    width: 120px;
    float: left;
    margin: 10px;
  }

&lt;div&gt;Push!&lt;/div&gt;
&lt;input type="text"&gt;
&lt;input type="text" class="middle"&gt;
&lt;input type="text"&gt;
  </example>
        </examples>
      </method>
      <method name='slideDown' scope='instance'>
        <description>Display the matched elements with a sliding motion.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='easing' usage='optional' type='String'>
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all divs to slide down and show themselves over 600 milliseconds.
$( document.body ).click(function () {
  if ( $( "div:first" ).is( ":hidden" ) ) {
    $( "div" ).slideDown( "slow" );
  } else {
    $( "div" ).hide();
  }
});

  div {
    background: #de9a44;
    margin: 3px;
    width: 80px;
    height: 40px;
    display: none;
    float: left;
  }

Click me!
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Animates all inputs to slide down, completing the animation within 1000 milliseconds. Once the animation is done, the input look is changed especially if it is the middle input which gets the focus.
$( "div" ).click(function() {
  $( this ).css({
    borderStyle: "inset",
    cursor: "wait"
  });
  $( "input" ).slideDown( 1000, function() {
    $( this )
      .css( "border", "2px red inset" )
      .filter( ".middle" )
        .css( "background", "yellow" )
        .focus();
    $( "div" ).css( "visibility", "hidden" );
  });
});


  div {
    background: #cfd;
    margin: 3px;
    width: 50px;
    text-align: center;
    float: left;
    cursor: pointer;
    border: 2px outset black;
    font-weight: bolder;
  }
  input {
    display: none;
    width: 120px;
    float: left;
    margin: 10px;
  }

&lt;div&gt;Push!&lt;/div&gt;
&lt;input type="text"&gt;
&lt;input type="text" class="middle"&gt;
&lt;input type="text"&gt;
  </example>
        </examples>
      </method>
      <method name='slideToggle' scope='instance'>
        <description>Display or hide the matched elements with a sliding motion.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all paragraphs to slide up or down, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).slideToggle( "slow" );
});

  p {
    width: 400px;
  }

&lt;button&gt;Toggle&lt;/button&gt;
&lt;p&gt;
  This is the paragraph to end all paragraphs.  You
  should feel &lt;em&gt;lucky&lt;/em&gt; to have seen such a paragraph in
  your life.  Congratulations!
&lt;/p&gt;
Animates divs between dividers with a toggle that makes some appear and some disappear.
$( "#aa" ).click(function() {
  $( "div:not(.still)" ).slideToggle( "slow", function() {
    var n = parseInt( $( "span" ).text(), 10 );
    $( "span" ).text( n + 1 );
  });
});

  div {
    background: #b977d1;
    margin: 3px;
    width: 60px;
    height: 60px;
    float: left;
  }
  div.still {
    background: #345;
    width: 5px;
  }
  div.hider {
    display: none;
  }
  span {
    color: red;
  }
  p {
    clear: left;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div class="still"&gt;&lt;/div&gt;
&lt;div style="display:none;"&gt;
&lt;/div&gt;&lt;div class="still"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div class="still"&gt;&lt;/div&gt;
&lt;div class="hider"&gt;&lt;/div&gt;
&lt;div class="still"&gt;&lt;/div&gt;
&lt;div class="hider"&gt;&lt;/div&gt;
&lt;div class="still"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;button id="aa"&gt;Toggle&lt;/button&gt; There have been &lt;span&gt;0&lt;/span&gt; toggled divs.&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='slideToggle' scope='instance'>
        <description>Display or hide the matched elements with a sliding motion.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='options' usage='required' type='PlainObject'>
            <description>A map of additional options to pass to the method.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all paragraphs to slide up or down, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).slideToggle( "slow" );
});

  p {
    width: 400px;
  }

&lt;button&gt;Toggle&lt;/button&gt;
&lt;p&gt;
  This is the paragraph to end all paragraphs.  You
  should feel &lt;em&gt;lucky&lt;/em&gt; to have seen such a paragraph in
  your life.  Congratulations!
&lt;/p&gt;
Animates divs between dividers with a toggle that makes some appear and some disappear.
$( "#aa" ).click(function() {
  $( "div:not(.still)" ).slideToggle( "slow", function() {
    var n = parseInt( $( "span" ).text(), 10 );
    $( "span" ).text( n + 1 );
  });
});

  div {
    background: #b977d1;
    margin: 3px;
    width: 60px;
    height: 60px;
    float: left;
  }
  div.still {
    background: #345;
    width: 5px;
  }
  div.hider {
    display: none;
  }
  span {
    color: red;
  }
  p {
    clear: left;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div class="still"&gt;&lt;/div&gt;
&lt;div style="display:none;"&gt;
&lt;/div&gt;&lt;div class="still"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div class="still"&gt;&lt;/div&gt;
&lt;div class="hider"&gt;&lt;/div&gt;
&lt;div class="still"&gt;&lt;/div&gt;
&lt;div class="hider"&gt;&lt;/div&gt;
&lt;div class="still"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;button id="aa"&gt;Toggle&lt;/button&gt; There have been &lt;span&gt;0&lt;/span&gt; toggled divs.&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='slideToggle' scope='instance'>
        <description>Display or hide the matched elements with a sliding motion.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='easing' usage='optional' type='String'>
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all paragraphs to slide up or down, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).slideToggle( "slow" );
});

  p {
    width: 400px;
  }

&lt;button&gt;Toggle&lt;/button&gt;
&lt;p&gt;
  This is the paragraph to end all paragraphs.  You
  should feel &lt;em&gt;lucky&lt;/em&gt; to have seen such a paragraph in
  your life.  Congratulations!
&lt;/p&gt;
Animates divs between dividers with a toggle that makes some appear and some disappear.
$( "#aa" ).click(function() {
  $( "div:not(.still)" ).slideToggle( "slow", function() {
    var n = parseInt( $( "span" ).text(), 10 );
    $( "span" ).text( n + 1 );
  });
});

  div {
    background: #b977d1;
    margin: 3px;
    width: 60px;
    height: 60px;
    float: left;
  }
  div.still {
    background: #345;
    width: 5px;
  }
  div.hider {
    display: none;
  }
  span {
    color: red;
  }
  p {
    clear: left;
  }

&lt;div&gt;&lt;/div&gt;
&lt;div class="still"&gt;&lt;/div&gt;
&lt;div style="display:none;"&gt;
&lt;/div&gt;&lt;div class="still"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div class="still"&gt;&lt;/div&gt;
&lt;div class="hider"&gt;&lt;/div&gt;
&lt;div class="still"&gt;&lt;/div&gt;
&lt;div class="hider"&gt;&lt;/div&gt;
&lt;div class="still"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;button id="aa"&gt;Toggle&lt;/button&gt; There have been &lt;span&gt;0&lt;/span&gt; toggled divs.&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='slideUp' scope='instance'>
        <description>Hide the matched elements with a sliding motion.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all divs to slide up, completing the animation within 400 milliseconds.
$( document.body ).click(function() {
  if ( $( "div:first" ).is( ":hidden" ) ) {
    $( "div" ).show( "slow" );
  } else {
    $( "div" ).slideUp();
  }
});

  div {
    background: #3d9a44;
    margin: 3px;
    width: 80px;
    height: 40px;
    float: left;
  }

Click me!
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Animates the parent paragraph to slide up, completing the animation within 200 milliseconds. Once the animation is done, it displays an alert.
$( "button" ).click(function() {
  $( this ).parent().slideUp( "slow", function() {
    $( "#msg" ).text( $( "button", this ).text() + " has completed." );
  });
});

 div {
   margin: 2px;
  }

&lt;div&gt;
  &lt;button&gt;Hide One&lt;/button&gt;
  &lt;input type="text" value="One"&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;button&gt;Hide Two&lt;/button&gt;
  &lt;input type="text" value="Two"&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;button&gt;Hide Three&lt;/button&gt;
  &lt;input type="text" value="Three"&gt;
&lt;/div&gt;

&lt;div id="msg"&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='slideUp' scope='instance'>
        <description>Hide the matched elements with a sliding motion.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='options' usage='required' type='PlainObject'>
            <description>A map of additional options to pass to the method.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all divs to slide up, completing the animation within 400 milliseconds.
$( document.body ).click(function() {
  if ( $( "div:first" ).is( ":hidden" ) ) {
    $( "div" ).show( "slow" );
  } else {
    $( "div" ).slideUp();
  }
});

  div {
    background: #3d9a44;
    margin: 3px;
    width: 80px;
    height: 40px;
    float: left;
  }

Click me!
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Animates the parent paragraph to slide up, completing the animation within 200 milliseconds. Once the animation is done, it displays an alert.
$( "button" ).click(function() {
  $( this ).parent().slideUp( "slow", function() {
    $( "#msg" ).text( $( "button", this ).text() + " has completed." );
  });
});

 div {
   margin: 2px;
  }

&lt;div&gt;
  &lt;button&gt;Hide One&lt;/button&gt;
  &lt;input type="text" value="One"&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;button&gt;Hide Two&lt;/button&gt;
  &lt;input type="text" value="Two"&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;button&gt;Hide Three&lt;/button&gt;
  &lt;input type="text" value="Three"&gt;
&lt;/div&gt;

&lt;div id="msg"&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='slideUp' scope='instance'>
        <description>Hide the matched elements with a sliding motion.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='easing' usage='optional' type='String'>
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Animates all divs to slide up, completing the animation within 400 milliseconds.
$( document.body ).click(function() {
  if ( $( "div:first" ).is( ":hidden" ) ) {
    $( "div" ).show( "slow" );
  } else {
    $( "div" ).slideUp();
  }
});

  div {
    background: #3d9a44;
    margin: 3px;
    width: 80px;
    height: 40px;
    float: left;
  }

Click me!
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
Animates the parent paragraph to slide up, completing the animation within 200 milliseconds. Once the animation is done, it displays an alert.
$( "button" ).click(function() {
  $( this ).parent().slideUp( "slow", function() {
    $( "#msg" ).text( $( "button", this ).text() + " has completed." );
  });
});

 div {
   margin: 2px;
  }

&lt;div&gt;
  &lt;button&gt;Hide One&lt;/button&gt;
  &lt;input type="text" value="One"&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;button&gt;Hide Two&lt;/button&gt;
  &lt;input type="text" value="Two"&gt;
&lt;/div&gt;

&lt;div&gt;
  &lt;button&gt;Hide Three&lt;/button&gt;
  &lt;input type="text" value="Three"&gt;
&lt;/div&gt;

&lt;div id="msg"&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='stop' scope='instance'>
        <description>Stop the currently-running animation on the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='clearQueue' usage='optional' type='Boolean'>
            <description>A Boolean indicating whether to remove queued animation as well. Defaults to false.</description>
          </parameter>
          <parameter name='jumpToEnd' usage='optional' type='Boolean'>
            <description>A Boolean indicating whether to complete the current animation immediately. Defaults to false.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Click the Go button once to start the animation, then click the STOP button to stop it where it's currently positioned.  Another option is to click several buttons to queue them up and see that stop just kills the currently playing one.
// Start animation
$( "#go" ).click(function() {
  $( ".block" ).animate({ left: "+=100px" }, 2000 );
});

// Stop animation when button is clicked
$( "#stop" ).click(function() {
  $( ".block" ).stop();
});

// Start animation in the opposite direction
$( "#back" ).click(function() {
  $( ".block" ).animate({ left: "-=100px" }, 2000 );
});

&lt;button id="go"&gt;Go&lt;/button&gt;
&lt;button id="stop"&gt;STOP!&lt;/button&gt;
&lt;button id="back"&gt;Back&lt;/button&gt;
&lt;div class="block"&gt;&lt;/div&gt;

  div {
    position: absolute;
    background-color: #abc;
    left: 0px;
    top: 30px;
    width: 60px;
    height: 60px;
    margin: 5px;
  }
Click the slideToggle button to start the animation, then click again before the animation is completed. The animation will toggle the other direction from the saved starting point.
var $block = $( ".block" );

// Toggle a sliding animation animation
$( "#toggle" ).on( "click", function() {
  $block.stop().slideToggle( 1000 );
});

&lt;button id="toggle"&gt;slideToggle&lt;/button&gt;
&lt;div class="block"&gt;&lt;/div&gt;

  .block {
    background-color: #abc;
    border: 2px solid black;
    width: 200px;
    height: 80px;
    margin: 10px;
  }
</example>
        </examples>
      </method>
      <method name='stop' scope='instance'>
        <description>Stop the currently-running animation on the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='queue' usage='optional' type='String'>
            <description>The name of the queue in which to stop animations.</description>
          </parameter>
          <parameter name='clearQueue' usage='optional' type='Boolean'>
            <description>A Boolean indicating whether to remove queued animation as well. Defaults to false.</description>
          </parameter>
          <parameter name='jumpToEnd' usage='optional' type='Boolean'>
            <description>A Boolean indicating whether to complete the current animation immediately. Defaults to false.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Click the Go button once to start the animation, then click the STOP button to stop it where it's currently positioned.  Another option is to click several buttons to queue them up and see that stop just kills the currently playing one.
// Start animation
$( "#go" ).click(function() {
  $( ".block" ).animate({ left: "+=100px" }, 2000 );
});

// Stop animation when button is clicked
$( "#stop" ).click(function() {
  $( ".block" ).stop();
});

// Start animation in the opposite direction
$( "#back" ).click(function() {
  $( ".block" ).animate({ left: "-=100px" }, 2000 );
});

&lt;button id="go"&gt;Go&lt;/button&gt;
&lt;button id="stop"&gt;STOP!&lt;/button&gt;
&lt;button id="back"&gt;Back&lt;/button&gt;
&lt;div class="block"&gt;&lt;/div&gt;

  div {
    position: absolute;
    background-color: #abc;
    left: 0px;
    top: 30px;
    width: 60px;
    height: 60px;
    margin: 5px;
  }
Click the slideToggle button to start the animation, then click again before the animation is completed. The animation will toggle the other direction from the saved starting point.
var $block = $( ".block" );

// Toggle a sliding animation animation
$( "#toggle" ).on( "click", function() {
  $block.stop().slideToggle( 1000 );
});

&lt;button id="toggle"&gt;slideToggle&lt;/button&gt;
&lt;div class="block"&gt;&lt;/div&gt;

  .block {
    background-color: #abc;
    border: 2px solid black;
    width: 200px;
    height: 80px;
    margin: 10px;
  }
</example>
        </examples>
      </method>
      <method name='submit' scope='instance'>
        <description>Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>If you'd like to prevent forms from being submitted unless a flag variable is set, try:
$( "form" ).submit(function( event ) {
  if ( $( "input:first" ).val() === "correct" ) {
    $( "span" ).text( "Validated..." ).show();
    return;
  }

  $( "span" ).text( "Not valid!" ).show().fadeOut( 1000 );
  event.preventDefault();
});

  p {
    margin: 0;
    color: blue;
  }
  div,p {
    margin-left: 10px;
  }
  span {
    color: red;
  }

&lt;p&gt;Type 'correct' to validate.&lt;/p&gt;
&lt;form action="javascript:alert( 'success!' );"&gt;
  &lt;div&gt;
    &lt;input type="text"&gt;
    &lt;input type="submit"&gt;
  &lt;/div&gt;
&lt;/form&gt;
&lt;span&gt;&lt;/span&gt;
If you'd like to prevent forms from being submitted unless a flag variable is set, try:
$( "form" ).submit(function() {
  return this.some_flag_variable;
});
To trigger the submit event on the first form on the page, try:
$( "form:first" ).submit();
</example>
        </examples>
      </method>
      <method name='submit' scope='instance'>
        <description>Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='PlainObject'>
            <description>An object containing data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>If you'd like to prevent forms from being submitted unless a flag variable is set, try:
$( "form" ).submit(function( event ) {
  if ( $( "input:first" ).val() === "correct" ) {
    $( "span" ).text( "Validated..." ).show();
    return;
  }

  $( "span" ).text( "Not valid!" ).show().fadeOut( 1000 );
  event.preventDefault();
});

  p {
    margin: 0;
    color: blue;
  }
  div,p {
    margin-left: 10px;
  }
  span {
    color: red;
  }

&lt;p&gt;Type 'correct' to validate.&lt;/p&gt;
&lt;form action="javascript:alert( 'success!' );"&gt;
  &lt;div&gt;
    &lt;input type="text"&gt;
    &lt;input type="submit"&gt;
  &lt;/div&gt;
&lt;/form&gt;
&lt;span&gt;&lt;/span&gt;
If you'd like to prevent forms from being submitted unless a flag variable is set, try:
$( "form" ).submit(function() {
  return this.some_flag_variable;
});
To trigger the submit event on the first form on the page, try:
$( "form:first" ).submit();
</example>
        </examples>
      </method>
      <method name='submit' scope='instance'>
        <description>Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>If you'd like to prevent forms from being submitted unless a flag variable is set, try:
$( "form" ).submit(function( event ) {
  if ( $( "input:first" ).val() === "correct" ) {
    $( "span" ).text( "Validated..." ).show();
    return;
  }

  $( "span" ).text( "Not valid!" ).show().fadeOut( 1000 );
  event.preventDefault();
});

  p {
    margin: 0;
    color: blue;
  }
  div,p {
    margin-left: 10px;
  }
  span {
    color: red;
  }

&lt;p&gt;Type 'correct' to validate.&lt;/p&gt;
&lt;form action="javascript:alert( 'success!' );"&gt;
  &lt;div&gt;
    &lt;input type="text"&gt;
    &lt;input type="submit"&gt;
  &lt;/div&gt;
&lt;/form&gt;
&lt;span&gt;&lt;/span&gt;
If you'd like to prevent forms from being submitted unless a flag variable is set, try:
$( "form" ).submit(function() {
  return this.some_flag_variable;
});
To trigger the submit event on the first form on the page, try:
$( "form:first" ).submit();
</example>
        </examples>
      </method>
      <method name='text' scope='instance'>
        <description>Get the combined text contents of each element in the set of matched elements, including their descendants.</description>
        <return-types>
          <return-type type='String' />
        </return-types>
        <parameters />
        <examples>
          <example>Find the text in the first paragraph (stripping out the html), then set the html of the last paragraph to show it is just text (the red bold is gone).
var str = $( "p:first" ).text();
$( "p:last" ).html( str );

  p {
    color: blue;
    margin: 8px;
  }
  b {
    color: red;
  }

&lt;p&gt;&lt;b&gt;Test&lt;/b&gt; Paragraph.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='text' scope='instance'>
        <description>Set the content of each element in the set of matched elements to the specified text.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='text' usage='required' type=''>
            <description>The text to set as the content of each matched element. When Number or Boolean is supplied, it will be converted to a String representation.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Add text to the paragraph (notice the bold tag is escaped).
$( "p" ).text( "&lt;b&gt;Some&lt;/b&gt; new text." );

  p {
    color: blue;
    margin: 8px;
  }

&lt;p&gt;Test Paragraph.&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='text' scope='instance'>
        <description>Set the content of each element in the set of matched elements to the specified text.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index, text)' usage='required' type='Function'>
            <description>A function returning the text content to set. Receives the index position of the element in the set and the old text value as arguments.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Add text to the paragraph (notice the bold tag is escaped).
$( "p" ).text( "&lt;b&gt;Some&lt;/b&gt; new text." );

  p {
    color: blue;
    margin: 8px;
  }

&lt;p&gt;Test Paragraph.&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='toArray' scope='instance'>
        <description>Retrieve all the elements contained in the jQuery set, as an array.</description>
        <return-types>
          <return-type type='Array' />
        </return-types>
        <parameters />
        <examples>
          <example>Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.
function disp( divs ) {
  var a = [];
  for ( var i = 0; i &lt; divs.length; i++ ) {
    a.push( divs[ i ].innerHTML );
  }
  $( "span" ).text( a.join( " " ) );
}

disp( $( "div" ).toArray().reverse() );

  span {
    color: red;
  }

Reversed - &lt;span&gt;&lt;/span&gt;

&lt;div&gt;One&lt;/div&gt;
&lt;div&gt;Two&lt;/div&gt;
&lt;div&gt;Three&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='toggle' scope='instance'>
        <description>Bind two or more handlers to the matched elements, to be executed on alternate clicks.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute every even time the element is clicked.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute every odd time the element is clicked.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='optional' type='Function'>
            <description>Additional handlers to cycle through after clicks.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Toggle a style on table cells. (Not recommended. Use .toggleClass() instead.):
$( "td" ).toggle(
  function() {
    $( this ).addClass( "selected" );
  }, function() {
    $( this ).removeClass( "selected" );
  }
);
</example>
        </examples>
      </method>
      <method name='toggle' scope='instance'>
        <description>Display or hide the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='optional' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Toggles all paragraphs.
$( "button" ).click(function() {
  $( "p" ).toggle();
});

&lt;button&gt;Toggle&lt;/button&gt;
&lt;p&gt;Hello&lt;/p&gt;
&lt;p style="display: none"&gt;Good Bye&lt;/p&gt;
Animates all paragraphs to be shown if they are hidden and hidden if they are visible, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).toggle( "slow" );
});

  p {
    background: #dad;
    font-weight: bold;
    font-size: 16px;
  }

&lt;button&gt;Toggle 'em&lt;/button&gt;
&lt;p&gt;Hiya&lt;/p&gt;
&lt;p&gt;Such interesting text, eh?&lt;/p&gt;
Shows all paragraphs, then hides them all, back and forth.
var flip = 0;
$( "button" ).click(function() {
  $( "p" ).toggle( flip++ % 2 === 0 );
});

&lt;button&gt;Toggle&lt;/button&gt;
&lt;p&gt;Hello&lt;/p&gt;
&lt;p style="display: none"&gt;Good Bye&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='toggle' scope='instance'>
        <description>Display or hide the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='options' usage='required' type='PlainObject'>
            <description>A map of additional options to pass to the method.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Toggles all paragraphs.
$( "button" ).click(function() {
  $( "p" ).toggle();
});

&lt;button&gt;Toggle&lt;/button&gt;
&lt;p&gt;Hello&lt;/p&gt;
&lt;p style="display: none"&gt;Good Bye&lt;/p&gt;
Animates all paragraphs to be shown if they are hidden and hidden if they are visible, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).toggle( "slow" );
});

  p {
    background: #dad;
    font-weight: bold;
    font-size: 16px;
  }

&lt;button&gt;Toggle 'em&lt;/button&gt;
&lt;p&gt;Hiya&lt;/p&gt;
&lt;p&gt;Such interesting text, eh?&lt;/p&gt;
Shows all paragraphs, then hides them all, back and forth.
var flip = 0;
$( "button" ).click(function() {
  $( "p" ).toggle( flip++ % 2 === 0 );
});

&lt;button&gt;Toggle&lt;/button&gt;
&lt;p&gt;Hello&lt;/p&gt;
&lt;p style="display: none"&gt;Good Bye&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='toggle' scope='instance'>
        <description>Display or hide the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='duration' usage='required' type=''>
            <description>A string or number determining how long the animation will run.</description>
          </parameter>
          <parameter name='easing' usage='optional' type='String'>
            <description>A string indicating which easing function to use for the transition.</description>
          </parameter>
          <parameter name='complete' usage='optional' type='Function'>
            <description>A function to call once the animation is complete.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Toggles all paragraphs.
$( "button" ).click(function() {
  $( "p" ).toggle();
});

&lt;button&gt;Toggle&lt;/button&gt;
&lt;p&gt;Hello&lt;/p&gt;
&lt;p style="display: none"&gt;Good Bye&lt;/p&gt;
Animates all paragraphs to be shown if they are hidden and hidden if they are visible, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).toggle( "slow" );
});

  p {
    background: #dad;
    font-weight: bold;
    font-size: 16px;
  }

&lt;button&gt;Toggle 'em&lt;/button&gt;
&lt;p&gt;Hiya&lt;/p&gt;
&lt;p&gt;Such interesting text, eh?&lt;/p&gt;
Shows all paragraphs, then hides them all, back and forth.
var flip = 0;
$( "button" ).click(function() {
  $( "p" ).toggle( flip++ % 2 === 0 );
});

&lt;button&gt;Toggle&lt;/button&gt;
&lt;p&gt;Hello&lt;/p&gt;
&lt;p style="display: none"&gt;Good Bye&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='toggle' scope='instance'>
        <description>Display or hide the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='showOrHide' usage='required' type='Boolean'>
            <description>A Boolean indicating whether to show or hide the elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Toggles all paragraphs.
$( "button" ).click(function() {
  $( "p" ).toggle();
});

&lt;button&gt;Toggle&lt;/button&gt;
&lt;p&gt;Hello&lt;/p&gt;
&lt;p style="display: none"&gt;Good Bye&lt;/p&gt;
Animates all paragraphs to be shown if they are hidden and hidden if they are visible, completing the animation within 600 milliseconds.
$( "button" ).click(function() {
  $( "p" ).toggle( "slow" );
});

  p {
    background: #dad;
    font-weight: bold;
    font-size: 16px;
  }

&lt;button&gt;Toggle 'em&lt;/button&gt;
&lt;p&gt;Hiya&lt;/p&gt;
&lt;p&gt;Such interesting text, eh?&lt;/p&gt;
Shows all paragraphs, then hides them all, back and forth.
var flip = 0;
$( "button" ).click(function() {
  $( "p" ).toggle( flip++ % 2 === 0 );
});

&lt;button&gt;Toggle&lt;/button&gt;
&lt;p&gt;Hello&lt;/p&gt;
&lt;p style="display: none"&gt;Good Bye&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='toggleClass' scope='instance'>
        <description>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='className' usage='required' type='String'>
            <description>One or more class names (separated by spaces) to be toggled for each element in the matched set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Toggle the class 'highlight' when a paragraph is clicked.
$( "p" ).click(function() {
  $( this ).toggleClass( "highlight" );
});

  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
    cursor: pointer;
  }
  .blue {
    color: blue;
  }
  .highlight {
    background: yellow;
  }

&lt;p class="blue"&gt;Click to toggle&lt;/p&gt;
&lt;p class="blue highlight"&gt;highlight&lt;/p&gt;
&lt;p class="blue"&gt;on these&lt;/p&gt;
&lt;p class="blue"&gt;paragraphs&lt;/p&gt;
Add the "highlight" class to the clicked paragraph on every third click of that paragraph, remove it every first and second click.
var count = 0;
$( "p" ).each(function() {
  var $thisParagraph = $( this );
  var count = 0;
  $thisParagraph.click(function() {
    count++;
    $thisParagraph.find( "span" ).text( "clicks: " + count );
    $thisParagraph.toggleClass( "highlight", count % 3 === 0 );
  });
});

  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
    cursor: pointer;
  }
  .blue {
    color: blue;
  }
  .highlight {
    background: red;
  }

&lt;p class="blue"&gt;Click to toggle (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
&lt;p class="blue highlight"&gt;highlight (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
&lt;p class="blue"&gt;on these (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
&lt;p class="blue"&gt;paragraphs (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
Toggle the class name(s) indicated on the buttons for each div.
  
  .wrap &gt; div {
    float: left;
    width: 100px;
    margin: 1em 1em 0 0;
    padding=left: 3px;
    border: 1px solid #abc;
  }
  div.a {
    background-color: aqua;
  }
  div.b {
    background-color: burlywood;
  }
  div.c {
    background-color: cornsilk;
  }

&lt;div class="buttons"&gt;
  &lt;button&gt;toggle&lt;/button&gt;
  &lt;button class="a"&gt;toggle a&lt;/button&gt;
  &lt;button class="a b"&gt;toggle a b&lt;/button&gt;
  &lt;button class="a b c"&gt;toggle a b c&lt;/button&gt;
  &lt;a href="#"&gt;reset&lt;/a&gt;
&lt;/div&gt;
&lt;div class="wrap"&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div class="b"&gt;&lt;/div&gt;
  &lt;div class="a b"&gt;&lt;/div&gt;
  &lt;div class="a c"&gt;&lt;/div&gt;
&lt;/div&gt;

var cls = [ "", "a", "a b", "a b c" ];
var divs = $( "div.wrap" ).children();
var appendClass = function() {
  divs.append(function() {
    return "&lt;div&gt;" + ( this.className || "none" ) + "&lt;/div&gt;";
  });
};

appendClass();

$( "button" ).on( "click", function() {
  var tc = this.className || undefined;
  divs.toggleClass( tc );
  appendClass();
});

$( "a" ).on( "click", function( event ) {
  event.preventDefault();
  divs.empty().each(function( i ) {
    this.className = cls[ i ];
  });
  appendClass();
});
</example>
        </examples>
      </method>
      <method name='toggleClass' scope='instance'>
        <description>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='className' usage='required' type='String'>
            <description>One or more class names (separated by spaces) to be toggled for each element in the matched set.</description>
          </parameter>
          <parameter name='switch' usage='required' type='Boolean'>
            <description>A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Toggle the class 'highlight' when a paragraph is clicked.
$( "p" ).click(function() {
  $( this ).toggleClass( "highlight" );
});

  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
    cursor: pointer;
  }
  .blue {
    color: blue;
  }
  .highlight {
    background: yellow;
  }

&lt;p class="blue"&gt;Click to toggle&lt;/p&gt;
&lt;p class="blue highlight"&gt;highlight&lt;/p&gt;
&lt;p class="blue"&gt;on these&lt;/p&gt;
&lt;p class="blue"&gt;paragraphs&lt;/p&gt;
Add the "highlight" class to the clicked paragraph on every third click of that paragraph, remove it every first and second click.
var count = 0;
$( "p" ).each(function() {
  var $thisParagraph = $( this );
  var count = 0;
  $thisParagraph.click(function() {
    count++;
    $thisParagraph.find( "span" ).text( "clicks: " + count );
    $thisParagraph.toggleClass( "highlight", count % 3 === 0 );
  });
});

  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
    cursor: pointer;
  }
  .blue {
    color: blue;
  }
  .highlight {
    background: red;
  }

&lt;p class="blue"&gt;Click to toggle (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
&lt;p class="blue highlight"&gt;highlight (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
&lt;p class="blue"&gt;on these (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
&lt;p class="blue"&gt;paragraphs (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
Toggle the class name(s) indicated on the buttons for each div.
  
  .wrap &gt; div {
    float: left;
    width: 100px;
    margin: 1em 1em 0 0;
    padding=left: 3px;
    border: 1px solid #abc;
  }
  div.a {
    background-color: aqua;
  }
  div.b {
    background-color: burlywood;
  }
  div.c {
    background-color: cornsilk;
  }

&lt;div class="buttons"&gt;
  &lt;button&gt;toggle&lt;/button&gt;
  &lt;button class="a"&gt;toggle a&lt;/button&gt;
  &lt;button class="a b"&gt;toggle a b&lt;/button&gt;
  &lt;button class="a b c"&gt;toggle a b c&lt;/button&gt;
  &lt;a href="#"&gt;reset&lt;/a&gt;
&lt;/div&gt;
&lt;div class="wrap"&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div class="b"&gt;&lt;/div&gt;
  &lt;div class="a b"&gt;&lt;/div&gt;
  &lt;div class="a c"&gt;&lt;/div&gt;
&lt;/div&gt;

var cls = [ "", "a", "a b", "a b c" ];
var divs = $( "div.wrap" ).children();
var appendClass = function() {
  divs.append(function() {
    return "&lt;div&gt;" + ( this.className || "none" ) + "&lt;/div&gt;";
  });
};

appendClass();

$( "button" ).on( "click", function() {
  var tc = this.className || undefined;
  divs.toggleClass( tc );
  appendClass();
});

$( "a" ).on( "click", function( event ) {
  event.preventDefault();
  divs.empty().each(function( i ) {
    this.className = cls[ i ];
  });
  appendClass();
});
</example>
        </examples>
      </method>
      <method name='toggleClass' scope='instance'>
        <description>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='switch' usage='optional' type='Boolean'>
            <description>A boolean value to determine whether the class should be added or removed.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Toggle the class 'highlight' when a paragraph is clicked.
$( "p" ).click(function() {
  $( this ).toggleClass( "highlight" );
});

  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
    cursor: pointer;
  }
  .blue {
    color: blue;
  }
  .highlight {
    background: yellow;
  }

&lt;p class="blue"&gt;Click to toggle&lt;/p&gt;
&lt;p class="blue highlight"&gt;highlight&lt;/p&gt;
&lt;p class="blue"&gt;on these&lt;/p&gt;
&lt;p class="blue"&gt;paragraphs&lt;/p&gt;
Add the "highlight" class to the clicked paragraph on every third click of that paragraph, remove it every first and second click.
var count = 0;
$( "p" ).each(function() {
  var $thisParagraph = $( this );
  var count = 0;
  $thisParagraph.click(function() {
    count++;
    $thisParagraph.find( "span" ).text( "clicks: " + count );
    $thisParagraph.toggleClass( "highlight", count % 3 === 0 );
  });
});

  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
    cursor: pointer;
  }
  .blue {
    color: blue;
  }
  .highlight {
    background: red;
  }

&lt;p class="blue"&gt;Click to toggle (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
&lt;p class="blue highlight"&gt;highlight (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
&lt;p class="blue"&gt;on these (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
&lt;p class="blue"&gt;paragraphs (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
Toggle the class name(s) indicated on the buttons for each div.
  
  .wrap &gt; div {
    float: left;
    width: 100px;
    margin: 1em 1em 0 0;
    padding=left: 3px;
    border: 1px solid #abc;
  }
  div.a {
    background-color: aqua;
  }
  div.b {
    background-color: burlywood;
  }
  div.c {
    background-color: cornsilk;
  }

&lt;div class="buttons"&gt;
  &lt;button&gt;toggle&lt;/button&gt;
  &lt;button class="a"&gt;toggle a&lt;/button&gt;
  &lt;button class="a b"&gt;toggle a b&lt;/button&gt;
  &lt;button class="a b c"&gt;toggle a b c&lt;/button&gt;
  &lt;a href="#"&gt;reset&lt;/a&gt;
&lt;/div&gt;
&lt;div class="wrap"&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div class="b"&gt;&lt;/div&gt;
  &lt;div class="a b"&gt;&lt;/div&gt;
  &lt;div class="a c"&gt;&lt;/div&gt;
&lt;/div&gt;

var cls = [ "", "a", "a b", "a b c" ];
var divs = $( "div.wrap" ).children();
var appendClass = function() {
  divs.append(function() {
    return "&lt;div&gt;" + ( this.className || "none" ) + "&lt;/div&gt;";
  });
};

appendClass();

$( "button" ).on( "click", function() {
  var tc = this.className || undefined;
  divs.toggleClass( tc );
  appendClass();
});

$( "a" ).on( "click", function( event ) {
  event.preventDefault();
  divs.empty().each(function( i ) {
    this.className = cls[ i ];
  });
  appendClass();
});
</example>
        </examples>
      </method>
      <method name='toggleClass' scope='instance'>
        <description>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index, class, switch)' usage='required' type='Function'>
            <description>A function that returns class names to be toggled in the class attribute of each element in the matched set. Receives the index position of the element in the set, the old class value, and the switch as arguments.</description>
          </parameter>
          <parameter name='switch' usage='optional' type='Boolean'>
            <description>A boolean value to determine whether the class should be added or removed.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Toggle the class 'highlight' when a paragraph is clicked.
$( "p" ).click(function() {
  $( this ).toggleClass( "highlight" );
});

  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
    cursor: pointer;
  }
  .blue {
    color: blue;
  }
  .highlight {
    background: yellow;
  }

&lt;p class="blue"&gt;Click to toggle&lt;/p&gt;
&lt;p class="blue highlight"&gt;highlight&lt;/p&gt;
&lt;p class="blue"&gt;on these&lt;/p&gt;
&lt;p class="blue"&gt;paragraphs&lt;/p&gt;
Add the "highlight" class to the clicked paragraph on every third click of that paragraph, remove it every first and second click.
var count = 0;
$( "p" ).each(function() {
  var $thisParagraph = $( this );
  var count = 0;
  $thisParagraph.click(function() {
    count++;
    $thisParagraph.find( "span" ).text( "clicks: " + count );
    $thisParagraph.toggleClass( "highlight", count % 3 === 0 );
  });
});

  p {
    margin: 4px;
    font-size: 16px;
    font-weight: bolder;
    cursor: pointer;
  }
  .blue {
    color: blue;
  }
  .highlight {
    background: red;
  }

&lt;p class="blue"&gt;Click to toggle (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
&lt;p class="blue highlight"&gt;highlight (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
&lt;p class="blue"&gt;on these (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
&lt;p class="blue"&gt;paragraphs (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;
Toggle the class name(s) indicated on the buttons for each div.
  
  .wrap &gt; div {
    float: left;
    width: 100px;
    margin: 1em 1em 0 0;
    padding=left: 3px;
    border: 1px solid #abc;
  }
  div.a {
    background-color: aqua;
  }
  div.b {
    background-color: burlywood;
  }
  div.c {
    background-color: cornsilk;
  }

&lt;div class="buttons"&gt;
  &lt;button&gt;toggle&lt;/button&gt;
  &lt;button class="a"&gt;toggle a&lt;/button&gt;
  &lt;button class="a b"&gt;toggle a b&lt;/button&gt;
  &lt;button class="a b c"&gt;toggle a b c&lt;/button&gt;
  &lt;a href="#"&gt;reset&lt;/a&gt;
&lt;/div&gt;
&lt;div class="wrap"&gt;
  &lt;div&gt;&lt;/div&gt;
  &lt;div class="b"&gt;&lt;/div&gt;
  &lt;div class="a b"&gt;&lt;/div&gt;
  &lt;div class="a c"&gt;&lt;/div&gt;
&lt;/div&gt;

var cls = [ "", "a", "a b", "a b c" ];
var divs = $( "div.wrap" ).children();
var appendClass = function() {
  divs.append(function() {
    return "&lt;div&gt;" + ( this.className || "none" ) + "&lt;/div&gt;";
  });
};

appendClass();

$( "button" ).on( "click", function() {
  var tc = this.className || undefined;
  divs.toggleClass( tc );
  appendClass();
});

$( "a" ).on( "click", function( event ) {
  event.preventDefault();
  divs.empty().each(function( i ) {
    this.className = cls[ i ];
  });
  appendClass();
});
</example>
        </examples>
      </method>
      <method name='trigger' scope='instance'>
        <description>Execute all handlers and behaviors attached to the matched elements for the given event type.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventType' usage='required' type='String'>
            <description>A string containing a JavaScript event type, such as click or submit.</description>
          </parameter>
          <parameter name='extraParameters' usage='optional' type=''>
            <description>Additional parameters to pass along to the event handler.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Clicks to button #2 also trigger a click for button #1.
$( "button:first" ).click(function() {
  update( $( "span:first" ) );
});

$( "button:last" ).click(function() {
  $( "button:first" ).trigger( "click" );
  update( $( "span:last" ) );
});

function update( j ) {
  var n = parseInt( j.text(), 10 );
  j.text( n + 1 );
}

  button {
    margin: 10px;
  }
  div {
    color: blue;
    font-weight: bold;
  }
  span {
    color: red;
  }

&lt;button&gt;Button #1&lt;/button&gt;
&lt;button&gt;Button #2&lt;/button&gt;
&lt;div&gt;&lt;span&gt;0&lt;/span&gt; button #1 clicks.&lt;/div&gt;
&lt;div&gt;&lt;span&gt;0&lt;/span&gt; button #2 clicks.&lt;/div&gt;
To submit the first form without using the submit() function, try:
$( "form:first" ).trigger( "submit" );
To submit the first form without using the submit() function, try:
var event = jQuery.Event( "submit" );
$( "form:first" ).trigger( event );
if ( event.isDefaultPrevented() ) {
  // Perform an action...
}
To pass arbitrary data to an event:
$( "p" )
  .click(function( event, a, b ) {
    // When a normal click fires, a and b are undefined
    // for a trigger like below a refers to "foo" and b refers to "bar"
  })
  .trigger( "click", [ "foo", "bar" ] );
To pass arbitrary data through an event object:
var event = jQuery.Event( "logged" );
event.user = "foo";
event.pass = "bar";
$( "body" ).trigger( event );
Alternative way to pass data through an event object:
$( "body" ).trigger({
  type:"logged",
  user:"foo",
  pass:"bar"
});
</example>
        </examples>
      </method>
      <method name='trigger' scope='instance'>
        <description>Execute all handlers and behaviors attached to the matched elements for the given event type.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='event' usage='required' type='Event'>
            <description>A jQuery.Event object.</description>
          </parameter>
          <parameter name='extraParameters' usage='optional' type=''>
            <description>Additional parameters to pass along to the event handler.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Clicks to button #2 also trigger a click for button #1.
$( "button:first" ).click(function() {
  update( $( "span:first" ) );
});

$( "button:last" ).click(function() {
  $( "button:first" ).trigger( "click" );
  update( $( "span:last" ) );
});

function update( j ) {
  var n = parseInt( j.text(), 10 );
  j.text( n + 1 );
}

  button {
    margin: 10px;
  }
  div {
    color: blue;
    font-weight: bold;
  }
  span {
    color: red;
  }

&lt;button&gt;Button #1&lt;/button&gt;
&lt;button&gt;Button #2&lt;/button&gt;
&lt;div&gt;&lt;span&gt;0&lt;/span&gt; button #1 clicks.&lt;/div&gt;
&lt;div&gt;&lt;span&gt;0&lt;/span&gt; button #2 clicks.&lt;/div&gt;
To submit the first form without using the submit() function, try:
$( "form:first" ).trigger( "submit" );
To submit the first form without using the submit() function, try:
var event = jQuery.Event( "submit" );
$( "form:first" ).trigger( event );
if ( event.isDefaultPrevented() ) {
  // Perform an action...
}
To pass arbitrary data to an event:
$( "p" )
  .click(function( event, a, b ) {
    // When a normal click fires, a and b are undefined
    // for a trigger like below a refers to "foo" and b refers to "bar"
  })
  .trigger( "click", [ "foo", "bar" ] );
To pass arbitrary data through an event object:
var event = jQuery.Event( "logged" );
event.user = "foo";
event.pass = "bar";
$( "body" ).trigger( event );
Alternative way to pass data through an event object:
$( "body" ).trigger({
  type:"logged",
  user:"foo",
  pass:"bar"
});
</example>
        </examples>
      </method>
      <method name='triggerHandler' scope='instance'>
        <description>Execute all handlers attached to an element for an event.</description>
        <return-types>
          <return-type type='Object' />
        </return-types>
        <parameters>
          <parameter name='eventType' usage='required' type='String'>
            <description>A string containing a JavaScript event type, such as click or submit.</description>
          </parameter>
          <parameter name='extraParameters' usage='optional' type='Array'>
            <description>An array of additional parameters to pass along to the event handler.</description>
          </parameter>
        </parameters>
        <examples>
          <example>If you called .triggerHandler() on a focus event - the browser's default focus action would not be triggered, only the event handlers bound to the focus event.
$( "#old" ).click(function() {
  $( "input" ).trigger( "focus" );
});
$( "#new" ).click(function() {
  $( "input" ).triggerHandler( "focus" );
});
$( "input" ).focus(function() {
  $( "&lt;span&gt;Focused!&lt;/span&gt;" ).appendTo( "body" ).fadeOut( 1000 );
});

&lt;button id="old"&gt;.trigger( "focus" )&lt;/button&gt;
&lt;button id="new"&gt;.triggerHandler( "focus" )&lt;/button&gt;&lt;br&gt;&lt;br&gt;

&lt;input type="text" value="To Be Focused"&gt;
</example>
        </examples>
      </method>
      <method name='unbind' scope='instance'>
        <description>Remove a previously-attached event handler from the elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventType' usage='required' type='String'>
            <description>A string containing a JavaScript event type, such as click or submit.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='optional' type='Function'>
            <description>The function that is to be no longer executed.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Can bind and unbind events to the colored button.
function aClick() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "#theone" )
    .bind( "click", aClick )
    .text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "#theone" )
    .unbind( "click", aClick )
    .text( "Does nothing..." );
});

  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }

&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
&lt;button id="bind"&gt;Bind Click&lt;/button&gt;
&lt;button id="unbind"&gt;Unbind Click&lt;/button&gt;
&lt;div style="display:none;"&gt;Click!&lt;/div&gt;
To unbind all events from all paragraphs, write:
$( "p" ).unbind();
To unbind all click events from all paragraphs, write:
$( "p" ).unbind( "click" );
To unbind just one previously bound handler, pass the function in as the second argument:
var foo = function() {
  // Code to handle some kind of event
};

$( "p" ).bind( "click", foo ); // ... Now foo will be called when paragraphs are clicked ...

$( "p" ).unbind( "click", foo ); // ... foo will no longer be called.
</example>
        </examples>
      </method>
      <method name='unbind' scope='instance'>
        <description>Remove a previously-attached event handler from the elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventType' usage='required' type='String'>
            <description>A string containing a JavaScript event type, such as click or submit.</description>
          </parameter>
          <parameter name='false' usage='required' type='Boolean'>
            <description>Unbinds the corresponding 'return false' function that was bound using .bind( eventType, false ).</description>
          </parameter>
        </parameters>
        <examples>
          <example>Can bind and unbind events to the colored button.
function aClick() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "#theone" )
    .bind( "click", aClick )
    .text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "#theone" )
    .unbind( "click", aClick )
    .text( "Does nothing..." );
});

  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }

&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
&lt;button id="bind"&gt;Bind Click&lt;/button&gt;
&lt;button id="unbind"&gt;Unbind Click&lt;/button&gt;
&lt;div style="display:none;"&gt;Click!&lt;/div&gt;
To unbind all events from all paragraphs, write:
$( "p" ).unbind();
To unbind all click events from all paragraphs, write:
$( "p" ).unbind( "click" );
To unbind just one previously bound handler, pass the function in as the second argument:
var foo = function() {
  // Code to handle some kind of event
};

$( "p" ).bind( "click", foo ); // ... Now foo will be called when paragraphs are clicked ...

$( "p" ).unbind( "click", foo ); // ... foo will no longer be called.
</example>
        </examples>
      </method>
      <method name='unbind' scope='instance'>
        <description>Remove a previously-attached event handler from the elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='event' usage='required' type='Object'>
            <description>A JavaScript event object as passed to an event handler.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Can bind and unbind events to the colored button.
function aClick() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "#theone" )
    .bind( "click", aClick )
    .text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "#theone" )
    .unbind( "click", aClick )
    .text( "Does nothing..." );
});

  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }

&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
&lt;button id="bind"&gt;Bind Click&lt;/button&gt;
&lt;button id="unbind"&gt;Unbind Click&lt;/button&gt;
&lt;div style="display:none;"&gt;Click!&lt;/div&gt;
To unbind all events from all paragraphs, write:
$( "p" ).unbind();
To unbind all click events from all paragraphs, write:
$( "p" ).unbind( "click" );
To unbind just one previously bound handler, pass the function in as the second argument:
var foo = function() {
  // Code to handle some kind of event
};

$( "p" ).bind( "click", foo ); // ... Now foo will be called when paragraphs are clicked ...

$( "p" ).unbind( "click", foo ); // ... foo will no longer be called.
</example>
        </examples>
      </method>
      <method name='unbind' scope='instance'>
        <description>Remove a previously-attached event handler from the elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Can bind and unbind events to the colored button.
function aClick() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "#theone" )
    .bind( "click", aClick )
    .text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "#theone" )
    .unbind( "click", aClick )
    .text( "Does nothing..." );
});

  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }

&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
&lt;button id="bind"&gt;Bind Click&lt;/button&gt;
&lt;button id="unbind"&gt;Unbind Click&lt;/button&gt;
&lt;div style="display:none;"&gt;Click!&lt;/div&gt;
To unbind all events from all paragraphs, write:
$( "p" ).unbind();
To unbind all click events from all paragraphs, write:
$( "p" ).unbind( "click" );
To unbind just one previously bound handler, pass the function in as the second argument:
var foo = function() {
  // Code to handle some kind of event
};

$( "p" ).bind( "click", foo ); // ... Now foo will be called when paragraphs are clicked ...

$( "p" ).unbind( "click", foo ); // ... foo will no longer be called.
</example>
        </examples>
      </method>
      <method name='undelegate' scope='instance'>
        <description>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Can bind and unbind events to the colored button.
function aClick() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "body" )
    .delegate( "#theone", "click", aClick )
    .find( "#theone" ).text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "body" )
    .undelegate( "#theone", "click", aClick )
    .find( "#theone" ).text( "Does nothing..." );
});

  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }

&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
&lt;button id="bind"&gt;Bind Click&lt;/button&gt;
&lt;button id="unbind"&gt;Unbind Click&lt;/button&gt;
&lt;div style="display:none;"&gt;Click!&lt;/div&gt;
To unbind all delegated events from all paragraphs, write:
$( "p" ).undelegate();
To unbind all delegated click events from all paragraphs, write:
$( "p" ).undelegate( "click" );
To undelegate just one previously bound handler, pass the function in as the third argument:
var foo = function () {
  // Code to handle some kind of event
};

// ... Now foo will be called when paragraphs are clicked ...
$( "body" ).delegate( "p", "click", foo );

// ... foo will no longer be called.
$( "body" ).undelegate( "p", "click", foo );
To unbind all delegated events by their namespace:
var foo = function() {
  // Code to handle some kind of event
};

// Delegate events under the ".whatever" namespace
$( "form" ).delegate( ":button", "click.whatever", foo );

$( "form" ).delegate( "input[type='text'] ", "keypress.whatever", foo );

// Unbind all events delegated under the ".whatever" namespace
$( "form" ).undelegate( ".whatever" );
</example>
        </examples>
      </method>
      <method name='undelegate' scope='instance'>
        <description>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='String'>
            <description>A selector which will be used to filter the event results.</description>
          </parameter>
          <parameter name='eventType' usage='required' type='String'>
            <description>A string containing a JavaScript event type, such as "click" or "keydown"</description>
          </parameter>
        </parameters>
        <examples>
          <example>Can bind and unbind events to the colored button.
function aClick() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "body" )
    .delegate( "#theone", "click", aClick )
    .find( "#theone" ).text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "body" )
    .undelegate( "#theone", "click", aClick )
    .find( "#theone" ).text( "Does nothing..." );
});

  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }

&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
&lt;button id="bind"&gt;Bind Click&lt;/button&gt;
&lt;button id="unbind"&gt;Unbind Click&lt;/button&gt;
&lt;div style="display:none;"&gt;Click!&lt;/div&gt;
To unbind all delegated events from all paragraphs, write:
$( "p" ).undelegate();
To unbind all delegated click events from all paragraphs, write:
$( "p" ).undelegate( "click" );
To undelegate just one previously bound handler, pass the function in as the third argument:
var foo = function () {
  // Code to handle some kind of event
};

// ... Now foo will be called when paragraphs are clicked ...
$( "body" ).delegate( "p", "click", foo );

// ... foo will no longer be called.
$( "body" ).undelegate( "p", "click", foo );
To unbind all delegated events by their namespace:
var foo = function() {
  // Code to handle some kind of event
};

// Delegate events under the ".whatever" namespace
$( "form" ).delegate( ":button", "click.whatever", foo );

$( "form" ).delegate( "input[type='text'] ", "keypress.whatever", foo );

// Unbind all events delegated under the ".whatever" namespace
$( "form" ).undelegate( ".whatever" );
</example>
        </examples>
      </method>
      <method name='undelegate' scope='instance'>
        <description>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='String'>
            <description>A selector which will be used to filter the event results.</description>
          </parameter>
          <parameter name='eventType' usage='required' type='String'>
            <description>A string containing a JavaScript event type, such as "click" or "keydown"</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute at the time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Can bind and unbind events to the colored button.
function aClick() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "body" )
    .delegate( "#theone", "click", aClick )
    .find( "#theone" ).text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "body" )
    .undelegate( "#theone", "click", aClick )
    .find( "#theone" ).text( "Does nothing..." );
});

  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }

&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
&lt;button id="bind"&gt;Bind Click&lt;/button&gt;
&lt;button id="unbind"&gt;Unbind Click&lt;/button&gt;
&lt;div style="display:none;"&gt;Click!&lt;/div&gt;
To unbind all delegated events from all paragraphs, write:
$( "p" ).undelegate();
To unbind all delegated click events from all paragraphs, write:
$( "p" ).undelegate( "click" );
To undelegate just one previously bound handler, pass the function in as the third argument:
var foo = function () {
  // Code to handle some kind of event
};

// ... Now foo will be called when paragraphs are clicked ...
$( "body" ).delegate( "p", "click", foo );

// ... foo will no longer be called.
$( "body" ).undelegate( "p", "click", foo );
To unbind all delegated events by their namespace:
var foo = function() {
  // Code to handle some kind of event
};

// Delegate events under the ".whatever" namespace
$( "form" ).delegate( ":button", "click.whatever", foo );

$( "form" ).delegate( "input[type='text'] ", "keypress.whatever", foo );

// Unbind all events delegated under the ".whatever" namespace
$( "form" ).undelegate( ".whatever" );
</example>
        </examples>
      </method>
      <method name='undelegate' scope='instance'>
        <description>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='required' type='String'>
            <description>A selector which will be used to filter the event results.</description>
          </parameter>
          <parameter name='events' usage='required' type='PlainObject'>
            <description>An object of one or more event types and previously bound functions to unbind from them.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Can bind and unbind events to the colored button.
function aClick() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "body" )
    .delegate( "#theone", "click", aClick )
    .find( "#theone" ).text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "body" )
    .undelegate( "#theone", "click", aClick )
    .find( "#theone" ).text( "Does nothing..." );
});

  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }

&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
&lt;button id="bind"&gt;Bind Click&lt;/button&gt;
&lt;button id="unbind"&gt;Unbind Click&lt;/button&gt;
&lt;div style="display:none;"&gt;Click!&lt;/div&gt;
To unbind all delegated events from all paragraphs, write:
$( "p" ).undelegate();
To unbind all delegated click events from all paragraphs, write:
$( "p" ).undelegate( "click" );
To undelegate just one previously bound handler, pass the function in as the third argument:
var foo = function () {
  // Code to handle some kind of event
};

// ... Now foo will be called when paragraphs are clicked ...
$( "body" ).delegate( "p", "click", foo );

// ... foo will no longer be called.
$( "body" ).undelegate( "p", "click", foo );
To unbind all delegated events by their namespace:
var foo = function() {
  // Code to handle some kind of event
};

// Delegate events under the ".whatever" namespace
$( "form" ).delegate( ":button", "click.whatever", foo );

$( "form" ).delegate( "input[type='text'] ", "keypress.whatever", foo );

// Unbind all events delegated under the ".whatever" namespace
$( "form" ).undelegate( ".whatever" );
</example>
        </examples>
      </method>
      <method name='undelegate' scope='instance'>
        <description>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='namespace' usage='required' type='String'>
            <description>A string containing a namespace to unbind all events from.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Can bind and unbind events to the colored button.
function aClick() {
  $( "div" ).show().fadeOut( "slow" );
}
$( "#bind" ).click(function() {
  $( "body" )
    .delegate( "#theone", "click", aClick )
    .find( "#theone" ).text( "Can Click!" );
});
$( "#unbind" ).click(function() {
  $( "body" )
    .undelegate( "#theone", "click", aClick )
    .find( "#theone" ).text( "Does nothing..." );
});

  button {
    margin: 5px;
  }
  button#theone {
    color: red;
    background: yellow;
  }

&lt;button id="theone"&gt;Does nothing...&lt;/button&gt;
&lt;button id="bind"&gt;Bind Click&lt;/button&gt;
&lt;button id="unbind"&gt;Unbind Click&lt;/button&gt;
&lt;div style="display:none;"&gt;Click!&lt;/div&gt;
To unbind all delegated events from all paragraphs, write:
$( "p" ).undelegate();
To unbind all delegated click events from all paragraphs, write:
$( "p" ).undelegate( "click" );
To undelegate just one previously bound handler, pass the function in as the third argument:
var foo = function () {
  // Code to handle some kind of event
};

// ... Now foo will be called when paragraphs are clicked ...
$( "body" ).delegate( "p", "click", foo );

// ... foo will no longer be called.
$( "body" ).undelegate( "p", "click", foo );
To unbind all delegated events by their namespace:
var foo = function() {
  // Code to handle some kind of event
};

// Delegate events under the ".whatever" namespace
$( "form" ).delegate( ":button", "click.whatever", foo );

$( "form" ).delegate( "input[type='text'] ", "keypress.whatever", foo );

// Unbind all events delegated under the ".whatever" namespace
$( "form" ).undelegate( ".whatever" );
</example>
        </examples>
      </method>
      <method name='unload' scope='instance'>
        <description>Bind an event handler to the "unload" JavaScript event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute when the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To display an alert when a page is unloaded:
$( window ).unload(function() {
  alert( "Bye now!" );
});
  </example>
        </examples>
      </method>
      <method name='unload' scope='instance'>
        <description>Bind an event handler to the "unload" JavaScript event.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='eventData' usage='optional' type='Object'>
            <description>A plain object of data that will be passed to the event handler.</description>
          </parameter>
          <parameter name='handler(eventObject)' usage='required' type='Function'>
            <description>A function to execute each time the event is triggered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>To display an alert when a page is unloaded:
$( window ).unload(function() {
  alert( "Bye now!" );
});
  </example>
        </examples>
      </method>
      <method name='unwrap' scope='instance'>
        <description>Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Wrap/unwrap a div around each of the paragraphs.
var pTags = $( "p" );
$( "button" ).click(function() {
  if ( pTags.parent().is( "div" ) ) {
    pTags.unwrap();
  } else {
    pTags.wrap( "&lt;div&gt;&lt;/div&gt;" );
  }
});

  div {
    border: 2px solid blue;
  }
  p {
    background: yellow;
    margin: 4px;
  }
&lt;button&gt;wrap/unwrap&lt;/button&gt;
&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;</example>
        </examples>
      </method>
      <method name='val' scope='instance'>
        <description>Get the current value of the first element in the set of matched elements.</description>
        <return-types>
          <return-type type='' />
        </return-types>
        <parameters />
        <examples>
          <example>Get the single value from a single select and an array of values from a multiple select and display their values.
function displayVals() {
  var singleValues = $( "#single" ).val();
  var multipleValues = $( "#multiple" ).val() || [];
  $( "p" ).html( "&lt;b&gt;Single:&lt;/b&gt; " + singleValues +
    " &lt;b&gt;Multiple:&lt;/b&gt; " + multipleValues.join( ", " ) );
}

$( "select" ).change( displayVals );
displayVals();

  p {
    color: red;
    margin: 4px;
  }
  b {
    color: blue;
  }

&lt;p&gt;&lt;/p&gt;

&lt;select id="single"&gt;
  &lt;option&gt;Single&lt;/option&gt;
  &lt;option&gt;Single2&lt;/option&gt;
&lt;/select&gt;

&lt;select id="multiple" multiple="multiple"&gt;
  &lt;option selected="selected"&gt;Multiple&lt;/option&gt;
  &lt;option&gt;Multiple2&lt;/option&gt;
  &lt;option selected="selected"&gt;Multiple3&lt;/option&gt;
&lt;/select&gt;
Find the value of an input box.
$( "input" )
  .keyup(function() {
    var value = $( this ).val();
    $( "p" ).text( value );
  })
  .keyup();

  p {
    color: blue;
    margin: 8px;
  }

&lt;input type="text" value="some text"&gt;
&lt;p&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='val' scope='instance'>
        <description>Set the value of each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='value' usage='required' type=''>
            <description>A string of text or an array of strings corresponding to the value of each matched element to set as selected/checked.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Set the value of an input box.
$( "button" ).click(function() {
  var text = $( this ).text();
  $( "input" ).val( text );
});

  button {
    margin: 4px;
    cursor: pointer;
  }
  input {
    margin: 4px;
    color: blue;
  }

&lt;div&gt;
  &lt;button&gt;Feed&lt;/button&gt;
  &lt;button&gt;the&lt;/button&gt;
  &lt;button&gt;Input&lt;/button&gt;
&lt;/div&gt;
&lt;input type="text" value="click a button"&gt;
Use the function argument to modify the value of an input box.
$( "input" ).on( "blur", function() {
  $( this ).val(function( i, val ) {
    return val.toUpperCase();
  });
});

&lt;p&gt;Type something and then click or tab out of the input.&lt;/p&gt;
&lt;input type="text" value="type something"&gt;
Set a single select, a multiple select, checkboxes and a radio button .
$( "#single" ).val( "Single2" );
$( "#multiple" ).val([ "Multiple2", "Multiple3" ]);
$( "input").val([ "check1", "check2", "radio1" ]);

  body {
    color: blue;
  }

&lt;select id="single"&gt;
  &lt;option&gt;Single&lt;/option&gt;
  &lt;option&gt;Single2&lt;/option&gt;
&lt;/select&gt;

&lt;select id="multiple" multiple="multiple"&gt;
  &lt;option selected="selected"&gt;Multiple&lt;/option&gt;
  &lt;option&gt;Multiple2&lt;/option&gt;
  &lt;option selected="selected"&gt;Multiple3&lt;/option&gt;
&lt;/select&gt;

&lt;br&gt;
&lt;input type="checkbox" name="checkboxname" value="check1"&gt; check1
&lt;input type="checkbox" name="checkboxname" value="check2"&gt; check2
&lt;input type="radio" name="r" value="radio1"&gt; radio1
&lt;input type="radio" name="r" value="radio2"&gt; radio2
</example>
        </examples>
      </method>
      <method name='val' scope='instance'>
        <description>Set the value of each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index, value)' usage='required' type='Function'>
            <description>A function returning the value to set. this is the current element. Receives the index position of the element in the set and the old value as arguments.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Set the value of an input box.
$( "button" ).click(function() {
  var text = $( this ).text();
  $( "input" ).val( text );
});

  button {
    margin: 4px;
    cursor: pointer;
  }
  input {
    margin: 4px;
    color: blue;
  }

&lt;div&gt;
  &lt;button&gt;Feed&lt;/button&gt;
  &lt;button&gt;the&lt;/button&gt;
  &lt;button&gt;Input&lt;/button&gt;
&lt;/div&gt;
&lt;input type="text" value="click a button"&gt;
Use the function argument to modify the value of an input box.
$( "input" ).on( "blur", function() {
  $( this ).val(function( i, val ) {
    return val.toUpperCase();
  });
});

&lt;p&gt;Type something and then click or tab out of the input.&lt;/p&gt;
&lt;input type="text" value="type something"&gt;
Set a single select, a multiple select, checkboxes and a radio button .
$( "#single" ).val( "Single2" );
$( "#multiple" ).val([ "Multiple2", "Multiple3" ]);
$( "input").val([ "check1", "check2", "radio1" ]);

  body {
    color: blue;
  }

&lt;select id="single"&gt;
  &lt;option&gt;Single&lt;/option&gt;
  &lt;option&gt;Single2&lt;/option&gt;
&lt;/select&gt;

&lt;select id="multiple" multiple="multiple"&gt;
  &lt;option selected="selected"&gt;Multiple&lt;/option&gt;
  &lt;option&gt;Multiple2&lt;/option&gt;
  &lt;option selected="selected"&gt;Multiple3&lt;/option&gt;
&lt;/select&gt;

&lt;br&gt;
&lt;input type="checkbox" name="checkboxname" value="check1"&gt; check1
&lt;input type="checkbox" name="checkboxname" value="check2"&gt; check2
&lt;input type="radio" name="r" value="radio1"&gt; radio1
&lt;input type="radio" name="r" value="radio2"&gt; radio2
</example>
        </examples>
      </method>
      <method name='width' scope='instance'>
        <description>Get the current computed width for the first element in the set of matched elements.</description>
        <return-types>
          <return-type type='Number' />
        </return-types>
        <parameters />
        <examples>
          <example>Show various widths.  Note the values are from the iframe so might be smaller than you expected.  The yellow highlight shows the iframe body.
function showWidth( ele, w ) {
  $( "div" ).text( "The width for the " + ele + " is " + w + "px." );
}
$( "#getp" ).click(function() {
  showWidth( "paragraph", $( "p" ).width() );
});
$( "#getd" ).click(function() {
  showWidth( "document", $( document ).width() );
});
$("#getw").click(function() {
  showWidth( "window", $( window ).width() );
});

  body {
    background: yellow;
  }
  button {
    font-size: 12px;
    margin: 2px;
  }
  p {
    width: 150px;
    border: 1px red solid;
  }
  div {
    color: red;
    font-weight: bold;
  }

&lt;button id="getp"&gt;Get Paragraph Width&lt;/button&gt;
&lt;button id="getd"&gt;Get Document Width&lt;/button&gt;
&lt;button id="getw"&gt;Get Window Width&lt;/button&gt;
&lt;div&gt;&amp;nbsp;&lt;/div&gt;
&lt;p&gt;
  Sample paragraph to test width
&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='width' scope='instance'>
        <description>Set the CSS width of each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='value' usage='required' type=''>
            <description>An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the width of each div the first time it is clicked (and change its color).
var modWidth = 50;
$( "div" ).one( "click", function() {
  $( this ).width( modWidth ).addClass( "mod" );
  modWidth -= 8;
});

  div {
    width: 70px;
    height: 50px;
    float: left;
    margin: 5px;
    background: red;
    cursor: pointer;
  }
  .mod {
    background: blue;
    cursor: default;
  }

&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='width' scope='instance'>
        <description>Set the CSS width of each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index, width)' usage='required' type='Function'>
            <description>A function returning the width to set. Receives the index position of the element in the set and the old width as arguments. Within the function, this refers to the current element in the set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the width of each div the first time it is clicked (and change its color).
var modWidth = 50;
$( "div" ).one( "click", function() {
  $( this ).width( modWidth ).addClass( "mod" );
  modWidth -= 8;
});

  div {
    width: 70px;
    height: 50px;
    float: left;
    margin: 5px;
    background: red;
    cursor: pointer;
  }
  .mod {
    background: blue;
    cursor: default;
  }

&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
&lt;div&gt;d&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='wrap' scope='instance'>
        <description>Wrap an HTML structure around each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='wrappingElement' usage='required' type=''>
            <description>A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Wrap a new div around all of the paragraphs.
$( "p" ).wrap( "&lt;div&gt;&lt;/div&gt;" );

  div {
    border: 2px solid blue;
  }
  p {
    background: yellow;
    margin: 4px;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.&gt;
$( "span" ).wrap( "&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;" );

  div {
    border: 2px blue solid;
    margin: 2px;
    padding: 2px;
  }
  p {
    background: yellow;
    margin: 2px;
    padding: 2px;
  }
  strong {
    color: red;
  }

&lt;span&gt;Span Text&lt;/span&gt;
&lt;strong&gt;What about me?&lt;/strong&gt;
&lt;span&gt;Another One&lt;/span&gt;
Wrap a new div around all of the paragraphs.
$( "p" ).wrap( document.createElement( "div" ) );

  div {
    border: 2px solid blue;
  }
  p {
    background: yellow;
    margin: 4px;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn't move the object but just clones it to wrap around its target.
$( "p" ).wrap( $( ".doublediv" ) );

  div {
    border: 2px solid blue;
    margin: 2px;
    padding: 2px;
  }
  .doublediv {
    border-color: red;
  }
  p {
    background: yellow;
    margin: 4px;
    font-size: 14px;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
&lt;div class="doublediv"&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='wrap' scope='instance'>
        <description>Wrap an HTML structure around each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index)' usage='required' type='Function'>
            <description>A callback function returning the HTML content or jQuery object to wrap around the matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Wrap a new div around all of the paragraphs.
$( "p" ).wrap( "&lt;div&gt;&lt;/div&gt;" );

  div {
    border: 2px solid blue;
  }
  p {
    background: yellow;
    margin: 4px;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.&gt;
$( "span" ).wrap( "&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;" );

  div {
    border: 2px blue solid;
    margin: 2px;
    padding: 2px;
  }
  p {
    background: yellow;
    margin: 2px;
    padding: 2px;
  }
  strong {
    color: red;
  }

&lt;span&gt;Span Text&lt;/span&gt;
&lt;strong&gt;What about me?&lt;/strong&gt;
&lt;span&gt;Another One&lt;/span&gt;
Wrap a new div around all of the paragraphs.
$( "p" ).wrap( document.createElement( "div" ) );

  div {
    border: 2px solid blue;
  }
  p {
    background: yellow;
    margin: 4px;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn't move the object but just clones it to wrap around its target.
$( "p" ).wrap( $( ".doublediv" ) );

  div {
    border: 2px solid blue;
    margin: 2px;
    padding: 2px;
  }
  .doublediv {
    border-color: red;
  }
  p {
    background: yellow;
    margin: 4px;
    font-size: 14px;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
&lt;div class="doublediv"&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='wrapAll' scope='instance'>
        <description>Wrap an HTML structure around all elements in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='wrappingElement' usage='required' type=''>
            <description>A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Wrap a new div around all of the paragraphs.
$( "p" ).wrapAll( "&lt;div&gt;&lt;/div&gt;" );

  div {
    border: 2px solid blue;
  }
  p {
    background: yellow;
    margin: 4px;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
Wraps a newly created tree of objects around the spans.  Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example.  Even the white space between spans is left out.  Click View Source to see the original html.
$( "span").wrapAll( "&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;" );

  div {
    border: 2px blue solid;
    margin: 2px;
    padding: 2px;
  }
  p {
    background: yellow;
    margin: 2px;
    padding: 2px;
  }
  strong {
    color: red;
  }

&lt;span&gt;Span Text&lt;/span&gt;
&lt;strong&gt;What about me?&lt;/strong&gt;
&lt;span&gt;Another One&lt;/span&gt;
Wrap a new div around all of the paragraphs.
$( "p" ).wrapAll( document.createElement( "div" ) );

  div {
    border: 2px solid blue;
  }
  p {
    background: yellow;
    margin: 4px;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
Wrap a jQuery object double depth div around all of the paragraphs.  Notice it doesn't move the object but just clones it to wrap around its target.
$( "p" ).wrapAll( $( ".doublediv" ) );

  div {
    border: 2px solid blue;
    margin: 2px;
    padding: 2px;
  }
  .doublediv {
    border-color: red;
  }
  p {
    background: yellow;
    margin: 4px;
    font-size: 14px;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
&lt;div class="doublediv"&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='wrapInner' scope='instance'>
        <description>Wrap an HTML structure around the content of each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='wrappingElement' usage='required' type='String'>
            <description>An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Selects all paragraphs and wraps a bold tag around each of its contents.
$( "p" ).wrapInner( "&lt;b&gt;&lt;/b&gt;" );

  p {
    background: #bbf;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
Wraps a newly created tree of objects around the inside of the body.
$( "body" ).wrapInner( "&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;" );

  div {
    border: 2px green solid;
    margin: 2px;
    padding: 2px;
  }
  p {
    background: yellow;
    margin: 2px;
    padding: 2px;
  }

Plain old text, or is it?
Selects all paragraphs and wraps a bold tag around each of its contents.
$( "p" ).wrapInner( document.createElement( "b" ) );

  p {
    background: #9f9;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
Selects all paragraphs and wraps a jQuery object around each of its contents.
$( "p" ).wrapInner( $( "&lt;span class='red'&gt;&lt;/span&gt;" ) );

  p {
    background: #9f9;
  }
  .red {
    color: red;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='wrapInner' scope='instance'>
        <description>Wrap an HTML structure around the content of each element in the set of matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='function(index)' usage='required' type='Function'>
            <description>A callback function which generates a structure to wrap around the content of the matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Selects all paragraphs and wraps a bold tag around each of its contents.
$( "p" ).wrapInner( "&lt;b&gt;&lt;/b&gt;" );

  p {
    background: #bbf;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
Wraps a newly created tree of objects around the inside of the body.
$( "body" ).wrapInner( "&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;" );

  div {
    border: 2px green solid;
    margin: 2px;
    padding: 2px;
  }
  p {
    background: yellow;
    margin: 2px;
    padding: 2px;
  }

Plain old text, or is it?
Selects all paragraphs and wraps a bold tag around each of its contents.
$( "p" ).wrapInner( document.createElement( "b" ) );

  p {
    background: #9f9;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
Selects all paragraphs and wraps a jQuery object around each of its contents.
$( "p" ).wrapInner( $( "&lt;span class='red'&gt;&lt;/span&gt;" ) );

  p {
    background: #9f9;
  }
  .red {
    color: red;
  }

&lt;p&gt;Hello&lt;/p&gt;
&lt;p&gt;cruel&lt;/p&gt;
&lt;p&gt;World&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='addBack' scope='instance'>
        <description>Add the previous set of elements on the stack to the current set, optionally filtered by a selector.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='selector' usage='optional' type='Selector'>
            <description>A string containing a selector expression to match the current set of elements against.</description>
          </parameter>
        </parameters>
        <examples>
          <example>The .addBack() method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from .find("p"). In the second example, .addBack() adds the previous set of elements on the stack — in this case $("div.after-addback") — to the current set, selecting both the div and its enclosed paragraphs.
$( "div.left, div.right" ).find( "div, div &gt; p" ).addClass( "border" );

// First Example
$( "div.before-addback" ).find( "p" ).addClass( "background" );

// Second Example
$( "div.after-addback" ).find( "p" ).addBack().addClass( "background" );

  p, div {
    margin: 5px;
    padding: 5px;
  }
  .border {
    border: 2px solid red;
  }
  .background {
    background: yellow;
  }
  .left, .right {
    width: 45%;
    float: left;
  }
  .right {
    margin-left: 3%;
  }

&lt;div class="left"&gt;
  &lt;p&gt;&lt;strong&gt;Before &lt;code&gt;addBack()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;div class="before-addback"&gt;
    &lt;p&gt;First Paragraph&lt;/p&gt;
    &lt;p&gt;Second Paragraph&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class="right"&gt;
  &lt;p&gt;&lt;strong&gt;After &lt;code&gt;addBack()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;div class="after-addback"&gt;
    &lt;p&gt;First Paragraph&lt;/p&gt;
    &lt;p&gt;Second Paragraph&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='finish' scope='instance'>
        <description>Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='queue' usage='optional' type='String'>
            <description>The name of the queue in which to stop animations.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Click the Go button once to start the animation, and then click the other buttons to see how they affect the current and queued animations.
var horiz = $( "#path" ).width() - 20,
  vert = $( "#path" ).height() - 20;

var btns = {
  bstt: function() {
    $( "div.box" ).stop( true, true );
  },
  bs: function() {
    $( "div.box" ).stop();
  },
  bsft: function() {
    $( "div.box" ).stop( false, true );
  },
  bf: function() {
    $( "div.box" ).finish();
  },
  bcf: function() {
    $( "div.box" ).clearQueue().finish();
  },
  bsff: function() {
    $( "div.box" ).stop( false, false );
  },
  bstf: function() {
    $( "div.box" ).stop( true, false );
  },
  bcs: function() {
    $( "div.box" ).clearQueue().stop();
  }
};

$( "button.b" ).on( "click", function() {
  btns[ this.id ]();
});

$( "#go" ).on( "click", function() {
  $( ".box" )
    .clearQueue()
    .stop()
    .css({
      left: 10,
      top: 10
    })
    .animate({
      top: vert
    }, 3000 )
    .animate({
      left: horiz
    }, 3000 )
    .animate({
      top: 10
    }, 3000 );
});

&lt;div class="box"&gt;&lt;/div&gt;
&lt;div id="path"&gt;
  &lt;button id="go"&gt;Go&lt;/button&gt;
  &lt;br&gt;
  &lt;button id="bstt" class="b"&gt;.stop( true,true )&lt;/button&gt;
  &lt;button id="bcf" class="b"&gt;.clearQueue().finish()&lt;/button&gt;
  &lt;br&gt;
  &lt;button id="bstf" class="b"&gt;.stop( true, false )&lt;/button&gt;
  &lt;button id="bcs" class="b"&gt;.clearQueue().stop()&lt;/button&gt;
  &lt;br&gt;
  &lt;button id="bsff" class="b"&gt;.stop( false, false )&lt;/button&gt;
  &lt;button id="bs" class="b"&gt;.stop()&lt;/button&gt;
  &lt;br&gt;
  &lt;button id="bsft" class="b"&gt;.stop( false, true )&lt;/button&gt;
  &lt;br&gt;
  &lt;button id="bf" class="b"&gt;.finish()&lt;/button&gt;
&lt;/div&gt;

  .box {
    position: absolute;
    top: 10px;
    left: 10px;
    width: 15px;
    height: 15px;
    background: black;
  }
  #path {
    height: 244px;
    font-size: 70%;
    border-left: 2px dashed red;
    border-bottom: 2px dashed green;
    border-right: 2px dashed blue;
  }
  button {
    width: 12em;
    display: block;
    text-align: left;
    margin: 0 auto;
  }
</example>
        </examples>
      </method>
      <method name='Callbacks' scope='instance'>
        <description>A multi-purpose callbacks list object that provides a powerful way to manage callback lists.</description>
        <return-types>
          <return-type type='Callbacks' />
        </return-types>
        <parameters>
          <parameter name='flags' usage='required' type='String'>
            <description>An optional list of space-separated flags that change how the callback list behaves.</description>
          </parameter>
        </parameters>
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='ajax' scope='instance'>
        <description>Perform an asynchronous HTTP (Ajax) request.</description>
        <return-types>
          <return-type type='jqXHR' />
        </return-types>
        <parameters>
          <parameter name='url' usage='required' type='String'>
            <description>A string containing the URL to which the request is sent.</description>
          </parameter>
          <parameter name='settings' usage='optional' type='PlainObject'>
            <description>A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings ) below for a complete list of all settings. </description>
          </parameter>
        </parameters>
        <examples>
          <example>Save some data to the server and notify the user once it's complete.
$.ajax({
  type: "POST",
  url: "some.php",
  data: { name: "John", location: "Boston" }
})
  .done(function( msg ) {
    alert( "Data Saved: " + msg );
  });
Retrieve the latest version of an HTML page.
$.ajax({
  url: "test.html",
  cache: false
})
  .done(function( html ) {
    $( "#results" ).append( html );
  });
Send an xml document as data to the server. By setting the processData
    option to false, the automatic conversion of data to strings is prevented.
var xmlDocument = [create xml document];
var xmlRequest = $.ajax({
  url: "page.php",
  processData: false,
  data: xmlDocument
});

xmlRequest.done( handleResponse );
Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user.
var menuId = $( "ul.nav" ).first().attr( "id" );
var request = $.ajax({
  url: "script.php",
  type: "POST",
  data: { id : menuId },
  dataType: "html"
});

request.done(function( msg ) {
  $( "#log" ).html( msg );
});

request.fail(function( jqXHR, textStatus ) {
  alert( "Request failed: " + textStatus );
});
Load and execute a JavaScript file.
$.ajax({
  type: "GET",
  url: "test.js",
  dataType: "script"
});
</example>
        </examples>
      </method>
      <method name='ajax' scope='instance'>
        <description>Perform an asynchronous HTTP (Ajax) request.</description>
        <return-types>
          <return-type type='jqXHR' />
        </return-types>
        <parameters>
          <parameter name='settings' usage='optional' type='PlainObject'>
            <description>A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup().</description>
          </parameter>
        </parameters>
        <examples>
          <example>Save some data to the server and notify the user once it's complete.
$.ajax({
  type: "POST",
  url: "some.php",
  data: { name: "John", location: "Boston" }
})
  .done(function( msg ) {
    alert( "Data Saved: " + msg );
  });
Retrieve the latest version of an HTML page.
$.ajax({
  url: "test.html",
  cache: false
})
  .done(function( html ) {
    $( "#results" ).append( html );
  });
Send an xml document as data to the server. By setting the processData
    option to false, the automatic conversion of data to strings is prevented.
var xmlDocument = [create xml document];
var xmlRequest = $.ajax({
  url: "page.php",
  processData: false,
  data: xmlDocument
});

xmlRequest.done( handleResponse );
Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user.
var menuId = $( "ul.nav" ).first().attr( "id" );
var request = $.ajax({
  url: "script.php",
  type: "POST",
  data: { id : menuId },
  dataType: "html"
});

request.done(function( msg ) {
  $( "#log" ).html( msg );
});

request.fail(function( jqXHR, textStatus ) {
  alert( "Request failed: " + textStatus );
});
Load and execute a JavaScript file.
$.ajax({
  type: "GET",
  url: "test.js",
  dataType: "script"
});
</example>
        </examples>
      </method>
      <method name='ajaxPrefilter' scope='instance'>
        <description>Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().</description>
        <return-types>
          <return-type type='undefined' />
        </return-types>
        <parameters>
          <parameter name='dataTypes' usage='optional' type='String'>
            <description>An optional string containing one or more space-separated dataTypes</description>
          </parameter>
          <parameter name='handler(options, originalOptions, jqXHR)' usage='required' type='Function'>
            <description>A handler to set default values for future Ajax requests.</description>
          </parameter>
        </parameters>
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='ajaxSetup' scope='instance'>
        <description>Set default values for future Ajax requests. Its use is not recommended.</description>
        <return-types>
          <return-type type='' />
        </return-types>
        <parameters>
          <parameter name='options' usage='required' type='PlainObject'>
            <description>A set of key/value pairs that configure the default Ajax request. All options are optional. </description>
          </parameter>
        </parameters>
        <examples>
          <example>Sets the defaults for Ajax requests to the url "/xmlhttp/", disables global handlers and uses POST instead of GET. The following Ajax requests then sends some data without having to set anything else.
$.ajaxSetup({
  url: "/xmlhttp/",
  global: false,
  type: "POST"
});
$.ajax({ data: myData });
</example>
        </examples>
      </method>
      <method name='ajaxTransport' scope='instance'>
        <description>Creates an object that handles the actual transmission of Ajax data.</description>
        <return-types>
          <return-type type='undefined' />
        </return-types>
        <parameters>
          <parameter name='dataType' usage='required' type='String'>
            <description>A string identifying the data type to use</description>
          </parameter>
          <parameter name='handler(options, originalOptions, jqXHR)' usage='required' type='Function'>
            <description>A handler to return the new transport object to use with the data type provided in the first argument.</description>
          </parameter>
        </parameters>
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='contains' scope='instance'>
        <description>Check to see if a DOM element is a descendant of another DOM element.</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters>
          <parameter name='container' usage='required' type='Element'>
            <description>The DOM element that may contain the other element.</description>
          </parameter>
          <parameter name='contained' usage='required' type='Element'>
            <description>The DOM element that may be contained by (a descendant of) the other element.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Check if an element is a descendant of another.
$.contains( document.documentElement, document.body ); // true
$.contains( document.body, document.documentElement ); // false
</example>
        </examples>
      </method>
      <method name='data' scope='instance'>
        <description>Store arbitrary data associated with the specified element. Returns the value that was set.</description>
        <return-types>
          <return-type type='Object' />
        </return-types>
        <parameters>
          <parameter name='element' usage='required' type='Element'>
            <description>The DOM element to associate with the data.</description>
          </parameter>
          <parameter name='key' usage='required' type='String'>
            <description>A string naming the piece of data to set.</description>
          </parameter>
          <parameter name='value' usage='required' type='Object'>
            <description>The new data value.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Store then retrieve a value from the div element.
var div = $( "div" )[ 0 ];
jQuery.data( div, "test", {
  first: 16,
  last: "pizza!"
});
$( "span:first" ).text( jQuery.data( div, "test" ).first );
$( "span:last" ).text( jQuery.data( div, "test" ).last );

  div {
    color: blue;
  }
  span {
    color: red;
  }

&lt;div&gt;
  The values stored were
  &lt;span&gt;&lt;/span&gt;
  and
  &lt;span&gt;&lt;/span&gt;
&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='data' scope='instance'>
        <description>Returns value at named data store for the element, as set by jQuery.data(element, name, value), or the full data store for the element.</description>
        <return-types>
          <return-type type='Object' />
        </return-types>
        <parameters>
          <parameter name='element' usage='required' type='Element'>
            <description>The DOM element to query for the data.</description>
          </parameter>
          <parameter name='key' usage='required' type='String'>
            <description>Name of the data stored.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Get the data named "blah" stored at for an element.
$( "button" ).click( function() {
  var value,
    div = $( "div" )[ 0 ];
  switch ( $( "button" ).index( this ) ) {
  case 0 :
    value = jQuery.data( div, "blah" );
    break;
  case 1 :
    jQuery.data( div, "blah", "hello" );
    value = "Stored!";
    break;
  case 2 :
    jQuery.data( div, "blah", 86 );
    value = "Stored!";
    break;
  case 3 :
    jQuery.removeData( div, "blah" );
    value = "Removed!";
    break;
  }
  $( "span" ).text( "" + value );
});

  div {
    margin: 5px;
    background: yellow;
  }
  button {
    margin: 5px;
    font-size: 14px;
  }
  p {
    margin: 5px;
    color: blue;
  }
  span {
    color: red;
  }

&lt;div&gt;A div&lt;/div&gt;
&lt;button&gt;Get "blah" from the div&lt;/button&gt;
&lt;button&gt;Set "blah" to "hello"&lt;/button&gt;
&lt;button&gt;Set "blah" to 86&lt;/button&gt;
&lt;button&gt;Remove "blah" from the div&lt;/button&gt;
&lt;p&gt;The "blah" value of this div is &lt;span&gt;?&lt;/span&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='data' scope='instance'>
        <description>Returns value at named data store for the element, as set by jQuery.data(element, name, value), or the full data store for the element.</description>
        <return-types>
          <return-type type='Object' />
        </return-types>
        <parameters>
          <parameter name='element' usage='required' type='Element'>
            <description>The DOM element to query for the data.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Get the data named "blah" stored at for an element.
$( "button" ).click( function() {
  var value,
    div = $( "div" )[ 0 ];
  switch ( $( "button" ).index( this ) ) {
  case 0 :
    value = jQuery.data( div, "blah" );
    break;
  case 1 :
    jQuery.data( div, "blah", "hello" );
    value = "Stored!";
    break;
  case 2 :
    jQuery.data( div, "blah", 86 );
    value = "Stored!";
    break;
  case 3 :
    jQuery.removeData( div, "blah" );
    value = "Removed!";
    break;
  }
  $( "span" ).text( "" + value );
});

  div {
    margin: 5px;
    background: yellow;
  }
  button {
    margin: 5px;
    font-size: 14px;
  }
  p {
    margin: 5px;
    color: blue;
  }
  span {
    color: red;
  }

&lt;div&gt;A div&lt;/div&gt;
&lt;button&gt;Get "blah" from the div&lt;/button&gt;
&lt;button&gt;Set "blah" to "hello"&lt;/button&gt;
&lt;button&gt;Set "blah" to 86&lt;/button&gt;
&lt;button&gt;Remove "blah" from the div&lt;/button&gt;
&lt;p&gt;The "blah" value of this div is &lt;span&gt;?&lt;/span&gt;&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='dequeue' scope='instance'>
        <description>Execute the next function on the queue for the matched element.</description>
        <return-types>
          <return-type type='undefined' />
        </return-types>
        <parameters>
          <parameter name='element' usage='required' type='Element'>
            <description>A DOM element from which to remove and execute a queued function.</description>
          </parameter>
          <parameter name='queueName' usage='optional' type='String'>
            <description>A string containing the name of the queue. Defaults to fx, the standard effects queue.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Use jQuery.dequeue() to end a custom queue function which allows the queue to keep going.
$( "button" ).click(function() {
  $( "div" )
    .animate({ left: '+=200px' }, 2000 )
    .animate({ top: '0px' }, 600 )
    .queue(function() {
      $( this ).toggleClass( "red" );
      $.dequeue( this );
    })
    .animate({ left:'10px', top:'30px' }, 700 );
});

  div {
    margin: 3px;
    width: 50px;
    position: absolute;
    height: 50px;
    left: 10px;
    top: 30px;
    background-color: yellow;
  }
  div.red {
    background-color: red;
  }

&lt;button&gt;Start&lt;/button&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='each' scope='instance'>
        <description>A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.</description>
        <return-types>
          <return-type type='Object' />
        </return-types>
        <parameters>
          <parameter name='collection' usage='required' type='Object'>
            <description>The object or array to iterate over.</description>
          </parameter>
          <parameter name='callback(indexInArray, valueOfElement)' usage='required' type='Function'>
            <description>The function that will be executed on every object.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Iterates through the array displaying each number as both a word and numeral
var arr = [ "one", "two", "three", "four", "five" ];
var obj = { one: 1, two: 2, three: 3, four: 4, five: 5 };

jQuery.each( arr, function( i, val ) {
  $( "#" + val ).text( "Mine is " + val + "." );

  // Will stop running after "three"
  return ( val !== "three" );
});

jQuery.each( obj, function( i, val ) {
  $( "#" + i ).append( document.createTextNode( " - " + val ) );
});

  div {
    color: blue;
  }
  div#five {
    color: red;
  }

&lt;div id="one"&gt;&lt;/div&gt;
&lt;div id="two"&gt;&lt;/div&gt;
&lt;div id="three"&gt;&lt;/div&gt;
&lt;div id="four"&gt;&lt;/div&gt;
&lt;div id="five"&gt;&lt;/div&gt;
Iterates over items in an array, accessing both the current item and its index.
$.each( [ "a", "b", "c" ], function( i, l ){
  alert( "Index #" + i + ": " + l );
});
Iterates over the properties in an object, accessing both the current item and its key.
$.each({ name: "John", lang: "JS" }, function( k, v ) {
  alert( "Key: " + k + ", Value: " + v );
});
</example>
        </examples>
      </method>
      <method name='error' scope='instance'>
        <description>Takes a string and throws an exception containing it.</description>
        <return-types>
          <return-type type='' />
        </return-types>
        <parameters>
          <parameter name='message' usage='required' type='String'>
            <description>The message to send out.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Override jQuery.error for display in Firebug.
jQuery.error = console.error;
</example>
        </examples>
      </method>
      <method name='extend' scope='instance'>
        <description>Merge the contents of two or more objects together into the first object.</description>
        <return-types>
          <return-type type='Object' />
        </return-types>
        <parameters>
          <parameter name='target' usage='required' type='Object'>
            <description> An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.</description>
          </parameter>
          <parameter name='object1' usage='optional' type='Object'>
            <description>An object containing additional properties to merge in.</description>
          </parameter>
          <parameter name='objectN' usage='optional' type='Object'>
            <description>Additional objects containing properties to merge in.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Merge two objects, modifying the first.
var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  banana: { price: 200 },
  durian: 100
};

// Merge object2 into object1
$.extend( object1, object2 );

var printObj = typeof JSON !== "undefined" ? JSON.stringify : function( obj ) {
  var arr = [];
  $.each( obj, function( key, val ) {
    var next = key + ": ";
    next += $.isPlainObject( val ) ? printObj( val ) : val;
    arr.push( next );
  });
  return "{ " +  arr.join( ", " ) + " }";
};

$( "#log" ).append( printObj( object1 ) );

&lt;div id="log"&gt;&lt;/div&gt;
Merge two objects recursively, modifying the first.
var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  banana: { price: 200 },
  durian: 100
};

// Merge object2 into object1, recursively
$.extend( true, object1, object2 );

var printObj = typeof JSON !== "undefined" ? JSON.stringify : function( obj ) {
  var arr = [];
  $.each( obj, function( key, val ) {
    var next = key + ": ";
    next += $.isPlainObject( val ) ? printObj( val ) : val;
    arr.push( next );
  });
  return "{ " +  arr.join( ", " ) + " }";
};

$( "#log" ).append( printObj( object1 ) );

&lt;div id="log"&gt;&lt;/div&gt;
Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.
var defaults = { validate: false, limit: 5, name: "foo" };
var options = { validate: true, name: "bar" };

// Merge defaults and options, without modifying defaults
var settings = $.extend( {}, defaults, options );

var printObj = typeof JSON !== "undefined" ? JSON.stringify : function( obj ) {
  var arr = [];
  $.each( obj, function( key, val ) {
    var next = key + ": ";
    next += $.isPlainObject( val ) ? printObj( val ) : val;
    arr.push( next );
  });
  return "{ " +  arr.join( ", " ) + " }";
};

$( "#log" ).append( "&lt;div&gt;&lt;b&gt;defaults -- &lt;/b&gt;" + printObj( defaults ) + "&lt;/div&gt;" );
$( "#log" ).append( "&lt;div&gt;&lt;b&gt;options -- &lt;/b&gt;" + printObj( options ) + "&lt;/div&gt;" );
$( "#log" ).append( "&lt;div&gt;&lt;b&gt;settings -- &lt;/b&gt;" + printObj( settings ) + "&lt;/div&gt;" );

&lt;div id="log"&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='extend' scope='instance'>
        <description>Merge the contents of two or more objects together into the first object.</description>
        <return-types>
          <return-type type='Object' />
        </return-types>
        <parameters>
          <parameter name='deep' usage='optional' type='Boolean'>
            <description>If true, the merge becomes recursive (aka. deep copy).</description>
          </parameter>
          <parameter name='target' usage='required' type='Object'>
            <description>The object to extend. It will receive the new properties.</description>
          </parameter>
          <parameter name='object1' usage='required' type='Object'>
            <description>An object containing additional properties to merge in.</description>
          </parameter>
          <parameter name='objectN' usage='optional' type='Object'>
            <description>Additional objects containing properties to merge in.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Merge two objects, modifying the first.
var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  banana: { price: 200 },
  durian: 100
};

// Merge object2 into object1
$.extend( object1, object2 );

var printObj = typeof JSON !== "undefined" ? JSON.stringify : function( obj ) {
  var arr = [];
  $.each( obj, function( key, val ) {
    var next = key + ": ";
    next += $.isPlainObject( val ) ? printObj( val ) : val;
    arr.push( next );
  });
  return "{ " +  arr.join( ", " ) + " }";
};

$( "#log" ).append( printObj( object1 ) );

&lt;div id="log"&gt;&lt;/div&gt;
Merge two objects recursively, modifying the first.
var object1 = {
  apple: 0,
  banana: { weight: 52, price: 100 },
  cherry: 97
};
var object2 = {
  banana: { price: 200 },
  durian: 100
};

// Merge object2 into object1, recursively
$.extend( true, object1, object2 );

var printObj = typeof JSON !== "undefined" ? JSON.stringify : function( obj ) {
  var arr = [];
  $.each( obj, function( key, val ) {
    var next = key + ": ";
    next += $.isPlainObject( val ) ? printObj( val ) : val;
    arr.push( next );
  });
  return "{ " +  arr.join( ", " ) + " }";
};

$( "#log" ).append( printObj( object1 ) );

&lt;div id="log"&gt;&lt;/div&gt;
Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.
var defaults = { validate: false, limit: 5, name: "foo" };
var options = { validate: true, name: "bar" };

// Merge defaults and options, without modifying defaults
var settings = $.extend( {}, defaults, options );

var printObj = typeof JSON !== "undefined" ? JSON.stringify : function( obj ) {
  var arr = [];
  $.each( obj, function( key, val ) {
    var next = key + ": ";
    next += $.isPlainObject( val ) ? printObj( val ) : val;
    arr.push( next );
  });
  return "{ " +  arr.join( ", " ) + " }";
};

$( "#log" ).append( "&lt;div&gt;&lt;b&gt;defaults -- &lt;/b&gt;" + printObj( defaults ) + "&lt;/div&gt;" );
$( "#log" ).append( "&lt;div&gt;&lt;b&gt;options -- &lt;/b&gt;" + printObj( options ) + "&lt;/div&gt;" );
$( "#log" ).append( "&lt;div&gt;&lt;b&gt;settings -- &lt;/b&gt;" + printObj( settings ) + "&lt;/div&gt;" );

&lt;div id="log"&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='get' scope='instance'>
        <description>Load data from the server using a HTTP GET request.</description>
        <return-types>
          <return-type type='jqXHR' />
        </return-types>
        <parameters>
          <parameter name='url' usage='required' type='String'>
            <description>A string containing the URL to which the request is sent.</description>
          </parameter>
          <parameter name='data' usage='optional' type=''>
            <description>A plain object or string that is sent to the server with the request.</description>
          </parameter>
          <parameter name='success(data, textStatus, jqXHR)' usage='optional' type='Function'>
            <description>A callback function that is executed if the request succeeds.</description>
          </parameter>
          <parameter name='dataType' usage='optional' type='String'>
            <description>The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).</description>
          </parameter>
        </parameters>
        <examples>
          <example>Request the test.php page, but ignore the return results.
$.get( "test.php" );
Request the test.php page and send some additional data along (while still ignoring the return results).
$.get( "test.php", { name: "John", time: "2pm" } );
Pass arrays of data to the server (while still ignoring the return results).
$.get( "test.php", { "choices[]": ["Jon", "Susan"] } );
Alert the results from requesting test.php (HTML or XML, depending on what was returned).
$.get( "test.php", function( data ) {
  alert( "Data Loaded: " + data );
});
Alert the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).
$.get( "test.cgi", { name: "John", time: "2pm" } )
  .done(function( data ) {
    alert( "Data Loaded: " + data );
  });
 Get the test.php page contents, which has been returned in json format (&lt;?php echo json_encode( array( "name"=&gt;"John","time"=&gt;"2pm" ) ); ?&gt;), and add it to the page.
$.get( "test.php", function( data ) {
  $( "body" )
    .append( "Name: " + data.name ) // John
    .append( "Time: " + data.time ); //  2pm
}, "json" );
</example>
        </examples>
      </method>
      <method name='getJSON' scope='instance'>
        <description>Load JSON-encoded data from the server using a GET HTTP request.</description>
        <return-types>
          <return-type type='jqXHR' />
        </return-types>
        <parameters>
          <parameter name='url' usage='required' type='String'>
            <description>A string containing the URL to which the request is sent.</description>
          </parameter>
          <parameter name='data' usage='optional' type='PlainObject'>
            <description>A plain object or string that is sent to the server with the request.</description>
          </parameter>
          <parameter name='success( data, textStatus, jqXHR )' usage='optional' type='Function'>
            <description>A callback function that is executed if the request succeeds.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API.
(function() {
  var flickerAPI = "http://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?";
  $.getJSON( flickerAPI, {
    tags: "mount rainier",
    tagmode: "any",
    format: "json"
  })
    .done(function( data ) {
      $.each( data.items, function( i, item ) {
        $( "&lt;img&gt;" ).attr( "src", item.media.m ).appendTo( "#images" );
        if ( i === 3 ) {
          return false;
        }
      });
    });
})();

&lt;div id="images"&gt;&lt;/div&gt;

  img {
    height: 100px;
    float: left;
  }
Load the JSON data from test.js and access a name from the returned JSON data.
$.getJSON( "test.js", function( json ) {
  console.log( "JSON Data: " + json.users[ 3 ].name );
 });
 Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data.
      If an error occurs, log an error message instead.
$.getJSON( "test.js", { name: "John", time: "2pm" } )
  .done(function( json ) {
    console.log( "JSON Data: " + json.users[ 3 ].name );
  })
  .fail(function( jqxhr, textStatus, error ) {
    var err = textStatus + ", " + error;
    console.log( "Request Failed: " + err );
});
</example>
        </examples>
      </method>
      <method name='getScript' scope='instance'>
        <description>Load a JavaScript file from the server using a GET HTTP request, then execute it.</description>
        <return-types>
          <return-type type='jqXHR' />
        </return-types>
        <parameters>
          <parameter name='url' usage='required' type='String'>
            <description>A string containing the URL to which the request is sent.</description>
          </parameter>
          <parameter name='success(script, textStatus, jqXHR)' usage='optional' type='Function'>
            <description>A callback function that is executed if the request succeeds.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Define a $.cachedScript() method that allows fetching a cached script:
jQuery.cachedScript = function( url, options ) {

  // Allow user to set any option except for dataType, cache, and url
  options = $.extend( options || {}, {
    dataType: "script",
    cache: true,
    url: url
  });

  // Use $.ajax() since it is more flexible than $.getScript
  // Return the jqXHR object so we can chain callbacks
  return jQuery.ajax( options );
};

// Usage
$.cachedScript( "ajax/test.js" ).done(function( script, textStatus ) {
  console.log( textStatus );
});
Load the official jQuery Color Animation plugin dynamically and bind some color animations to occur once the new functionality is loaded.
var url = "https://raw.githubusercontent.com/jquery/jquery-color/master/jquery.color.js";
$.getScript( url, function() {
  $( "#go" ).click(function() {
    $( ".block" )
      .animate({
        backgroundColor: "rgb(255, 180, 180)"
      }, 1000 )
      .delay( 500 )
      .animate({
        backgroundColor: "olive"
      }, 1000 )
      .delay( 500 )
      .animate({
        backgroundColor: "#00f"
      }, 1000 );
  });
});

&lt;button id="go"&gt;&amp;raquo; Run&lt;/button&gt;
&lt;div class="block"&gt;&lt;/div&gt;

  .block {
     background-color: blue;
     width: 150px;
     height: 70px;
     margin: 10px;
  }
</example>
        </examples>
      </method>
      <method name='globalEval' scope='instance'>
        <description>Execute some JavaScript code globally.</description>
        <return-types>
          <return-type type='' />
        </return-types>
        <parameters>
          <parameter name='code' usage='required' type='String'>
            <description>The JavaScript code to execute.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Execute a script in the global context.
function test() {
  jQuery.globalEval( "var newVar = true;" )
}
test();
// newVar === true
</example>
        </examples>
      </method>
      <method name='grep' scope='instance'>
        <description>Finds the elements of an array which satisfy a filter function. The original array is not affected.</description>
        <return-types>
          <return-type type='Array' />
        </return-types>
        <parameters>
          <parameter name='array' usage='required' type='Array'>
            <description>The array to search through.</description>
          </parameter>
          <parameter name='function(elementOfArray, indexInArray)' usage='required' type='Function'>
            <description>The function to process each item against.  The first argument to the function is the item, and the second argument is the index.  The function should return a Boolean value.  this will be the global window object.</description>
          </parameter>
          <parameter name='invert' usage='optional' type='Boolean'>
            <description>If "invert" is false, or not provided, then the function returns an array consisting of all elements for which "callback" returns true.  If "invert" is true, then the function returns an array consisting of all elements for which "callback" returns false.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Filters the original array of numbers leaving that are not 5 and have an index greater than 4.  Then it removes all 9s.
var arr = [ 1, 9, 3, 8, 6, 1, 5, 9, 4, 7, 3, 8, 6, 9, 1 ];
$( "div" ).text( arr.join( ", " ) );

arr = jQuery.grep(arr, function( n, i ) {
  return ( n !== 5 &amp;&amp; i &gt; 4 );
});
$( "p" ).text( arr.join( ", " ) );

arr = jQuery.grep(arr, function( a ) {
  return a !== 9;
});

$( "span" ).text( arr.join( ", " ) );

  div {
    color: blue;
  }
  p {
    color: green;
    margin: 0;
  }
  span {
    color: red;
  }

&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;span&gt;&lt;/span&gt;
Filter an array of numbers to include only numbers bigger then zero.
$.grep( [ 0, 1, 2 ], function( n, i ) {
  return n &gt; 0;
});

[ 1, 2 ]
Filter an array of numbers to include numbers that are not bigger than zero.
$.grep( [ 0, 1, 2 ], function( n, i ) {
    return n &gt; 0;
}, true );

[ 0 ]
</example>
        </examples>
      </method>
      <method name='hasData' scope='instance'>
        <description>Determine whether an element has any jQuery data associated with it.</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters>
          <parameter name='element' usage='required' type='Element'>
            <description>A DOM element to be checked for data.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Set data on an element and see the results of hasData.
var $p = jQuery( "p" ), p = $p[ 0 ];
$p.append( jQuery.hasData( p ) + " " ); // false

$.data( p, "testing", 123 );
$p.append( jQuery.hasData( p ) + " " ); // true

$.removeData( p, "testing" );
$p.append( jQuery.hasData( p ) + " " ); // false

$p.on( "click", function() {} );
$p.append( jQuery.hasData( p ) + " " ); // true

$p.off( "click" );
$p.append( jQuery.hasData( p ) + " " ); // false

&lt;p&gt;Results: &lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='holdReady' scope='instance'>
        <description>Holds or releases the execution of jQuery's ready event.</description>
        <return-types>
          <return-type type='undefined' />
        </return-types>
        <parameters>
          <parameter name='hold' usage='required' type='Boolean'>
            <description>Indicates whether the ready hold is being requested or released</description>
          </parameter>
        </parameters>
        <examples>
          <example>Delay the ready event until a custom plugin has loaded.
$.holdReady( true );
$.getScript( "myplugin.js", function() {
  $.holdReady( false );
});
</example>
        </examples>
      </method>
      <method name='inArray' scope='instance'>
        <description>Search for a specified value within an array and return its index (or -1 if not found).</description>
        <return-types>
          <return-type type='Number' />
        </return-types>
        <parameters>
          <parameter name='value' usage='required' type='Anything'>
            <description>The value to search for.</description>
          </parameter>
          <parameter name='array' usage='required' type='Array'>
            <description>An array through which to search.</description>
          </parameter>
          <parameter name='fromIndex' usage='optional' type='Number'>
            <description>The index of the array at which to begin the search. The default is 0, which will search the whole array.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Report the index of some elements in the array.
var arr = [ 4, "Pete", 8, "John" ];
var $spans = $( "span" );
$spans.eq( 0 ).text( jQuery.inArray( "John", arr ) );
$spans.eq( 1 ).text( jQuery.inArray( 4, arr ) );
$spans.eq( 2 ).text( jQuery.inArray( "Karl", arr ) );
$spans.eq( 3 ).text( jQuery.inArray( "Pete", arr, 2 ) );

  div {
    color: blue;
  }
  span {
    color: red;
  }

&lt;div&gt;"John" found at &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;4 found at &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;"Karl" not found, so &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;"Pete" is in the array, but not at or after index 2, so &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='isArray' scope='instance'>
        <description>Determine whether the argument is an array.</description>
        <return-types>
          <return-type type='boolean' />
        </return-types>
        <parameters>
          <parameter name='obj' usage='required' type='Object'>
            <description>Object to test whether or not it is an array.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Finds out if the parameter is an array.
$( "b" ).append( "" + $.isArray([]) );

Is [] an Array? &lt;b&gt;&lt;/b&gt;
</example>
        </examples>
      </method>
      <method name='isEmptyObject' scope='instance'>
        <description>Check to see if an object is empty (contains no enumerable properties).</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters>
          <parameter name='object' usage='required' type='Object'>
            <description>The object that will be checked to see if it's empty.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Check an object to see if it's empty.
jQuery.isEmptyObject({}); // true
jQuery.isEmptyObject({ foo: "bar" }); // false
</example>
        </examples>
      </method>
      <method name='isFunction' scope='instance'>
        <description>Determine if the argument passed is a Javascript function object. </description>
        <return-types>
          <return-type type='boolean' />
        </return-types>
        <parameters>
          <parameter name='obj' usage='required' type='PlainObject'>
            <description>Object to test whether or not it is a function.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Test a few parameter examples.
function stub() {}
var objs = [
  function() {},
  { x:15, y:20 },
  null,
  stub,
  "function"
];

jQuery.each( objs, function( i ) {
  var isFunc = jQuery.isFunction( objs[ i ]);
  $( "span" ).eq( i ).text( isFunc );
});

  div {
    color: blue;
    margin: 2px;
    font-size: 14px;
  }
  span {
    color: red;
  }

&lt;div&gt;jQuery.isFunction( objs[ 0 ] ) = &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;jQuery.isFunction( objs[ 1 ] ) = &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;jQuery.isFunction( objs[ 2 ] ) = &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;jQuery.isFunction( objs[ 3 ] ) = &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;jQuery.isFunction( objs[ 4 ] ) = &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
Finds out if the parameter is a function.
$.isFunction(function() {});

true
</example>
        </examples>
      </method>
      <method name='isNumeric' scope='instance'>
        <description>Determines whether its argument is a number.</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters>
          <parameter name='value' usage='required' type='PlainObject'>
            <description>The value to be tested.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Sample return values of $.isNumeric with various inputs.
$.isNumeric( "-10" );     // true
$.isNumeric( 16 );        // true
$.isNumeric( 0xFF );      // true
$.isNumeric( "0xFF" );    // true
$.isNumeric( "8e5" );     // true (exponential notation string)
$.isNumeric( 3.1415 );    // true
$.isNumeric( +10 );       // true
$.isNumeric( 0144 );      // true (octal integer literal)
$.isNumeric( "" );        // false
$.isNumeric({});          // false (empty object)
$.isNumeric( NaN );       // false
$.isNumeric( null );      // false
$.isNumeric( true );      // false
$.isNumeric( Infinity );  // false
$.isNumeric( undefined ); // false
</example>
        </examples>
      </method>
      <method name='isPlainObject' scope='instance'>
        <description>Check to see if an object is a plain object (created using "{}" or "new Object").</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters>
          <parameter name='object' usage='required' type='PlainObject'>
            <description>The object that will be checked to see if it's a plain object.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Check an object to see if it's a plain object.
jQuery.isPlainObject({}) // true
jQuery.isPlainObject( "test" ) // false
</example>
        </examples>
      </method>
      <method name='isWindow' scope='instance'>
        <description>Determine whether the argument is a window.</description>
        <return-types>
          <return-type type='boolean' />
        </return-types>
        <parameters>
          <parameter name='obj' usage='required' type='PlainObject'>
            <description>Object to test whether or not it is a window.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Finds out if the parameter is a window.
$( "b" ).append( "" + $.isWindow( window ) );

Is 'window' a window? &lt;b&gt;&lt;/b&gt;
</example>
        </examples>
      </method>
      <method name='isXMLDoc' scope='instance'>
        <description>Check to see if a DOM node is within an XML document (or is an XML document).</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters>
          <parameter name='node' usage='required' type='Element'>
            <description>The DOM node that will be checked to see if it's in an XML document.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Check an object to see if it's in an XML document.
jQuery.isXMLDoc( document ) // false
jQuery.isXMLDoc( document.body ) // false
</example>
        </examples>
      </method>
      <method name='makeArray' scope='instance'>
        <description>Convert an array-like object into a true JavaScript array.</description>
        <return-types>
          <return-type type='Array' />
        </return-types>
        <parameters>
          <parameter name='obj' usage='required' type='PlainObject'>
            <description>Any object to turn into a native Array.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Turn a collection of HTMLElements into an Array of them.
// Returns a NodeList
var elems = document.getElementsByTagName( "div" );
// Convert the NodeList to an Array
var arr = jQuery.makeArray( elems );
// Use an Array method on list of dom elements
arr.reverse();
$( arr ).appendTo( document.body );

  div {
    color: red;
  }

&lt;div&gt;First&lt;/div&gt;
&lt;div&gt;Second&lt;/div&gt;
&lt;div&gt;Third&lt;/div&gt;
&lt;div&gt;Fourth&lt;/div&gt;
Turn a jQuery object into an array
var obj = $( "li" );
var arr = $.makeArray( obj );

( typeof obj === "object" &amp;&amp; obj.jquery ) === true;
jQuery.isArray( arr ) === true;
</example>
        </examples>
      </method>
      <method name='map' scope='instance'>
        <description>Translate all items in an array or object to new array of items.</description>
        <return-types>
          <return-type type='Array' />
        </return-types>
        <parameters>
          <parameter name='array' usage='required' type='Array'>
            <description>The Array to translate.</description>
          </parameter>
          <parameter name='callback( elementOfArray, indexInArray )' usage='required' type='Function'>
            <description>The function to process each item against.  The first argument to the function is the array item, the second argument is the index in array The function can return any value. Within the function, this refers to the global (window) object.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Use $.map() to change the values of an array.
var arr = [ "a", "b", "c", "d", "e" ];
$( "div" ).text( arr.join( ", " ) );

arr = jQuery.map( arr, function( n, i ) {
  return ( n.toUpperCase() + i );
});
$( "p" ).text( arr.join( ", " ) );

arr = jQuery.map( arr, function( a ) {
  return a + a;
});
$( "span" ).text( arr.join( ", " ) );

  div {
    color: blue;
  }
  p {
    color: green;
    margin: 0;
  }
  span {
    color: red;
  }

&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;span&gt;&lt;/span&gt;
Map the original array to a new one and add 4 to each value.
$.map( [ 0, 1, 2 ], function( n ) {
  return n + 4;
});

[4, 5, 6]
Map the original array to a new one, adding 1 to each value if it is bigger then zero and removing it if not.
$.map( [ 0, 1, 2 ], function( n ) {
  return n &gt; 0 ? n + 1 : null;
});

[ 2, 3 ]
Map the original array to a new one; each element is added with its original value and the value plus one.
$.map( [ 0, 1, 2 ], function( n ) {
    return [ n, n + 1 ];
});

[ 0, 1, 1, 2, 2, 3 ]
Map the original object to a new array and double each value.
var dimensions = { width: 10, height: 15, length: 20 };
dimensions = $.map( dimensions, function( value, index ) {
  return value * 2;
});

[ 20, 30, 40 ]
Map an object's keys to an array.
var dimensions = { width: 10, height: 15, length: 20 };
var keys = $.map( dimensions, function( value, key ) {
  return key;
});

[ "width", "height", "length" ]
Map the original array to a new one; each element is squared.
$.map( [ 0, 1, 2, 3 ], function( a ) {
  return a * a;
});

[ 0, 1, 4, 9 ]
Map the original array to a new one, removing numbers less than 50 by returning null and subtracting 45 from the rest.
$.map( [ 0, 1, 52, 97 ], function( a ) {
  return (a &gt; 50 ? a - 45 : null);
});

[ 7, 52 ]
Augment the resulting array by returning an array inside the function.
var array = [ 0, 1, 52, 97 ];
array = $.map( array, function( a, index ) {
  return [ a - 45, index ];
});

[ -45, 0, -44, 1, 7, 2, 52, 3]
</example>
        </examples>
      </method>
      <method name='map' scope='instance'>
        <description>Translate all items in an array or object to new array of items.</description>
        <return-types>
          <return-type type='Array' />
        </return-types>
        <parameters>
          <parameter name='arrayOrObject' usage='required' type=''>
            <description>The Array or Object to translate.</description>
          </parameter>
          <parameter name='callback( value, indexOrKey )' usage='required' type='Function'>
            <description>The function to process each item against.  The first argument to the function is the value; the second argument is the index or key of the array or object property. The function can return any value to add to the array. A returned array will be flattened into the resulting array. Within the function, this refers to the global (window) object. </description>
          </parameter>
        </parameters>
        <examples>
          <example>Use $.map() to change the values of an array.
var arr = [ "a", "b", "c", "d", "e" ];
$( "div" ).text( arr.join( ", " ) );

arr = jQuery.map( arr, function( n, i ) {
  return ( n.toUpperCase() + i );
});
$( "p" ).text( arr.join( ", " ) );

arr = jQuery.map( arr, function( a ) {
  return a + a;
});
$( "span" ).text( arr.join( ", " ) );

  div {
    color: blue;
  }
  p {
    color: green;
    margin: 0;
  }
  span {
    color: red;
  }

&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;span&gt;&lt;/span&gt;
Map the original array to a new one and add 4 to each value.
$.map( [ 0, 1, 2 ], function( n ) {
  return n + 4;
});

[4, 5, 6]
Map the original array to a new one, adding 1 to each value if it is bigger then zero and removing it if not.
$.map( [ 0, 1, 2 ], function( n ) {
  return n &gt; 0 ? n + 1 : null;
});

[ 2, 3 ]
Map the original array to a new one; each element is added with its original value and the value plus one.
$.map( [ 0, 1, 2 ], function( n ) {
    return [ n, n + 1 ];
});

[ 0, 1, 1, 2, 2, 3 ]
Map the original object to a new array and double each value.
var dimensions = { width: 10, height: 15, length: 20 };
dimensions = $.map( dimensions, function( value, index ) {
  return value * 2;
});

[ 20, 30, 40 ]
Map an object's keys to an array.
var dimensions = { width: 10, height: 15, length: 20 };
var keys = $.map( dimensions, function( value, key ) {
  return key;
});

[ "width", "height", "length" ]
Map the original array to a new one; each element is squared.
$.map( [ 0, 1, 2, 3 ], function( a ) {
  return a * a;
});

[ 0, 1, 4, 9 ]
Map the original array to a new one, removing numbers less than 50 by returning null and subtracting 45 from the rest.
$.map( [ 0, 1, 52, 97 ], function( a ) {
  return (a &gt; 50 ? a - 45 : null);
});

[ 7, 52 ]
Augment the resulting array by returning an array inside the function.
var array = [ 0, 1, 52, 97 ];
array = $.map( array, function( a, index ) {
  return [ a - 45, index ];
});

[ -45, 0, -44, 1, 7, 2, 52, 3]
</example>
        </examples>
      </method>
      <method name='merge' scope='instance'>
        <description>Merge the contents of two arrays together into the first array. </description>
        <return-types>
          <return-type type='Array' />
        </return-types>
        <parameters>
          <parameter name='first' usage='required' type='Array'>
            <description>The first array to merge, the elements of second added.</description>
          </parameter>
          <parameter name='second' usage='required' type='Array'>
            <description>The second array to merge into the first, unaltered.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Merges two arrays, altering the first argument.
$.merge( [ 0, 1, 2 ], [ 2, 3, 4 ] )

[ 0, 1, 2, 2, 3, 4 ]
Merges two arrays, altering the first argument.
$.merge( [ 3, 2, 1 ], [ 4, 3, 2 ] )

[ 3, 2, 1, 4, 3, 2 ]
Merges two arrays, but uses a copy, so the original isn't altered.
var first = [ "a", "b", "c" ];
var second = [ "d", "e", "f" ];
$.merge( $.merge( [], first ), second );

[ "a", "b", "c", "d", "e", "f" ]
</example>
        </examples>
      </method>
      <method name='noConflict' scope='instance'>
        <description>Relinquish jQuery's control of the $ variable.</description>
        <return-types>
          <return-type type='Object' />
        </return-types>
        <parameters>
          <parameter name='removeAll' usage='optional' type='Boolean'>
            <description>A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).</description>
          </parameter>
        </parameters>
        <examples>
          <example>Map the original object that was referenced by $ back to $.
jQuery.noConflict();
// Do something with jQuery
jQuery( "div p" ).hide();
// Do something with another library's $()
$( "content" ).style.display = "none";
Revert the $ alias and then create and execute a function to provide the $ as a jQuery alias inside the function's scope. Inside the function the original $ object is not available. This works well for most plugins that don't rely on any other library.
  
jQuery.noConflict();
(function( $ ) {
  $(function() {
    // More code using $ as alias to jQuery
  });
})(jQuery);

// Other code using $ as an alias to the other library
Create a different alias instead of jQuery to use in the rest of the script.
var j = jQuery.noConflict();

// Do something with jQuery
j( "div p" ).hide();

// Do something with another library's $()
$( "content" ).style.display = "none";
Completely move jQuery to a new namespace in another object.
var dom = {};
dom.query = jQuery.noConflict( true );

// Do something with the new jQuery
dom.query( "div p" ).hide();

// Do something with another library's $()
$( "content" ).style.display = "none";

// Do something with another version of jQuery
jQuery( "div &gt; p" ).hide();
Load two versions of jQuery (not recommended). Then, restore jQuery's globally scoped variables to the first loaded jQuery.
&lt;div id="log"&gt;
  &lt;h3&gt;Before $.noConflict(true)&lt;/h3&gt;
&lt;/div&gt;
&lt;script src="//code.jquery.com/jquery-1.6.2.js"&gt;&lt;/script&gt;

var $log = $( "#log" );

$log.append( "2nd loaded jQuery version ($): " + $.fn.jquery + "&lt;br&gt;" );

// Restore globally scoped jQuery variables to the first version loaded
// (the newer version)

jq162 = jQuery.noConflict( true );

$log.append( "&lt;h3&gt;After $.noConflict(true)&lt;/h3&gt;" );
$log.append( "1st loaded jQuery version ($): " + $.fn.jquery + "&lt;br&gt;" );
$log.append( "2nd loaded jQuery version (jq162): " + jq162.fn.jquery + "&lt;br&gt;" );
</example>
        </examples>
      </method>
      <method name='noop' scope='instance'>
        <description>An empty function.</description>
        <return-types>
          <return-type type='undefined' />
        </return-types>
        <parameters />
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='now' scope='instance'>
        <description>Return a number representing the current time.</description>
        <return-types>
          <return-type type='Number' />
        </return-types>
        <parameters />
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='param' scope='instance'>
        <description>Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request. </description>
        <return-types>
          <return-type type='String' />
        </return-types>
        <parameters>
          <parameter name='obj' usage='required' type=''>
            <description>An array or object to serialize.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Serialize a key/value object.
var params = { width:1680, height:1050 };
var str = jQuery.param( params );
$( "#results" ).text( str );

  div {
    color: red;
  }

&lt;div id="results"&gt;&lt;/div&gt;
Serialize a few complex objects
// &lt;=1.3.2:
$.param({ a: [ 2, 3, 4 ] }); // "a=2&amp;a=3&amp;a=4"
// &gt;=1.4:
$.param({ a: [ 2, 3, 4 ] }); // "a[]=2&amp;a[]=3&amp;a[]=4"

// &lt;=1.3.2:
$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });
// "a=[object+Object]&amp;d=3&amp;d=4&amp;d=[object+Object]"

// &gt;=1.4:
$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });
// "a[b]=1&amp;a[c]=2&amp;d[]=3&amp;d[]=4&amp;d[2][e]=5"

  div {
    color: red;
  }
</example>
        </examples>
      </method>
      <method name='param' scope='instance'>
        <description>Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request. </description>
        <return-types>
          <return-type type='String' />
        </return-types>
        <parameters>
          <parameter name='obj' usage='required' type=''>
            <description>An array or object to serialize.</description>
          </parameter>
          <parameter name='traditional' usage='required' type='Boolean'>
            <description>A Boolean indicating whether to perform a traditional "shallow" serialization.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Serialize a key/value object.
var params = { width:1680, height:1050 };
var str = jQuery.param( params );
$( "#results" ).text( str );

  div {
    color: red;
  }

&lt;div id="results"&gt;&lt;/div&gt;
Serialize a few complex objects
// &lt;=1.3.2:
$.param({ a: [ 2, 3, 4 ] }); // "a=2&amp;a=3&amp;a=4"
// &gt;=1.4:
$.param({ a: [ 2, 3, 4 ] }); // "a[]=2&amp;a[]=3&amp;a[]=4"

// &lt;=1.3.2:
$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });
// "a=[object+Object]&amp;d=3&amp;d=4&amp;d=[object+Object]"

// &gt;=1.4:
$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });
// "a[b]=1&amp;a[c]=2&amp;d[]=3&amp;d[]=4&amp;d[2][e]=5"

  div {
    color: red;
  }
</example>
        </examples>
      </method>
      <method name='parseJSON' scope='instance'>
        <description>Takes a well-formed JSON string and returns the resulting JavaScript object.</description>
        <return-types>
          <return-type type='Object' />
        </return-types>
        <parameters>
          <parameter name='json' usage='required' type='String'>
            <description>The JSON string to parse.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Parse a JSON string.
var obj = jQuery.parseJSON( '{ "name": "John" }' );
alert( obj.name === "John" );
</example>
        </examples>
      </method>
      <method name='parseXML' scope='instance'>
        <description>Parses a string into an XML document.</description>
        <return-types>
          <return-type type='XMLDocument' />
        </return-types>
        <parameters>
          <parameter name='data' usage='required' type='String'>
            <description>a well-formed XML string to be parsed</description>
          </parameter>
        </parameters>
        <examples>
          <example>Create a jQuery object using an XML string and obtain the value of the title node.
&lt;p id="someElement"&gt;&lt;/p&gt;
&lt;p id="anotherElement"&gt;&lt;/p&gt;

var xml = "&lt;rss version='2.0'&gt;&lt;channel&gt;&lt;title&gt;RSS Title&lt;/title&gt;&lt;/channel&gt;&lt;/rss&gt;",
  xmlDoc = $.parseXML( xml ),
  $xml = $( xmlDoc ),
  $title = $xml.find( "title" );

// Append "RSS Title" to #someElement
$( "#someElement" ).append( $title.text() );

// Change the title to "XML Title"
$title.text( "XML Title" );

// Append "XML Title" to #anotherElement
$( "#anotherElement" ).append( $title.text() );
</example>
        </examples>
      </method>
      <method name='post' scope='instance'>
        <description>Load data from the server using a HTTP POST request.</description>
        <return-types>
          <return-type type='jqXHR' />
        </return-types>
        <parameters>
          <parameter name='url' usage='required' type='String'>
            <description>A string containing the URL to which the request is sent.</description>
          </parameter>
          <parameter name='data' usage='optional' type=''>
            <description>A plain object or string that is sent to the server with the request.</description>
          </parameter>
          <parameter name='success(data, textStatus, jqXHR)' usage='optional' type='Function'>
            <description>A callback function that is executed if the request succeeds. Required if dataType is provided, but can be null in that case.</description>
          </parameter>
          <parameter name='dataType' usage='optional' type='String'>
            <description>The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).</description>
          </parameter>
        </parameters>
        <examples>
          <example>Request the test.php page, but ignore the return results.
$.post( "test.php" );
Request the test.php page and send some additional data along (while still ignoring the return results).
$.post( "test.php", { name: "John", time: "2pm" } );
Pass arrays of data to the server (while still ignoring the return results).
$.post( "test.php", { 'choices[]': [ "Jon", "Susan" ] } );
Send form data using ajax requests
$.post( "test.php", $( "#testform" ).serialize() );
Alert the results from requesting test.php (HTML or XML, depending on what was returned).
$.post( "test.php", function( data ) {
  alert( "Data Loaded: " + data );
});
Alert the results from requesting test.php with an additional payload of data (HTML or XML, depending on what was returned).
$.post( "test.php", { name: "John", time: "2pm" })
  .done(function( data ) {
    alert( "Data Loaded: " + data );
  });
Post to the test.php page and get content which has been returned in json format (&lt;?php echo json_encode(array("name"=&gt;"John","time"=&gt;"2pm")); ?&gt;).
$.post( "test.php", { func: "getNameAndTime" }, function( data ) {
  console.log( data.name ); // John
  console.log( data.time ); // 2pm
}, "json");
Post a form using ajax and put results in a div
// Attach a submit handler to the form
$( "#searchForm" ).submit(function( event ) {

  // Stop form from submitting normally
  event.preventDefault();

  // Get some values from elements on the page:
  var $form = $( this ),
    term = $form.find( "input[name='s']" ).val(),
    url = $form.attr( "action" );

  // Send the data using post
  var posting = $.post( url, { s: term } );

  // Put the results in a div
  posting.done(function( data ) {
    var content = $( data ).find( "#content" );
    $( "#result" ).empty().append( content );
  });
});

&lt;form action="/" id="searchForm"&gt;
  &lt;input type="text" name="s" placeholder="Search..."&gt;
  &lt;input type="submit" value="Search"&gt;
&lt;/form&gt;
&lt;!-- the result of the search will be rendered inside this div --&gt;
&lt;div id="result"&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='proxy' scope='instance'>
        <description>Takes a function and returns a new one that will always have a particular context.</description>
        <return-types>
          <return-type type='Function' />
        </return-types>
        <parameters>
          <parameter name='function' usage='required' type='Function'>
            <description>The function whose context will be changed.</description>
          </parameter>
          <parameter name='context' usage='required' type='PlainObject'>
            <description>The object to which the context (this) of the function should be set.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the context of functions bound to a click handler using the "function, context" signature. Unbind the first handler after first click.
&lt;p&gt;&lt;button type="button" id="test"&gt;Test&lt;/button&gt;&lt;/p&gt;
&lt;div id="log"&gt;&lt;/div&gt;

var me = {
  type: "zombie",
  test: function( event ) {
    // Without proxy, `this` would refer to the event target
    // use event.target to reference that element.
    var element = event.target;
    $( element ).css( "background-color", "red" );

    // With proxy, `this` refers to the me object encapsulating
    // this function.
    $( "#log" ).append( "Hello " + this.type + "&lt;br&gt;" );
    $( "#test" ).off( "click", this.test );
  }
};

var you = {
  type: "person",
  test: function( event ) {
    $( "#log" ).append( this.type + " " );
  }
};

// Execute you.test() in the context of the `you` object
// no matter where it is called
// i.e. the `this` keyword will refer to `you`
var youClick = $.proxy( you.test, you );

// attach click handlers to #test
$( "#test" )
  // this === "zombie"; handler unbound after first click
  .on( "click", $.proxy( me.test, me ) )

  // this === "person"
  .on( "click", youClick )

  // this === "zombie"
  .on( "click", $.proxy( you.test, me ) )

  // this === "&lt;button&gt; element"
  .on( "click", you.test );
Enforce the context of the function using the "context, function name" signature. Unbind the handler after first click.
  &lt;p&gt;&lt;button id="test"&gt;Test&lt;/button&gt;&lt;/p&gt;
  &lt;p id="log"&gt;&lt;/p&gt;

var obj = {
  name: "John",
  test: function() {
    $( "#log" ).append( this.name );
    $( "#test" ).off( "click", obj.test );
  }
};
$( "#test" ).on( "click", jQuery.proxy( obj, "test" ) );
Change the context of a function bound to the click handler,
    
&lt;p&gt;&lt;button type="button" id="test"&gt;Test&lt;/button&gt;&lt;/p&gt;
&lt;div id="log"&gt;&lt;/div&gt;

var me = {
  // I'm a dog
  type: "dog",

  // Note that event comes *after* one and two
  test: function( one, two, event ) {
    $( "#log" )

      // `one` maps to `you`, the 1st additional
      // argument in the $.proxy function call
      .append( "&lt;h3&gt;Hello " + one.type + ":&lt;/h3&gt;" )

      // The `this` keyword refers to `me`
      // (the 2nd, context, argument of $.proxy)
      .append( "I am a " + this.type + ", " )

      // `two` maps to `they`, the 2nd additional
      // argument in the $.proxy function call
      .append( "and they are " + two.type + ".&lt;br&gt;" )

      // The event type is "click"
      .append( "Thanks for " + event.type + "ing." )

      // The clicked element is `event.target`,
      // and its type is "button"
      .append( "the " + event.target.type + "." );
  }
};

var you = { type: "cat" };
var they = { type: "fish" };

// Set up handler to execute me.test() in the context
// of `me`, with `you` and `they` as additional arguments
var proxy = $.proxy( me.test, me, you, they );

$( "#test" )
  .on( "click", proxy );
</example>
        </examples>
      </method>
      <method name='proxy' scope='instance'>
        <description>Takes a function and returns a new one that will always have a particular context.</description>
        <return-types>
          <return-type type='Function' />
        </return-types>
        <parameters>
          <parameter name='context' usage='required' type='PlainObject'>
            <description>The object to which the context of the function should be set.</description>
          </parameter>
          <parameter name='name' usage='required' type='String'>
            <description>The name of the function whose context will be changed (should be a property of the context object).</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the context of functions bound to a click handler using the "function, context" signature. Unbind the first handler after first click.
&lt;p&gt;&lt;button type="button" id="test"&gt;Test&lt;/button&gt;&lt;/p&gt;
&lt;div id="log"&gt;&lt;/div&gt;

var me = {
  type: "zombie",
  test: function( event ) {
    // Without proxy, `this` would refer to the event target
    // use event.target to reference that element.
    var element = event.target;
    $( element ).css( "background-color", "red" );

    // With proxy, `this` refers to the me object encapsulating
    // this function.
    $( "#log" ).append( "Hello " + this.type + "&lt;br&gt;" );
    $( "#test" ).off( "click", this.test );
  }
};

var you = {
  type: "person",
  test: function( event ) {
    $( "#log" ).append( this.type + " " );
  }
};

// Execute you.test() in the context of the `you` object
// no matter where it is called
// i.e. the `this` keyword will refer to `you`
var youClick = $.proxy( you.test, you );

// attach click handlers to #test
$( "#test" )
  // this === "zombie"; handler unbound after first click
  .on( "click", $.proxy( me.test, me ) )

  // this === "person"
  .on( "click", youClick )

  // this === "zombie"
  .on( "click", $.proxy( you.test, me ) )

  // this === "&lt;button&gt; element"
  .on( "click", you.test );
Enforce the context of the function using the "context, function name" signature. Unbind the handler after first click.
  &lt;p&gt;&lt;button id="test"&gt;Test&lt;/button&gt;&lt;/p&gt;
  &lt;p id="log"&gt;&lt;/p&gt;

var obj = {
  name: "John",
  test: function() {
    $( "#log" ).append( this.name );
    $( "#test" ).off( "click", obj.test );
  }
};
$( "#test" ).on( "click", jQuery.proxy( obj, "test" ) );
Change the context of a function bound to the click handler,
    
&lt;p&gt;&lt;button type="button" id="test"&gt;Test&lt;/button&gt;&lt;/p&gt;
&lt;div id="log"&gt;&lt;/div&gt;

var me = {
  // I'm a dog
  type: "dog",

  // Note that event comes *after* one and two
  test: function( one, two, event ) {
    $( "#log" )

      // `one` maps to `you`, the 1st additional
      // argument in the $.proxy function call
      .append( "&lt;h3&gt;Hello " + one.type + ":&lt;/h3&gt;" )

      // The `this` keyword refers to `me`
      // (the 2nd, context, argument of $.proxy)
      .append( "I am a " + this.type + ", " )

      // `two` maps to `they`, the 2nd additional
      // argument in the $.proxy function call
      .append( "and they are " + two.type + ".&lt;br&gt;" )

      // The event type is "click"
      .append( "Thanks for " + event.type + "ing." )

      // The clicked element is `event.target`,
      // and its type is "button"
      .append( "the " + event.target.type + "." );
  }
};

var you = { type: "cat" };
var they = { type: "fish" };

// Set up handler to execute me.test() in the context
// of `me`, with `you` and `they` as additional arguments
var proxy = $.proxy( me.test, me, you, they );

$( "#test" )
  .on( "click", proxy );
</example>
        </examples>
      </method>
      <method name='proxy' scope='instance'>
        <description>Takes a function and returns a new one that will always have a particular context.</description>
        <return-types>
          <return-type type='Function' />
        </return-types>
        <parameters>
          <parameter name='function' usage='required' type='Function'>
            <description>The function whose context will be changed.</description>
          </parameter>
          <parameter name='context' usage='required' type='PlainObject'>
            <description>The object to which the context (this) of the function should be set.</description>
          </parameter>
          <parameter name='additionalArguments' usage='optional' type='Anything'>
            <description>Any number of arguments to be passed to the function referenced in the function argument.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the context of functions bound to a click handler using the "function, context" signature. Unbind the first handler after first click.
&lt;p&gt;&lt;button type="button" id="test"&gt;Test&lt;/button&gt;&lt;/p&gt;
&lt;div id="log"&gt;&lt;/div&gt;

var me = {
  type: "zombie",
  test: function( event ) {
    // Without proxy, `this` would refer to the event target
    // use event.target to reference that element.
    var element = event.target;
    $( element ).css( "background-color", "red" );

    // With proxy, `this` refers to the me object encapsulating
    // this function.
    $( "#log" ).append( "Hello " + this.type + "&lt;br&gt;" );
    $( "#test" ).off( "click", this.test );
  }
};

var you = {
  type: "person",
  test: function( event ) {
    $( "#log" ).append( this.type + " " );
  }
};

// Execute you.test() in the context of the `you` object
// no matter where it is called
// i.e. the `this` keyword will refer to `you`
var youClick = $.proxy( you.test, you );

// attach click handlers to #test
$( "#test" )
  // this === "zombie"; handler unbound after first click
  .on( "click", $.proxy( me.test, me ) )

  // this === "person"
  .on( "click", youClick )

  // this === "zombie"
  .on( "click", $.proxy( you.test, me ) )

  // this === "&lt;button&gt; element"
  .on( "click", you.test );
Enforce the context of the function using the "context, function name" signature. Unbind the handler after first click.
  &lt;p&gt;&lt;button id="test"&gt;Test&lt;/button&gt;&lt;/p&gt;
  &lt;p id="log"&gt;&lt;/p&gt;

var obj = {
  name: "John",
  test: function() {
    $( "#log" ).append( this.name );
    $( "#test" ).off( "click", obj.test );
  }
};
$( "#test" ).on( "click", jQuery.proxy( obj, "test" ) );
Change the context of a function bound to the click handler,
    
&lt;p&gt;&lt;button type="button" id="test"&gt;Test&lt;/button&gt;&lt;/p&gt;
&lt;div id="log"&gt;&lt;/div&gt;

var me = {
  // I'm a dog
  type: "dog",

  // Note that event comes *after* one and two
  test: function( one, two, event ) {
    $( "#log" )

      // `one` maps to `you`, the 1st additional
      // argument in the $.proxy function call
      .append( "&lt;h3&gt;Hello " + one.type + ":&lt;/h3&gt;" )

      // The `this` keyword refers to `me`
      // (the 2nd, context, argument of $.proxy)
      .append( "I am a " + this.type + ", " )

      // `two` maps to `they`, the 2nd additional
      // argument in the $.proxy function call
      .append( "and they are " + two.type + ".&lt;br&gt;" )

      // The event type is "click"
      .append( "Thanks for " + event.type + "ing." )

      // The clicked element is `event.target`,
      // and its type is "button"
      .append( "the " + event.target.type + "." );
  }
};

var you = { type: "cat" };
var they = { type: "fish" };

// Set up handler to execute me.test() in the context
// of `me`, with `you` and `they` as additional arguments
var proxy = $.proxy( me.test, me, you, they );

$( "#test" )
  .on( "click", proxy );
</example>
        </examples>
      </method>
      <method name='proxy' scope='instance'>
        <description>Takes a function and returns a new one that will always have a particular context.</description>
        <return-types>
          <return-type type='Function' />
        </return-types>
        <parameters>
          <parameter name='context' usage='required' type='PlainObject'>
            <description>The object to which the context of the function should be set.</description>
          </parameter>
          <parameter name='name' usage='required' type='String'>
            <description>The name of the function whose context will be changed (should be a property of the context object).</description>
          </parameter>
          <parameter name='additionalArguments' usage='optional' type='Anything'>
            <description>Any number of arguments to be passed to the function named in the name argument.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Change the context of functions bound to a click handler using the "function, context" signature. Unbind the first handler after first click.
&lt;p&gt;&lt;button type="button" id="test"&gt;Test&lt;/button&gt;&lt;/p&gt;
&lt;div id="log"&gt;&lt;/div&gt;

var me = {
  type: "zombie",
  test: function( event ) {
    // Without proxy, `this` would refer to the event target
    // use event.target to reference that element.
    var element = event.target;
    $( element ).css( "background-color", "red" );

    // With proxy, `this` refers to the me object encapsulating
    // this function.
    $( "#log" ).append( "Hello " + this.type + "&lt;br&gt;" );
    $( "#test" ).off( "click", this.test );
  }
};

var you = {
  type: "person",
  test: function( event ) {
    $( "#log" ).append( this.type + " " );
  }
};

// Execute you.test() in the context of the `you` object
// no matter where it is called
// i.e. the `this` keyword will refer to `you`
var youClick = $.proxy( you.test, you );

// attach click handlers to #test
$( "#test" )
  // this === "zombie"; handler unbound after first click
  .on( "click", $.proxy( me.test, me ) )

  // this === "person"
  .on( "click", youClick )

  // this === "zombie"
  .on( "click", $.proxy( you.test, me ) )

  // this === "&lt;button&gt; element"
  .on( "click", you.test );
Enforce the context of the function using the "context, function name" signature. Unbind the handler after first click.
  &lt;p&gt;&lt;button id="test"&gt;Test&lt;/button&gt;&lt;/p&gt;
  &lt;p id="log"&gt;&lt;/p&gt;

var obj = {
  name: "John",
  test: function() {
    $( "#log" ).append( this.name );
    $( "#test" ).off( "click", obj.test );
  }
};
$( "#test" ).on( "click", jQuery.proxy( obj, "test" ) );
Change the context of a function bound to the click handler,
    
&lt;p&gt;&lt;button type="button" id="test"&gt;Test&lt;/button&gt;&lt;/p&gt;
&lt;div id="log"&gt;&lt;/div&gt;

var me = {
  // I'm a dog
  type: "dog",

  // Note that event comes *after* one and two
  test: function( one, two, event ) {
    $( "#log" )

      // `one` maps to `you`, the 1st additional
      // argument in the $.proxy function call
      .append( "&lt;h3&gt;Hello " + one.type + ":&lt;/h3&gt;" )

      // The `this` keyword refers to `me`
      // (the 2nd, context, argument of $.proxy)
      .append( "I am a " + this.type + ", " )

      // `two` maps to `they`, the 2nd additional
      // argument in the $.proxy function call
      .append( "and they are " + two.type + ".&lt;br&gt;" )

      // The event type is "click"
      .append( "Thanks for " + event.type + "ing." )

      // The clicked element is `event.target`,
      // and its type is "button"
      .append( "the " + event.target.type + "." );
  }
};

var you = { type: "cat" };
var they = { type: "fish" };

// Set up handler to execute me.test() in the context
// of `me`, with `you` and `they` as additional arguments
var proxy = $.proxy( me.test, me, you, they );

$( "#test" )
  .on( "click", proxy );
</example>
        </examples>
      </method>
      <method name='queue' scope='instance'>
        <description>Show the queue of functions to be executed on the matched element.</description>
        <return-types>
          <return-type type='Array' />
        </return-types>
        <parameters>
          <parameter name='element' usage='required' type='Element'>
            <description>A DOM element to inspect for an attached queue.</description>
          </parameter>
          <parameter name='queueName' usage='optional' type='String'>
            <description>A string containing the name of the queue. Defaults to fx, the standard effects queue.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Show the length of the queue.
$( "#show" ).click(function() {
  var n = jQuery.queue( $( "div" )[ 0 ], "fx" );
  $( "span" ).text( "Queue length is: " + n.length );
});

function runIt() {
  $( "div" )
    .show( "slow" )
    .animate({
      left: "+=200"
    }, 2000 )
    .slideToggle( 1000 )
    .slideToggle( "fast" )
    .animate({
      left: "-=200"
    }, 1500 )
    .hide( "slow" )
    .show( 1200 )
    .slideUp( "normal", runIt );
}

runIt();

  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }
  span {
    color: red;
  }

&lt;button id="show"&gt;Show Length of Queue&lt;/button&gt;
&lt;span&gt;&lt;/span&gt;
&lt;div&gt;&lt;/div&gt;
  </example>
        </examples>
      </method>
      <method name='queue' scope='instance'>
        <description>Manipulate the queue of functions to be executed on the matched element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='element' usage='required' type='Element'>
            <description>A DOM element where the array of queued functions is attached.</description>
          </parameter>
          <parameter name='queueName' usage='required' type='String'>
            <description>A string containing the name of the queue. Defaults to fx, the standard effects queue.</description>
          </parameter>
          <parameter name='newQueue' usage='required' type='Array'>
            <description>An array of functions to replace the current queue contents.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Queue a custom function.
$( document.body ).click(function() {
  var divs = $( "div" )
    .show( "slow" )
    .animate({ left: "+=200" }, 2000 );
  jQuery.queue( divs[ 0 ], "fx", function() {
    $( this ).addClass( "newcolor" );
    jQuery.dequeue( this );
  });
  divs.animate({ left: "-=200" }, 500 );
  jQuery.queue( divs[ 0 ], "fx", function() {
    $( this ).removeClass( "newcolor" );
    jQuery.dequeue( this );
  });
  divs.slideUp();
});

  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }

Click here...
&lt;div&gt;&lt;/div&gt;
Set a queue array to delete the queue.
$( "#start" ).click(function() {
  var divs = $( "div" )
    .show( "slow" )
    .animate({ left: "+=200" }, 5000 );
  jQuery.queue( divs[ 0 ], "fx", function() {
    $( this ).addClass( "newcolor" );
    jQuery.dequeue( this );
  });
  divs.animate({ left: "-=200" }, 1500 );
  jQuery.queue( divs[ 0 ], "fx", function() {
    $( this ).removeClass( "newcolor" );
    jQuery.dequeue( this );
  });
  divs.slideUp();
});
$( "#stop" ).click(function() {
  jQuery.queue( $( "div" )[ 0 ], "fx", [] );
  $( "div" ).stop();
});

  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }

&lt;button id="start"&gt;Start&lt;/button&gt;
&lt;button id="stop"&gt;Stop&lt;/button&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='queue' scope='instance'>
        <description>Manipulate the queue of functions to be executed on the matched element.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='element' usage='required' type='Element'>
            <description>A DOM element on which to add a queued function.</description>
          </parameter>
          <parameter name='queueName' usage='required' type='String'>
            <description>A string containing the name of the queue. Defaults to fx, the standard effects queue.</description>
          </parameter>
          <parameter name='callback()' usage='required' type='Function'>
            <description>The new function to add to the queue.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Queue a custom function.
$( document.body ).click(function() {
  var divs = $( "div" )
    .show( "slow" )
    .animate({ left: "+=200" }, 2000 );
  jQuery.queue( divs[ 0 ], "fx", function() {
    $( this ).addClass( "newcolor" );
    jQuery.dequeue( this );
  });
  divs.animate({ left: "-=200" }, 500 );
  jQuery.queue( divs[ 0 ], "fx", function() {
    $( this ).removeClass( "newcolor" );
    jQuery.dequeue( this );
  });
  divs.slideUp();
});

  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }

Click here...
&lt;div&gt;&lt;/div&gt;
Set a queue array to delete the queue.
$( "#start" ).click(function() {
  var divs = $( "div" )
    .show( "slow" )
    .animate({ left: "+=200" }, 5000 );
  jQuery.queue( divs[ 0 ], "fx", function() {
    $( this ).addClass( "newcolor" );
    jQuery.dequeue( this );
  });
  divs.animate({ left: "-=200" }, 1500 );
  jQuery.queue( divs[ 0 ], "fx", function() {
    $( this ).removeClass( "newcolor" );
    jQuery.dequeue( this );
  });
  divs.slideUp();
});
$( "#stop" ).click(function() {
  jQuery.queue( $( "div" )[ 0 ], "fx", [] );
  $( "div" ).stop();
});

  div {
    margin: 3px;
    width: 40px;
    height: 40px;
    position: absolute;
    left: 0px;
    top: 30px;
    background: green;
    display: none;
  }
  div.newcolor {
    background: blue;
  }

&lt;button id="start"&gt;Start&lt;/button&gt;
&lt;button id="stop"&gt;Stop&lt;/button&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='removeData' scope='instance'>
        <description>Remove a previously-stored piece of data.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters>
          <parameter name='element' usage='required' type='Element'>
            <description>A DOM element from which to remove data.</description>
          </parameter>
          <parameter name='name' usage='optional' type='String'>
            <description>A string naming the piece of data to remove.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Set a data store for 2 names then remove one of them.
var div = $( "div" )[ 0 ];
$( "span:eq(0)" ).text( "" + $( "div" ).data( "test1" ) );
jQuery.data( div, "test1", "VALUE-1" );
jQuery.data( div, "test2", "VALUE-2" );
$( "span:eq(1)" ).text( "" + jQuery.data( div, "test1" ) );
jQuery.removeData( div, "test1" );
$( "span:eq(2)" ).text( "" + jQuery.data( div, "test1" ) );
$( "span:eq(3)" ).text( "" + jQuery.data( div, "test2" ) );

  div {
    margin: 2px;
    color: blue;
  }
  span {
    color: red;
  }

&lt;div&gt;value1 before creation: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;value1 after creation: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;value1 after removal: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;value2 after removal: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='sub' scope='instance'>
        <description>Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object.</description>
        <return-types>
          <return-type type='jQuery' />
        </return-types>
        <parameters />
        <examples>
          <example>Adding a method to a jQuery sub so that it isn't exposed externally:
(function(){
  var sub$ = jQuery.sub();
  sub$.fn.myCustomMethod = function() {
    return "just for me";
  };

  sub$( document ).ready(function() {
    sub$( "body" ).myCustomMethod() // "just for me"
  });
})();

typeof jQuery( "body" ).myCustomMethod // undefined
Override some jQuery methods to provide new functionality.
(function() {
  var myjQuery = jQuery.sub();

  myjQuery.fn.remove = function() {

    // New functionality: Trigger a remove event
    this.trigger( "remove" );

    // Be sure to call the original jQuery remove method
    return jQuery.fn.remove.apply( this, arguments );
  };

  myjQuery(function( $ ) {
    $( ".menu" ).click(function() {
      $( this ).find( ".submenu" ).remove();
    });

    // A new remove event is now triggered from this copy of jQuery
    $( document ).on( "remove", function( event ) {
      $( event.target ).parent().hide();
    });
  });
})();

// Regular jQuery doesn't trigger a remove event when removing an element
// This functionality is only contained within the modified 'myjQuery'.
Create a plugin that returns plugin-specific methods.
(function() {

  // Create a new copy of jQuery using sub()
  var plugin = jQuery.sub();

  // Extend that copy with the new plugin methods
  plugin.fn.extend({
    open: function() {
      return this.show();
    },
    close: function() {
      return this.hide();
    }
  });

  // Add our plugin to the original jQuery
  jQuery.fn.myplugin = function() {
    this.addClass( "plugin" );

    // Make sure our plugin returns our special plugin version of jQuery
    return plugin( this );
  };
})();

$( document ).ready(function() {

  // Call the plugin, open method now exists
  $( "#main" ).myplugin().open();

  // Note: Calling just $( "#main" ).open() won't work as open doesn't exist!
});
</example>
        </examples>
      </method>
      <method name='trim' scope='instance'>
        <description>Remove the whitespace from the beginning and end of a string.</description>
        <return-types>
          <return-type type='String' />
        </return-types>
        <parameters>
          <parameter name='str' usage='required' type='String'>
            <description>The string to trim.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Remove the white spaces at the start and at the end of the string.
var str = "         lots of spaces before and after         ";
$( "#original" ).html( "Original String: '" + str + "'" );
$( "#trimmed" ).html( "$.trim()'ed: '" + $.trim(str) + "'" );

&lt;pre id="original"&gt;&lt;/pre&gt;
&lt;pre id="trimmed"&gt;&lt;/pre&gt;
Remove the white spaces at the start and at the end of the string.
$.trim("    hello, how are you?    ");

"hello, how are you?"
</example>
        </examples>
      </method>
      <method name='type' scope='instance'>
        <description>Determine the internal JavaScript [[Class]] of an object.</description>
        <return-types>
          <return-type type='String' />
        </return-types>
        <parameters>
          <parameter name='obj' usage='required' type='PlainObject'>
            <description>Object to get the internal JavaScript [[Class]] of.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Find out if the parameter is a RegExp.
$( "b" ).append( "" + jQuery.type( /test/ ) );

Is it a RegExp? &lt;b&gt;&lt;/b&gt;
</example>
        </examples>
      </method>
      <method name='unique' scope='instance'>
        <description>Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.</description>
        <return-types>
          <return-type type='Array' />
        </return-types>
        <parameters>
          <parameter name='array' usage='required' type='Array'>
            <description>The Array of DOM elements.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Removes any duplicate elements from the array of divs.
// unique() must take a native array
var divs = $( "div" ).get();

// Add 3 elements of class dup too (they are divs)
divs = divs.concat( $( ".dup" ).get() );
$( "div:eq(1)" ).text( "Pre-unique there are " + divs.length + " elements." );

divs = jQuery.unique( divs );
$( "div:eq(2)" ).text( "Post-unique there are " + divs.length + " elements." )
  .css( "color", "red" );

  div {
    color: blue;
  }

&lt;div&gt;There are 6 divs in this document.&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
&lt;div class="dup"&gt;&lt;/div&gt;
&lt;div class="dup"&gt;&lt;/div&gt;
&lt;div class="dup"&gt;&lt;/div&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='when' scope='instance'>
        <description>Provides a way to execute callback functions based on one or more objects, usually Deferred objects that represent asynchronous events.</description>
        <return-types>
          <return-type type='Promise' />
        </return-types>
        <parameters>
          <parameter name='deferreds' usage='required' type='Deferred'>
            <description>One or more Deferred objects, or plain JavaScript objects.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Execute a function after two ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).
$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) ).done(function( a1, a2 ) {
  // a1 and a2 are arguments resolved for the page1 and page2 ajax requests, respectively.
  // Each argument is an array with the following structure: [ data, statusText, jqXHR ]
  var data = a1[ 0 ] + a2[ 0 ]; // a1[ 0 ] = "Whip", a2[ 0 ] = " It"
  if ( /Whip It/.test( data ) ) {
    alert( "We got what we came for!" );
  }
});
Execute the function myFunc when both ajax requests are successful, or myFailure if either one has an error.
$.when( $.ajax( "/page1.php" ), $.ajax( "/page2.php" ) )
  .then( myFunc, myFailure );
</example>
        </examples>
      </method>
      <method name='Deferred' scope='instance'>
        <description> A constructor function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.</description>
        <return-types>
          <return-type type='Deferred' />
        </return-types>
        <parameters>
          <parameter name='beforeStart' usage='optional' type='Function'>
            <description>
        A function that is called just before the constructor returns.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='parseHTML' scope='instance'>
        <description>Parses a string into an array of DOM nodes.</description>
        <return-types>
          <return-type type='Array' />
        </return-types>
        <parameters>
          <parameter name='data' usage='required' type='String'>
            <description>HTML string to be parsed</description>
          </parameter>
          <parameter name='context' usage='optional' type='Element'>
            <description>Document element to serve as the context in which the HTML fragment will be created</description>
          </parameter>
          <parameter name='keepScripts' usage='optional' type='Boolean'>
            <description>A Boolean indicating whether to include scripts passed in the HTML string</description>
          </parameter>
        </parameters>
        <examples>
          <example>Create an array of Dom nodes using an HTML string and insert it into a div.
&lt;div id="log"&gt;
  &lt;h3&gt;Content:&lt;/h3&gt;
&lt;/div&gt;

var $log = $( "#log" ),
  str = "hello, &lt;b&gt;my name is&lt;/b&gt; jQuery.",
  html = $.parseHTML( str ),
  nodeNames = [];

// Append the parsed HTML
$log.append( html );

// Gather the parsed HTML's node names
$.each( html, function( i, el ) {
  nodeNames[ i ] = "&lt;li&gt;" + el.nodeName + "&lt;/li&gt;";
});

// Insert the node names
$log.append( "&lt;h3&gt;Node Names:&lt;/h3&gt;" );
$( "&lt;ol&gt;&lt;/ol&gt;" )
  .append( nodeNames.join( "" ) )
  .appendTo( $log );
</example>
        </examples>
      </method>
    </methods>
  </class>
  <class type='callbacks'>
    <properties />
    <methods>
      <method name='add' scope='instance'>
        <description>Add a callback or a collection of callbacks to a callback list.</description>
        <return-types>
          <return-type type='Callbacks' />
        </return-types>
        <parameters>
          <parameter name='callbacks' usage='required' type=''>
            <description>A function, or array of functions, that are to be added to the callback list.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Use callbacks.add() to add new callbacks to a callback list:
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo: " + value );
};

// Another function to also be added to the list
var bar = function( value ) {
  console.log( "bar: " + value );
};

var callbacks = $.Callbacks();

// Add the function "foo" to the list
callbacks.add( foo );

// Fire the items on the list
callbacks.fire( "hello" );
// Outputs: "foo: hello"

// Add the function "bar" to the list
callbacks.add( bar );

// Fire the items on the list again
callbacks.fire( "world" );

// Outputs:
// "foo: world"
// "bar: world"
</example>
        </examples>
      </method>
      <method name='disable' scope='instance'>
        <description>Disable a callback list from doing anything more.</description>
        <return-types>
          <return-type type='Callbacks' />
        </return-types>
        <parameters />
        <examples>
          <example>Use callbacks.disable() to disable further calls to a callback list:
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( value );
};

var callbacks = $.Callbacks();

// Add the above function to the list
callbacks.add( foo );

// Fire the items on the list
callbacks.fire( "foo" );
// Outputs: foo

// Disable further calls being possible
callbacks.disable();

// Attempt to fire with "foobar" as an argument
callbacks.fire( "foobar" );
// foobar isn't output
</example>
        </examples>
      </method>
      <method name='empty' scope='instance'>
        <description>Remove all of the callbacks from a list.</description>
        <return-types>
          <return-type type='Callbacks' />
        </return-types>
        <parameters />
        <examples>
          <example>Use callbacks.empty() to empty a list of callbacks:
// A sample logging function to be added to a callbacks list
var foo = function( value1, value2 ) {
  console.log( "foo: " + value1 + "," + value2 );
};

// Another function to also be added to the list
var bar = function( value1, value2 ) {
  console.log( "bar: " + value1 + "," + value2 );
};

var callbacks = $.Callbacks();

// Add the two functions
callbacks.add( foo );
callbacks.add( bar );

// Empty the callbacks list
callbacks.empty();

// Check to ensure all callbacks have been removed
console.log( callbacks.has( foo ) );
// false
console.log( callbacks.has( bar ) );
// false
</example>
        </examples>
      </method>
      <method name='fire' scope='instance'>
        <description>Call all of the callbacks with the given arguments</description>
        <return-types>
          <return-type type='Callbacks' />
        </return-types>
        <parameters>
          <parameter name='arguments' usage='required' type='Anything'>
            <description>The argument or list of arguments to pass back to the callback list.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Use callbacks.fire() to invoke the callbacks in a list with any arguments that have been passed:
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo:" + value );
};

var callbacks = $.Callbacks();

// Add the function "foo" to the list
callbacks.add( foo );

// Fire the items on the list
callbacks.fire( "hello" ); // Outputs: "foo: hello"
callbacks.fire( "world" ); // Outputs: "foo: world"

// Add another function to the list
var bar = function( value ){
  console.log( "bar:" + value );
};

// Add this function to the list
callbacks.add( bar );

// Fire the items on the list again
callbacks.fire( "hello again" );
// Outputs:
// "foo: hello again"
// "bar: hello again"
</example>
        </examples>
      </method>
      <method name='fireWith' scope='instance'>
        <description>Call all callbacks in a list with the given context and arguments.</description>
        <return-types>
          <return-type type='Callbacks' />
        </return-types>
        <parameters>
          <parameter name='context' usage='optional' type=''>
            <description>A reference to the context in which the callbacks in the list should be fired.</description>
          </parameter>
          <parameter name='args' usage='optional' type=''>
            <description>An argument, or array of arguments, to pass to the callbacks in the list.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Use callbacks.fireWith() to fire a list of callbacks with a specific context and an array of arguments:
// A sample logging function to be added to a callbacks list
var log = function( value1, value2 ) {
  console.log( "Received: " + value1 + "," + value2 );
};

var callbacks = $.Callbacks();

// Add the log method to the callbacks list
callbacks.add( log );

// Fire the callbacks on the list using the context "window"
// and an arguments array

callbacks.fireWith( window, [ "foo","bar" ] );
// Outputs: "Received: foo, bar"
</example>
        </examples>
      </method>
      <method name='fired' scope='instance'>
        <description>Determine if the callbacks have already been called at least once.</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters />
        <examples>
          <example>Use callbacks.fired() to determine if the callbacks in a list have been called at least once:
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo:" + value );
};

var callbacks = $.Callbacks();

// Add the function "foo" to the list
callbacks.add( foo );

// Fire the items on the list
callbacks.fire( "hello" ); // Outputs: "foo: hello"
callbacks.fire( "world" ); // Outputs: "foo: world"

// Test to establish if the callbacks have been called
console.log( callbacks.fired() );
</example>
        </examples>
      </method>
      <method name='has' scope='instance'>
        <description>Determine whether a supplied callback is in a list</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters>
          <parameter name='callback' usage='required' type='Function'>
            <description>The callback to search for.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Use callbacks.has() to check if a callback list contains a specific callback:
// A sample logging function to be added to a callbacks list
var foo = function( value1, value2 ) {
  console.log( "Received: " + value1 + "," + value2 );
};

// A second function which will not be added to the list
var bar = function( value1, value2 ) {
  console.log( "foobar" );
};

var callbacks = $.Callbacks();

// Add the log method to the callbacks list
callbacks.add( foo );

// Determine which callbacks are in the list
console.log( callbacks.has( foo ) );
// true
console.log( callbacks.has( bar ) );
// false
</example>
        </examples>
      </method>
      <method name='lock' scope='instance'>
        <description>Lock a callback list in its current state.</description>
        <return-types>
          <return-type type='Callbacks' />
        </return-types>
        <parameters />
        <examples>
          <example>Use callbacks.lock() to lock a callback list to avoid further changes being made to the list state:
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo:" + value );
};

var callbacks = $.Callbacks();

// Add the logging function to the callback list
callbacks.add( foo );

// Fire the items on the list, passing an argument
callbacks.fire( "hello" );
// Outputs "foo: hello"

// Lock the callbacks list
callbacks.lock();

// Try firing the items again
callbacks.fire( "world" );

// As the list was locked, no items were called,
// so "world" isn't logged
Use callbacks.lock() to lock a callback list with "memory," and then resume using the list:
&lt;div id="log"&gt;&lt;/div&gt;

// Simple function for logging results
var log = function( value ) {
  $( "#log" ).append( "&lt;p&gt;" + value + "&lt;/p&gt;" );
};

// Two sample functions to be added to a callbacks list
var foo = function( value ) {
  log( "foo: " + value );
};
var bar = function( value ) {
  log( "bar: " + value );
};

// Create the callbacks object with the "memory" flag
var callbacks = $.Callbacks( "memory" );

// Add the foo logging function to the callback list
callbacks.add( foo );

// Fire the items on the list, passing an argument
callbacks.fire( "hello" );
// Outputs "foo: hello"

// Lock the callbacks list
callbacks.lock();

// Try firing the items again
callbacks.fire( "world" );
// As the list was locked, no items were called,
// so "foo: world" isn't logged

// Add the foo function to the callback list again
callbacks.add( foo );

// Try firing the items again
callbacks.fire( "silentArgument" );
// Outputs "foo: hello" because the argument value was stored in memory

// Add the bar function to the callback list
callbacks.add( bar );

callbacks.fire( "youHadMeAtHello" );
// Outputs "bar: hello" because the list is still locked,
// and the argument value is still stored in memory
</example>
        </examples>
      </method>
      <method name='locked' scope='instance'>
        <description>Determine if the callbacks list has been locked.</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters />
        <examples>
          <example>Use callbacks.locked() to determine the lock-state of a callback list:
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo: " + value );
};

var callbacks = $.Callbacks();

// Add the logging function to the callback list
callbacks.add( foo );

// Fire the items on the list, passing an argument
callbacks.fire( "hello" );
// Outputs "foo: hello"

// Lock the callbacks list
callbacks.lock();

// Test the lock-state of the list
console.log ( callbacks.locked() );
// true
</example>
        </examples>
      </method>
      <method name='remove' scope='instance'>
        <description>Remove a callback or a collection of callbacks from a callback list.</description>
        <return-types>
          <return-type type='Callbacks' />
        </return-types>
        <parameters>
          <parameter name='callbacks' usage='required' type=''>
            <description>A function, or array of functions, that are to be removed from the callback list.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Use callbacks.remove() to remove callbacks from a callback list:
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo: " + value );
};

var callbacks = $.Callbacks();

// Add the function "foo" to the list
callbacks.add( foo );

// Fire the items on the list
callbacks.fire( "hello" );
// Outputs: "foo: hello"

// Remove "foo" from the callback list
callbacks.remove( foo );

// Fire the items on the list again
callbacks.fire( "world" );

// Nothing output as "foo" is no longer in the list
</example>
        </examples>
      </method>
      <method name='disabled' scope='instance'>
        <description>Determine if the callbacks list has been disabled.</description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters />
        <examples>
          <example>Use callbacks.disabled() to determine if the callbacks list has been disabled:
// A sample logging function to be added to a callbacks list
var foo = function( value ) {
  console.log( "foo:" + value );
};

var callbacks = $.Callbacks();

// Add the logging function to the callback list
callbacks.add( foo );

// Fire the items on the list, passing an argument
callbacks.fire( "hello" );
// Outputs "foo: hello"

// Disable the callbacks list
callbacks.disable();

// Test the disabled state of the list
console.log ( callbacks.disabled() );
// Outputs: true
</example>
        </examples>
      </method>
    </methods>
  </class>
  <class type='deferred'>
    <properties />
    <methods>
      <method name='always' scope='instance'>
        <description> Add handlers to be called when the Deferred object is either resolved or rejected. </description>
        <return-types>
          <return-type type='Deferred' />
        </return-types>
        <parameters>
          <parameter name='alwaysCallbacks' usage='required' type='Function'>
            <description>
        A function, or array of functions, that is called when the Deferred is resolved or rejected.
      </description>
          </parameter>
          <parameter name='alwaysCallbacks' usage='optional' type='Function'>
            <description>
        Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example>Since the jQuery.get() method returns a jqXHR object, which is derived from a Deferred object, we can attach a callback for both success and error using the deferred.always() method.
$.get( "test.php" ).always(function() {
  alert( "$.get completed with success or error callback arguments" );
});
</example>
        </examples>
      </method>
      <method name='done' scope='instance'>
        <description> Add handlers to be called when the Deferred object is resolved. </description>
        <return-types>
          <return-type type='Deferred' />
        </return-types>
        <parameters>
          <parameter name='doneCallbacks' usage='required' type='Function'>
            <description>
        A function, or array of functions, that are called when the Deferred is resolved.
      </description>
          </parameter>
          <parameter name='doneCallbacks' usage='optional' type='Function'>
            <description>
        Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example>Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the .done() method.
$.get( "test.php" ).done(function() {
  alert( "$.get succeeded" );
});
Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:
// 3 functions to call when the Deferred object is resolved
function fn1() {
  $( "p" ).append( " 1 " );
}
function fn2() {
  $( "p" ).append( " 2 " );
}
function fn3( n ) {
  $( "p" ).append( n + " 3 " + n );
}

// Create a deferred object
var dfd = $.Deferred();

// Add handlers to be called when dfd is resolved
dfd
// .done() can take any number of functions or arrays of functions
  .done( [ fn1, fn2 ], fn3, [ fn2, fn1 ] )
// We can chain done methods, too
  .done(function( n ) {
    $( "p" ).append( n + " we're done." );
  });

// Resolve the Deferred object when the button is clicked
$( "button" ).on( "click", function() {
  dfd.resolve( "and" );
});

&lt;button&gt;Go&lt;/button&gt;
&lt;p&gt;Ready...&lt;/p&gt;
</example>
        </examples>
      </method>
      <method name='fail' scope='instance'>
        <description> Add handlers to be called when the Deferred object is rejected. </description>
        <return-types>
          <return-type type='Deferred' />
        </return-types>
        <parameters>
          <parameter name='failCallbacks' usage='required' type='Function'>
            <description>
        A function, or array of functions, that are called when the Deferred is rejected.
      </description>
          </parameter>
          <parameter name='failCallbacks' usage='optional' type='Function'>
            <description>
        Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example>Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the deferred.done() and deferred.fail() methods.
$.get( "test.php" )
  .done(function() {
    alert( "$.get succeeded" );
  })
  .fail(function() {
    alert( "$.get failed!" );
  });
</example>
        </examples>
      </method>
      <method name='isRejected' scope='instance'>
        <description> Determine whether a Deferred object has been rejected. </description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters />
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='isResolved' scope='instance'>
        <description> Determine whether a Deferred object has been resolved. </description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters />
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='notify' scope='instance'>
        <description> Call the progressCallbacks on a Deferred object with the given args. </description>
        <return-types>
          <return-type type='Deferred' />
        </return-types>
        <parameters>
          <parameter name='args' usage='required' type='Object'>
            <description>
        Optional arguments that are passed to the progressCallbacks.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='notifyWith' scope='instance'>
        <description> Call the progressCallbacks on a Deferred object with the given context and args. </description>
        <return-types>
          <return-type type='Deferred' />
        </return-types>
        <parameters>
          <parameter name='context' usage='required' type='Object'>
            <description>
        Context passed to the progressCallbacks as the this object.
      </description>
          </parameter>
          <parameter name='args' usage='optional' type='Object'>
            <description>
        Optional arguments that are passed to the progressCallbacks.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='pipe' scope='instance'>
        <description> Utility method to filter and/or chain Deferreds.  </description>
        <return-types>
          <return-type type='Promise' />
        </return-types>
        <parameters>
          <parameter name='doneFilter' usage='optional' type='Function'>
            <description>
        An optional function that is called when the Deferred is resolved.
      </description>
          </parameter>
          <parameter name='failFilter' usage='optional' type='Function'>
            <description>
        An optional function that is called when the Deferred is rejected.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example>Filter resolve value:
var defer = $.Deferred(),
  filtered = defer.pipe(function( value ) {
    return value * 2;
  });

defer.resolve( 5 );
filtered.done(function( value ) {
  alert( "Value is ( 2*5 = ) 10: " + value );
});
Filter reject value:
var defer = $.Deferred(),
  filtered = defer.pipe( null, function( value ) {
    return value * 3;
  });

defer.reject( 6 );
filtered.fail(function( value ) {
  alert( "Value is ( 3*6 = ) 18: " + value );
});
Chain tasks:
var request = $.ajax( url, { dataType: "json" } ),
  chained = request.pipe(function( data ) {
    return $.ajax( url2, { data: { user: data.userId } } );
  });

chained.done(function( data ) {
  // data retrieved from url2 as provided by the first request
});
</example>
        </examples>
      </method>
      <method name='pipe' scope='instance'>
        <description> Utility method to filter and/or chain Deferreds.  </description>
        <return-types>
          <return-type type='Promise' />
        </return-types>
        <parameters>
          <parameter name='doneFilter' usage='optional' type='Function'>
            <description>
        An optional function that is called when the Deferred is resolved.
      </description>
          </parameter>
          <parameter name='failFilter' usage='optional' type='Function'>
            <description>
        An optional function that is called when the Deferred is rejected.
      </description>
          </parameter>
          <parameter name='progressFilter' usage='optional' type='Function'>
            <description>
        An optional function that is called when progress notifications are sent to the Deferred.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example>Filter resolve value:
var defer = $.Deferred(),
  filtered = defer.pipe(function( value ) {
    return value * 2;
  });

defer.resolve( 5 );
filtered.done(function( value ) {
  alert( "Value is ( 2*5 = ) 10: " + value );
});
Filter reject value:
var defer = $.Deferred(),
  filtered = defer.pipe( null, function( value ) {
    return value * 3;
  });

defer.reject( 6 );
filtered.fail(function( value ) {
  alert( "Value is ( 3*6 = ) 18: " + value );
});
Chain tasks:
var request = $.ajax( url, { dataType: "json" } ),
  chained = request.pipe(function( data ) {
    return $.ajax( url2, { data: { user: data.userId } } );
  });

chained.done(function( data ) {
  // data retrieved from url2 as provided by the first request
});
</example>
        </examples>
      </method>
      <method name='progress' scope='instance'>
        <description> Add handlers to be called when the Deferred object generates progress notifications.</description>
        <return-types>
          <return-type type='Deferred' />
        </return-types>
        <parameters>
          <parameter name='progressCallbacks' usage='required' type=''>
            <description>
        A function, or array of functions, to be called when the Deferred generates progress notifications.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='promise' scope='instance'>
        <description> Return a Deferred's Promise object. </description>
        <return-types>
          <return-type type='Promise' />
        </return-types>
        <parameters>
          <parameter name='target' usage='optional' type='Object'>
            <description>Object onto which the promise methods have to be attached</description>
          </parameter>
        </parameters>
        <examples>
          <example>Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first "wins" and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action. Also set a timer-based progress notification function, and call a progress handler that adds "working..." to the document body.
function asyncEvent() {
  var dfd = new jQuery.Deferred();

  // Resolve after a random interval
  setTimeout(function() {
    dfd.resolve( "hurray" );
  }, Math.floor( 400 + Math.random() * 2000 ) );

  // Reject after a random interval
  setTimeout(function() {
    dfd.reject( "sorry" );
  }, Math.floor( 400 + Math.random() * 2000 ) );

  // Show a "working..." message every half-second
  setTimeout(function working() {
    if ( dfd.state() === "pending" ) {
      dfd.notify( "working... " );
      setTimeout( working, 500 );
    }
  }, 1 );

  // Return the Promise so caller can't change the Deferred
  return dfd.promise();
}

// Attach a done, fail, and progress handler for the asyncEvent
$.when( asyncEvent() ).then(
  function( status ) {
    alert( status + ", things are going well" );
  },
  function( status ) {
    alert( status + ", you fail this time" );
  },
  function( status ) {
    $( "body" ).append( status );
  }
);
Use the target argument to promote an existing object to a Promise:
// Existing object
var obj = {
    hello: function( name ) {
      alert( "Hello " + name );
    }
  },
  // Create a Deferred
  defer = $.Deferred();

// Set object as a promise
defer.promise( obj );

// Resolve the deferred
defer.resolve( "John" );

// Use the object as a Promise
obj.done(function( name ) {
  obj.hello( name ); // Will alert "Hello John"
}).hello( "Karl" ); // Will alert "Hello Karl"
</example>
        </examples>
      </method>
      <method name='reject' scope='instance'>
        <description> Reject a Deferred object and call any failCallbacks with the given args. </description>
        <return-types>
          <return-type type='Deferred' />
        </return-types>
        <parameters>
          <parameter name='args' usage='optional' type='Anything'>
            <description>
        Optional arguments that are passed to the failCallbacks.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='rejectWith' scope='instance'>
        <description> Reject a Deferred object and call any failCallbacks with the given context and args. </description>
        <return-types>
          <return-type type='Deferred' />
        </return-types>
        <parameters>
          <parameter name='context' usage='required' type='Object'>
            <description>
        Context passed to the failCallbacks as the this object.
      </description>
          </parameter>
          <parameter name='args' usage='optional' type='Array'>
            <description>
        An optional array of arguments that are passed to the failCallbacks.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='resolve' scope='instance'>
        <description> Resolve a Deferred object and call any doneCallbacks with the given args. </description>
        <return-types>
          <return-type type='Deferred' />
        </return-types>
        <parameters>
          <parameter name='args' usage='optional' type='Anything'>
            <description>
        Optional arguments that are passed to the doneCallbacks.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='resolveWith' scope='instance'>
        <description> Resolve a Deferred object and call any doneCallbacks with the given context and args. </description>
        <return-types>
          <return-type type='Deferred' />
        </return-types>
        <parameters>
          <parameter name='context' usage='required' type='Object'>
            <description>
        Context passed to the doneCallbacks as the this object.
      </description>
          </parameter>
          <parameter name='args' usage='optional' type='Array'>
            <description>
        An optional array of arguments that are passed to the doneCallbacks.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='state' scope='instance'>
        <description>Determine the current state of a Deferred object. </description>
        <return-types>
          <return-type type='String' />
        </return-types>
        <parameters />
        <examples>
          <example></example>
        </examples>
      </method>
      <method name='then' scope='instance'>
        <description>Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. </description>
        <return-types>
          <return-type type='Promise' />
        </return-types>
        <parameters>
          <parameter name='doneFilter' usage='required' type='Function'>
            <description>
        A function that is called when the Deferred is resolved.
      </description>
          </parameter>
          <parameter name='failFilter' usage='optional' type='Function'>
            <description>
        An optional function that is called when the Deferred is rejected.
      </description>
          </parameter>
          <parameter name='progressFilter' usage='optional' type='Function'>
            <description>
        An optional function that is called when progress notifications are sent to the Deferred.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example>Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.
$.get( "test.php" ).then(
  function() {
    alert( "$.get succeeded" );
  }, function() {
    alert( "$.get failed!" );
  }
);
Filter the resolve value:
&lt;button&gt;Filter Resolve&lt;/button&gt;
&lt;p&gt;&lt;/p&gt;

var filterResolve = function() {
  var defer = $.Deferred(),
    filtered = defer.then(function( value ) {
      return value * 2;
    });

  defer.resolve( 5 );
  filtered.done(function( value ) {
    $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
  });
};

$( "button" ).on( "click", filterResolve );
Filter reject value:
var defer = $.Deferred(),
  filtered = defer.then( null, function( value ) {
    return value * 3;
  });

defer.reject( 6 );
filtered.fail(function( value ) {
  alert( "Value is ( 3*6 = ) 18: " + value );
});
Chain tasks:
var request = $.ajax( url, { dataType: "json" } ),
  chained = request.then(function( data ) {
    return $.ajax( url2, { data: { user: data.userId } } );
  });

chained.done(function( data ) {
  // data retrieved from url2 as provided by the first request
});
</example>
        </examples>
      </method>
      <method name='then' scope='instance'>
        <description>Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. </description>
        <return-types>
          <return-type type='Promise' />
        </return-types>
        <parameters>
          <parameter name='doneCallbacks' usage='required' type='Function'>
            <description>
        A function, or array of functions, called when the Deferred is resolved.
      </description>
          </parameter>
          <parameter name='failCallbacks' usage='required' type='Function'>
            <description>
        A function, or array of functions, called when the Deferred is rejected.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example>Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.
$.get( "test.php" ).then(
  function() {
    alert( "$.get succeeded" );
  }, function() {
    alert( "$.get failed!" );
  }
);
Filter the resolve value:
&lt;button&gt;Filter Resolve&lt;/button&gt;
&lt;p&gt;&lt;/p&gt;

var filterResolve = function() {
  var defer = $.Deferred(),
    filtered = defer.then(function( value ) {
      return value * 2;
    });

  defer.resolve( 5 );
  filtered.done(function( value ) {
    $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
  });
};

$( "button" ).on( "click", filterResolve );
Filter reject value:
var defer = $.Deferred(),
  filtered = defer.then( null, function( value ) {
    return value * 3;
  });

defer.reject( 6 );
filtered.fail(function( value ) {
  alert( "Value is ( 3*6 = ) 18: " + value );
});
Chain tasks:
var request = $.ajax( url, { dataType: "json" } ),
  chained = request.then(function( data ) {
    return $.ajax( url2, { data: { user: data.userId } } );
  });

chained.done(function( data ) {
  // data retrieved from url2 as provided by the first request
});
</example>
        </examples>
      </method>
      <method name='then' scope='instance'>
        <description>Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. </description>
        <return-types>
          <return-type type='Promise' />
        </return-types>
        <parameters>
          <parameter name='doneCallbacks' usage='required' type='Function'>
            <description>
        A function, or array of functions, called when the Deferred is resolved.
      </description>
          </parameter>
          <parameter name='failCallbacks' usage='required' type='Function'>
            <description>
        A function, or array of functions, called when the Deferred is rejected.
      </description>
          </parameter>
          <parameter name='progressCallbacks' usage='optional' type='Function'>
            <description>
        A function, or array of functions, called when the Deferred notifies progress.
      </description>
          </parameter>
        </parameters>
        <examples>
          <example>Since the jQuery.get method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the .then method.
$.get( "test.php" ).then(
  function() {
    alert( "$.get succeeded" );
  }, function() {
    alert( "$.get failed!" );
  }
);
Filter the resolve value:
&lt;button&gt;Filter Resolve&lt;/button&gt;
&lt;p&gt;&lt;/p&gt;

var filterResolve = function() {
  var defer = $.Deferred(),
    filtered = defer.then(function( value ) {
      return value * 2;
    });

  defer.resolve( 5 );
  filtered.done(function( value ) {
    $( "p" ).html( "Value is ( 2*5 = ) 10: " + value );
  });
};

$( "button" ).on( "click", filterResolve );
Filter reject value:
var defer = $.Deferred(),
  filtered = defer.then( null, function( value ) {
    return value * 3;
  });

defer.reject( 6 );
filtered.fail(function( value ) {
  alert( "Value is ( 3*6 = ) 18: " + value );
});
Chain tasks:
var request = $.ajax( url, { dataType: "json" } ),
  chained = request.then(function( data ) {
    return $.ajax( url2, { data: { user: data.userId } } );
  });

chained.done(function( data ) {
  // data retrieved from url2 as provided by the first request
});
</example>
        </examples>
      </method>
    </methods>
  </class>
  <class type='event'>
    <properties>
      <property name='currentTarget' type='Element' scope='instance'>
        <description> The current DOM element within the event bubbling phase.  </description>
        <examples>
          <example>Alert that currentTarget matches the `this` keyword.
$( "p" ).click(function( event ) {
  alert( event.currentTarget === this ); // true
});
</example>
        </examples>
      </property>
      <property name='data' type='Object' scope='instance'>
        <description>An optional object of data passed to an event method when the current executing handler is bound.  </description>
        <examples>
          <example>Within a for loop, pass the value of i to the .on() method so that the current iteration's value is preserved. 
&lt;button&gt; 0 &lt;/button&gt;
&lt;button&gt; 1 &lt;/button&gt;
&lt;button&gt; 2 &lt;/button&gt;
&lt;button&gt; 3 &lt;/button&gt;
&lt;button&gt; 4 &lt;/button&gt;

&lt;div id="log"&gt;&lt;/div&gt;

var logDiv = $( "#log" );

for ( var i = 0; i &lt; 5; i++ ) {
  $( "button" ).eq( i ).on( "click", { value: i }, function( event ) {
    var msgs = [
      "button = " + $( this ).index(),
      "event.data.value = " + event.data.value,
      "i = " + i
    ];
    logDiv.append( msgs.join( ", " ) + "&lt;br&gt;" );
  });
}
</example>
        </examples>
      </property>
      <property name='delegateTarget' type='Element' scope='instance'>
        <description>The element where the currently-called jQuery event handler was attached.</description>
        <examples>
          <example>When a button in any box class is clicked, change the box's background color to red.
$( ".box" ).on( "click", "button", function( event ) {
  $( event.delegateTarget ).css( "background-color", "red" );
});
</example>
        </examples>
      </property>
      <property name='namespace' type='String' scope='instance'>
        <description>The namespace specified when the event was triggered.</description>
        <examples>
          <example>Determine the event namespace used.
$( "p" ).on( "test.something", function( event ) {
  alert( event.namespace );
});
$( "button" ).click(function( event ) {
  $( "p" ).trigger( "test.something" );
});

&lt;button&gt;display event.namespace&lt;/button&gt;
&lt;p&gt;&lt;/p&gt;
</example>
        </examples>
      </property>
      <property name='pageX' type='Number' scope='instance'>
        <description>The mouse position relative to the left edge of the document.</description>
        <examples>
          <example>Show the mouse position relative to the left and top edges of the document (within this iframe).
  body {
    background-color: #eef;
  }
  div {
    padding: 20px;
  }

&lt;div id="log"&gt;&lt;/div&gt;

$( document ).on( "mousemove", function( event ) {
  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
});
</example>
        </examples>
      </property>
      <property name='pageY' type='Number' scope='instance'>
        <description>The mouse position relative to the top edge of the document.</description>
        <examples>
          <example>Show the mouse position relative to the left and top edges of the document (within this iframe).
  body {
    background-color: #eef;
  }
  div {
    padding: 20px;
  }

&lt;div id="log"&gt;&lt;/div&gt;

$( document ).on( "mousemove", function( event ) {
  $( "#log" ).text( "pageX: " + event.pageX + ", pageY: " + event.pageY );
});
</example>
        </examples>
      </property>
      <property name='relatedTarget' type='Element' scope='instance'>
        <description>The other DOM element involved in the event, if any.</description>
        <examples>
          <example>On mouseout of anchors, alert the element type being entered.
$( "a" ).mouseout(function( event ) {
  alert( event.relatedTarget.nodeName ); // "DIV"
});
</example>
        </examples>
      </property>
      <property name='result' type='Object' scope='instance'>
        <description>The last value returned by an event handler that was triggered by this event, unless the value was undefined.</description>
        <examples>
          <example>Display previous handler's return value
$( "button" ).click(function( event ) {
  return "hey";
});
$( "button" ).click(function( event ) {
  $( "p" ).html( event.result );
});

&lt;button&gt;display event.result&lt;/button&gt;
&lt;p&gt;&lt;/p&gt;
</example>
        </examples>
      </property>
      <property name='target' type='Element' scope='instance'>
        <description> The DOM element that initiated the event.  </description>
        <examples>
          <example>Display the tag's name on click
$( "body" ).click(function( event ) {
  $( "#log" ).html( "clicked: " + event.target.nodeName );
});

  span, strong, p {
    padding: 8px;
    display: block;
    border: 1px solid #999;
  }

&lt;div id="log"&gt;&lt;/div&gt;
&lt;div&gt;
  &lt;p&gt;
    &lt;strong&gt;&lt;span&gt;click&lt;/span&gt;&lt;/strong&gt;
  &lt;/p&gt;
&lt;/div&gt;
Implements a simple event delegation: The click handler is added to an unordered list, and the children of its li children are hidden. Clicking one of the li children toggles (see toggle()) their children.
function handler( event ) {
  var target = $( event.target );
  if ( target.is( "li" ) ) {
    target.children().toggle();
  }
}
$( "ul" ).click( handler ).find( "ul" ).hide();

&lt;ul&gt;
  &lt;li&gt;item 1
    &lt;ul&gt;
      &lt;li&gt;sub item 1-a&lt;/li&gt;
      &lt;li&gt;sub item 1-b&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;item 2
    &lt;ul&gt;
      &lt;li&gt;sub item 2-a&lt;/li&gt;
      &lt;li&gt;sub item 2-b&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</example>
        </examples>
      </property>
      <property name='timeStamp' type='Number' scope='instance'>
        <description>The difference in milliseconds between the time the browser created the event and January 1, 1970.</description>
        <examples>
          <example>Display the time since the click handler last executed.
  div {
    height: 100px;
    width: 300px;
    margin: 10px;
    background-color: #ffd;
    overflow: auto;
  }

var last, diff;
$( "div" ).click(function( event ) {
  if ( last ) {
    diff = event.timeStamp - last;
    $( "div" ).append( "time since last event: " + diff + "&lt;br&gt;" );
  } else {
    $( "div" ).append( "Click again.&lt;br&gt;" );
  }
  last = event.timeStamp;
});

&lt;div&gt;Click.&lt;/div&gt;
</example>
        </examples>
      </property>
      <property name='type' type='String' scope='instance'>
        <description>Describes the nature of the event.</description>
        <examples>
          <example>On all anchor clicks, alert the event type.
$( "a" ).click(function( event ) {
  alert( event.type ); // "click"
});
</example>
        </examples>
      </property>
      <property name='which' type='Number' scope='instance'>
        <description>For key or mouse events, this property indicates the specific key or button that was pressed.</description>
        <examples>
          <example>Log which key was depressed.
$( "#whichkey" ).on( "keydown", function( event ) {
  $( "#log" ).html( event.type + ": " +  event.which );
});

&lt;input id="whichkey" value="type something"&gt;
&lt;div id="log"&gt;&lt;/div&gt;
Log which mouse button was depressed.
$( "#whichkey" ).on( "mousedown", function( event ) {
  $( "#log" ).html( event.type + ": " +  event.which );
});

&lt;input id="whichkey" value="click here"&gt;
&lt;div id="log"&gt;&lt;/div&gt;
</example>
        </examples>
      </property>
      <property name='metaKey' type='Boolean' scope='instance'>
        <description>Indicates whether the META key was pressed when the event fired.</description>
        <examples>
          <example>Determine whether the META key was pressed when the event fired.
  body {
    background-color: #eef;
  }
  div {
    padding: 20px;
  }

&lt;button value="Test" name="Test" id="checkMetaKey"&gt;Click me!&lt;/button&gt;
&lt;div id="display"&gt;&lt;/div&gt;

$( "#checkMetaKey" ).click(function( event ) {
  $( "#display" ).text( event.metaKey );
});
</example>
        </examples>
      </property>
    </properties>
    <methods>
      <method name='isDefaultPrevented' scope='instance'>
        <description>Returns whether event.preventDefault() was ever called on this event object. </description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters />
        <examples>
          <example>Checks whether event.preventDefault() was called.
$( "a" ).click(function( event ) {
  alert( event.isDefaultPrevented() ); // false
  event.preventDefault();
  alert( event.isDefaultPrevented() ); // true
});
</example>
        </examples>
      </method>
      <method name='isImmediatePropagationStopped' scope='instance'>
        <description>  Returns whether event.stopImmediatePropagation() was ever called on this event object. </description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters />
        <examples>
          <example>Checks whether event.stopImmediatePropagation() was called.
function immediatePropStopped( event ) {
  var msg = "";
  if ( event.isImmediatePropagationStopped() ) {
    msg = "called";
  } else {
    msg = "not called";
  }
  $( "#stop-log" ).append( "&lt;div&gt;" + msg + "&lt;/div&gt;" );
}

$( "button" ).click(function( event ) {
  immediatePropStopped( event );
  event.stopImmediatePropagation();
  immediatePropStopped( event );
});

&lt;button&gt;click me&lt;/button&gt;
&lt;div id="stop-log"&gt;&lt;/div&gt;
  </example>
        </examples>
      </method>
      <method name='isPropagationStopped' scope='instance'>
        <description>  Returns whether event.stopPropagation() was ever called on this event object. </description>
        <return-types>
          <return-type type='Boolean' />
        </return-types>
        <parameters />
        <examples>
          <example>Checks whether event.stopPropagation() was called
function propStopped( event ) {
  var msg = "";
  if ( event.isPropagationStopped() ) {
    msg = "called";
  } else {
    msg = "not called";
  }
  $( "#stop-log" ).append( "&lt;div&gt;" + msg + "&lt;/div&gt;" );
}

$( "button" ).click(function(event) {
  propStopped( event );
  event.stopPropagation();
  propStopped( event );
});

&lt;button&gt;click me&lt;/button&gt;
&lt;div id="stop-log"&gt;&lt;/div&gt;
  </example>
        </examples>
      </method>
      <method name='preventDefault' scope='instance'>
        <description>If this method is called, the default action of the event will not be triggered.</description>
        <return-types>
          <return-type type='undefined' />
        </return-types>
        <parameters />
        <examples>
          <example>Cancel the default action (navigation) of the click.
$( "a" ).click(function( event ) {
  event.preventDefault();
  $( "&lt;div&gt;" )
    .append( "default " + event.type + " prevented" )
    .appendTo( "#log" );
});

&lt;a href="http://jquery.com"&gt;default click action is prevented&lt;/a&gt;
&lt;div id="log"&gt;&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='stopImmediatePropagation' scope='instance'>
        <description>Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.</description>
        <return-types>
          <return-type type='' />
        </return-types>
        <parameters />
        <examples>
          <example>Prevents other event handlers from being called.
  p {
    height: 30px;
    width: 150px;
    background-color: #ccf;
  }
  div {
    height: 30px;
    width: 150px;
    background-color: #cfc;
  }

$( "p" ).click(function( event ) {
  event.stopImmediatePropagation();
});
$( "p" ).click(function( event ) {
  // This function won't be executed
  $( this ).css( "background-color", "#f00" );
});
$( "div" ).click(function( event ) {
  // This function will be executed
  $( this ).css( "background-color", "#f00" );
});

&lt;p&gt;paragraph&lt;/p&gt;
&lt;div&gt;division&lt;/div&gt;
</example>
        </examples>
      </method>
      <method name='stopPropagation' scope='instance'>
        <description>Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.</description>
        <return-types>
          <return-type type='' />
        </return-types>
        <parameters />
        <examples>
          <example>Kill the bubbling on the click event.
$( "p" ).click(function( event ) {
  event.stopPropagation();
  // Do something
});
</example>
        </examples>
      </method>
    </methods>
  </class>
  <class type='jQuery.browser'>
    <properties>
      <property name='version' type='String' scope='instance'>
        <description>The version number of the rendering engine for the user's browser. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin.</description>
        <examples>
          <example>Return the version number of the rendering engine used by the user's current browser. For example, FireFox 4 returns 2.0 (the version of the Gecko rendering engine it utilizes). Will not work in jQuery 1.9 or later unless the jQuery Migrate plugin is included.
$( "p" ).html( "The version # of the browser's rendering engine is: &lt;span&gt;" +
  $.browser.version + "&lt;/span&gt;" );
Alert the version of IE's rendering engine that is being used. Will not work in jQuery 1.9 or later unless the jQuery Migrate plugin is included.
if ( $.browser.msie ) {
  alert( $.browser.version );
}
</example>
        </examples>
      </property>
    </properties>
    <methods />
  </class>
  <class type='jQuery.fx'>
    <properties>
      <property name='interval' type='Number' scope='instance'>
        <description>The rate (in milliseconds) at which animations fire.</description>
        <examples>
          <example>Cause all animations to run with less frames.
jQuery.fx.interval = 100;
$( "input" ).click(function() {
  $( "div" ).toggle( 3000 );
});

  div {
    width: 50px;
    height: 30px;
    margin: 5px;
    float: left;
    background: green;
  }

&lt;p&gt;&lt;input type="button" value="Run"&gt;&lt;/p&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </property>
      <property name='off' type='Boolean' scope='instance'>
        <description>Globally disable all animations.</description>
        <examples>
          <example>Toggle animation on and off
var toggleFx = function() {
  $.fx.off = !$.fx.off;
};
toggleFx();
$( "button" ).click( toggleFx );
$( "input" ).click(function() {
  $( "div" ).toggle( "slow" );
});

  div {
    width: 50px;
    height: 30px;
    margin: 5px;
    float: left;
    background: green;
  }

&lt;input type="button" value="Run"&gt;
&lt;button&gt;Toggle fx&lt;/button&gt;
&lt;div&gt;&lt;/div&gt;
</example>
        </examples>
      </property>
    </properties>
    <methods />
  </class>
  <class type='jQuery.fn'>
    <properties />
    <methods>
      <method name='extend' scope='instance'>
        <description>Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.</description>
        <return-types>
          <return-type type='Object' />
        </return-types>
        <parameters>
          <parameter name='object' usage='required' type='Object'>
            <description>An object to merge onto the jQuery prototype.</description>
          </parameter>
        </parameters>
        <examples>
          <example>Add two methods to the jQuery prototype ($.fn) object and then use one of them.
jQuery.fn.extend({
  check: function() {
    return this.each(function() {
      this.checked = true;
    });
  },
  uncheck: function() {
    return this.each(function() {
      this.checked = false;
    });
  }
});

// Use the newly created .check() method
$( "input[type='checkbox']" ).check();

  label {
    display: block;
    margin: .5em;
  }

&lt;label&gt;&lt;input type="checkbox" name="foo"&gt; Foo&lt;/label&gt;
&lt;label&gt;&lt;input type="checkbox" name="bar"&gt; Bar&lt;/label&gt;
</example>
        </examples>
      </method>
    </methods>
  </class>
</javascript>
